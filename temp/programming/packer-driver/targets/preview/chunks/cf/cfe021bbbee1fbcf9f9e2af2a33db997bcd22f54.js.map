{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","ccclass","property","GravityHandler","onLoad","applyGravity","grid","moved","promises","col","length","row","currentPiece","belowPiece","isEmpty","targetRow","targetCol","push","updatePosition","node","Promise","all"],"mappings":";;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;;;;;;;;OACf;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;gCAGjBI,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCH,SADpC,CAC8C;AAC5CI,QAAAA,MAAM,GAAG;AACP,gBAAMA,MAAN;AACD;;AAEKC,QAAAA,YAAY,CAACC,IAAD,EAAO;AAAA;AACvB,gBAAIC,KAAK,GAAG,KAAZ;AACA,gBAAIC,QAAyB,GAAG,EAAhC;;AAEA,eAAG;AACDD,cAAAA,KAAK,GAAG,KAAR;;AAEA,mBAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,MAAhC,EAAwCD,GAAG,EAA3C,EAA+C;AAC7C,qBAAK,IAAIE,GAAG,GAAGL,IAAI,CAACI,MAAL,GAAc,CAA7B,EAAgCC,GAAG,IAAI,CAAvC,EAA0CA,GAAG,EAA7C,EAAiD;AAC/C,sBAAMC,YAAY,GAAGN,IAAI,CAACK,GAAD,CAAJ,CAAUF,GAAV,CAArB;AACA,sBAAMI,UAAU,GAAGP,IAAI,CAACK,GAAG,GAAE,CAAN,CAAJ,CAAaF,GAAb,CAAnB,CAF+C,CAI/C;;AACA,sBAAII,UAAU,CAACC,OAAX,IAAsB,CAACF,YAAY,CAACE,OAAxC,EAAiD;AAC/C;AACA,wBAAMC,SAAS,GAAGJ,GAAG,GAAG,CAAxB;AACA,wBAAMK,SAAS,GAAGP,GAAlB,CAH+C,CAK/C;;AACAD,oBAAAA,QAAQ,CAACS,IAAT,CAAcL,YAAY,CAACM,cAAb,CAA4BL,UAAU,CAACF,GAAvC,EAA2CE,UAAU,CAACJ,GAAtD,CAAd,EAN+C,CAQ/C;;AACAI,oBAAAA,UAAU,CAACM,IAAX,GAAkBP,YAAY,CAACO,IAA/B;AACAP,oBAAAA,YAAY,CAACO,IAAb,GAAoB,IAApB,CAV+C,CAUrB;;AAE1BZ,oBAAAA,KAAK,GAAG,IAAR;AACD;AACF;AACF;;AAED,oBAAMa,OAAO,CAACC,GAAR,CAAYb,QAAZ,CAAN;AACD,aA3BD,QA2BSD,KA3BT;AAJuB;AAgCxB;;AArC2C,O","sourcesContent":["import { _decorator, Component, Vec3 } from \"cc\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"GravityHandler\")\r\nexport class GravityHandler extends Component {\r\n  onLoad() {\r\n    super.onLoad();\r\n  }\r\n\r\n  async applyGravity(grid) {\r\n    let moved = false;\r\n    let promises: Promise<void>[] = [];\r\n\r\n    do {\r\n      moved = false;\r\n\r\n      for (let col = 0; col < grid[0].length; col++) {\r\n        for (let row = grid.length - 2; row >= 1; row--) {\r\n          const currentPiece = grid[row][col];\r\n          const belowPiece = grid[row -1][col];\r\n\r\n          // Eğer aşağıdaki hücre boşsa ve yukarıdaki hücre doluysa\r\n          if (belowPiece.isEmpty && !currentPiece.isEmpty) {\r\n            // Aşağıdaki boş hücreye yukarıdaki hücrenin node'unu taşı\r\n            const targetRow = row + 1;\r\n            const targetCol = col;\r\n\r\n            // Yukarıdaki hücre node'unu aşağıdaki hücreye taşı\r\n            promises.push(currentPiece.updatePosition(belowPiece.row,belowPiece.col));\r\n\r\n            // Node'u yer değiştir\r\n            belowPiece.node = currentPiece.node;\r\n            currentPiece.node = null; // Boş hücre olarak ayarla\r\n\r\n            moved = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      await Promise.all(promises);\r\n    } while (moved); \r\n  }\r\n}\r\n"]}