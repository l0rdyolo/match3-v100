{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Vec3","SingletonComponent","GridManager","ccclass","property","GravityHandler","onLoad","applyGravity","grid","getInstance","moved","col","length","row","console","error","node","piece","moveToPosition","fillEmptySpaces","emptySpaces"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,I,OAAAA,I;;AACZC,MAAAA,kB,iBAAAA,kB;;AACAC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;gCAGjBM,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb;AAAA;AAAA,oDACuE;AACnEC,QAAAA,MAAM,GAAG;AACL,gBAAMA,MAAN;AACH;;AAEKC,QAAAA,YAAY,GAAG;AAAA;AACjB,gBAAMC,IAAI,GAAG;AAAA;AAAA,4CAAYC,WAAZ,GAA0BD,IAAvC;AACA,gBAAIE,KAAK,GAAG,KAAZ;;AAEA,eAAG;AACCA,cAAAA,KAAK,GAAG,KAAR;;AACA,mBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,MAAhC,EAAwCD,GAAG,EAA3C,EAA+C;AAC3C,qBAAK,IAAIE,GAAG,GAAGL,IAAI,CAACI,MAAL,GAAc,CAA7B,EAAgCC,GAAG,GAAG,CAAtC,EAAyCA,GAAG,EAA5C,EAAgD;AAC5C,sBAAI,CAACL,IAAI,CAACK,GAAD,CAAL,IAAc,CAACL,IAAI,CAACK,GAAG,GAAG,CAAP,CAAvB,EAAkC;AAC9BC,oBAAAA,OAAO,CAACC,KAAR,0BAAqCF,GAArC;AACA;AACH;;AACD,sBAAIL,IAAI,CAACK,GAAD,CAAJ,CAAUF,GAAV,EAAeK,IAAf,KAAwB,IAAxB,IAAgCR,IAAI,CAACK,GAAG,GAAG,CAAP,CAAJ,CAAcF,GAAd,EAAmBK,IAAnB,KAA4B,IAAhE,EAAsE;AAClER,oBAAAA,IAAI,CAACK,GAAD,CAAJ,CAAUF,GAAV,EAAeK,IAAf,GAAsBR,IAAI,CAACK,GAAG,GAAG,CAAP,CAAJ,CAAcF,GAAd,EAAmBK,IAAzC;AACAR,oBAAAA,IAAI,CAACK,GAAG,GAAG,CAAP,CAAJ,CAAcF,GAAd,EAAmBK,IAAnB,GAA0B,IAA1B;AACA,wBAAMC,KAAK,GAAGT,IAAI,CAACK,GAAD,CAAJ,CAAUF,GAAV,CAAd;AACAM,oBAAAA,KAAK,CAACC,cAAN,CAAqB,IAAIlB,IAAJ,CAASW,GAAT,EAAcE,GAAd,EAAmB,CAAnB,CAArB;AACAH,oBAAAA,KAAK,GAAG,IAAR;AACH;AACJ;AACJ;AACJ,aAjBD,QAiBSA,KAjBT,EAJiB,CAsBjB;;AAtBiB;AAuBpB;;AAEOS,QAAAA,eAAe,GAAG;AACtB,cAAMX,IAAI,GAAG;AAAA;AAAA,0CAAYC,WAAZ,GAA0BD,IAAvC;;AACA,eAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,MAAhC,EAAwCD,GAAG,EAA3C,EAA+C;AAC3C,gBAAIS,WAAW,GAAG,CAAlB;;AACA,iBAAK,IAAIP,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,IAAI,CAACI,MAA7B,EAAqCC,GAAG,EAAxC,EAA4C;AACxC,kBAAIL,IAAI,CAACK,GAAD,CAAJ,CAAUF,GAAV,EAAeK,IAAf,KAAwB,IAA5B,EAAkC;AAC9BI,gBAAAA,WAAW;AACd;AACJ,aAN0C,CAQ3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;AACJ,SAjDkE,CAmDnE;AACA;AACA;AACA;;;AAtDmE,O","sourcesContent":["import { _decorator, Vec3 } from \"cc\";\nimport { SingletonComponent } from \"../SingletonComponent\";\nimport { GridManager } from \"./GridManager\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('GravityHandler')\nexport class GravityHandler extends SingletonComponent<GravityHandler> {\n    onLoad() {\n        super.onLoad();\n    }\n\n    async applyGravity() {\n        const grid = GridManager.getInstance().grid;\n        let moved = false;\n\n        do {\n            moved = false;\n            for (let col = 0; col < grid[0].length; col++) {\n                for (let row = grid.length - 1; row > 0; row--) {\n                    if (!grid[row] || !grid[row - 1]) {\n                        console.error(`Invalid grid row at ${row}`);\n                        continue;\n                    }\n                    if (grid[row][col].node === null && grid[row + 1][col].node !== null) {\n                        grid[row][col].node = grid[row + 1][col].node;\n                        grid[row + 1][col].node = null;\n                        const piece = grid[row][col]\n                        piece.moveToPosition(new Vec3(col, row, 0));\n                        moved = true;\n                    }\n                }\n            }\n        } while (moved);\n        // this.fillEmptySpaces();\n    }\n\n    private fillEmptySpaces() {\n        const grid = GridManager.getInstance().grid;\n        for (let col = 0; col < grid[0].length; col++) {\n            let emptySpaces = 0;\n            for (let row = 0; row < grid.length; row++) {\n                if (grid[row][col].node === null) {\n                    emptySpaces++;\n                }\n            }\n            \n            // // Boş alanları yeni parçalarla doldur\n            // for (let i = 0; i < emptySpaces; i++) {\n            //     const newPiece = this.createNewPiece();\n            //     const row = emptySpaces - i - 1;\n            //     grid[row][col].node = newPiece;\n            //     const pieceComponent = newPiece.getComponent(Piece);\n            //     pieceComponent.moveToPosition(new Vec3(col, row, 0));\n            // }\n        }\n    }\n\n    // private createNewPiece(): Node {\n    //     // Yeni bir parça oluştur ve döndür\n    //     // Bu metodu kendi oyununuza göre uyarlamanız gerekecek\n    // }\n}"]}