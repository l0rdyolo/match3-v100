{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-2d/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Node","instantiate","Vec3","EasyLevels","ccclass","property","GridGenerator","start","setNodeActive","dummyCandy","generate","level","update","deltaTime","settingNode","isActive","active","testEffects","rows","cols","gridData","grid","tileSize","row","col","tileType","tilePrefab","tilePrefabs","newTileNode","position","getTilePosition","setPosition","node","addChild","x","y"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;;AAC1CC,MAAAA,U,iBAAAA,U;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;+BAGjBQ,a,WADZF,OAAO,CAAC,eAAD,C,UAELC,QAAQ,CAACL,IAAD,C,UAERK,QAAQ;AAAA;AAAA,mC,UAGRA,QAAQ,CAAC,CAACL,IAAD,CAAD,C,2BAPX,MACaM,aADb,SACmCP,SADnC,CAC6C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAOjB;AAE1BQ,QAAAA,KAAK,GAAG;AACN,eAAKC,aAAL,CAAmB,KAAKC,UAAxB,EAAoC,IAApC;AACA,eAAKC,QAAL,CAAc;AAAA;AAAA,wCAAWC,KAAX,CAAiB,CAAjB,CAAd,EAFM,CAE8B;AACrC;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAAE;;AAEpBL,QAAAA,aAAa,CAACM,WAAD,EAAoBC,QAApB,EAAuC;AAC1DD,UAAAA,WAAW,CAACE,MAAZ,GAAqBD,QAArB;AACD;;AAEaE,QAAAA,WAAW,GAAG,CAC1B;AACA;;AAF0B;AAG3B;;AAEDP,QAAAA,QAAQ,CAACC,KAAD,EAAa;AACnB,cAAMO,IAAI,GAAGP,KAAK,CAACO,IAAnB;AACA,cAAMC,IAAI,GAAGR,KAAK,CAACQ,IAAnB;AACA,cAAMC,QAAQ,GAAGT,KAAK,CAACU,IAAvB;AACA,cAAMC,QAAQ,GAAG,EAAjB,CAJmB,CAIE;;AAErB,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,IAAxB,EAA8BK,GAAG,EAAjC,EAAqC;AACnC,iBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,IAAxB,EAA8BK,GAAG,EAAjC,EAAqC;AACnC,kBAAMC,QAAQ,GAAGL,QAAQ,CAACG,GAAD,CAAR,CAAcC,GAAd,CAAjB;AACA,kBAAME,UAAU,GAAG,KAAKC,WAAL,CAAiBF,QAAjB,CAAnB;;AACA,kBAAIC,UAAJ,EAAgB;AACd,oBAAME,WAAW,GAAG3B,WAAW,CAACyB,UAAD,CAA/B;AACA,oBAAMG,QAAQ,GAAG,KAAKC,eAAL,CAAqBP,GAArB,EAA0BC,GAA1B,EAA+BF,QAA/B,CAAjB;AACAM,gBAAAA,WAAW,CAACG,WAAZ,CAAwBF,QAAxB;AACA,qBAAKG,IAAL,CAAUC,QAAV,CAAmBL,WAAnB;AACD;AACF;AACF;AACF,SA3C0C,CA6C3C;;;AACQE,QAAAA,eAAe,CAACP,GAAD,EAAcC,GAAd,EAA2BF,QAA3B,EAAmD;AACxE,cAAMY,CAAC,GAAGV,GAAG,GAAGF,QAAN,GAAiBA,QAAQ,GAAG,CAAtC;AACA,cAAMa,CAAC,GAAGZ,GAAG,GAAGD,QAAN,GAAiBA,QAAQ,GAAG,CAAtC;AACA,iBAAO,IAAIpB,IAAJ,CAASgC,CAAT,EAAYC,CAAZ,EAAe,CAAf,CAAP;AACD;;AAlD0C,O;;;;;iBACR,I;;;;;;;iBAGX,I;;;;;;;iBAGF,E","sourcesContent":["import { _decorator, Component, Node, instantiate, Vec3 } from \"cc\";\nimport { EasyLevels } from \"../Levels/EasyLevels\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridGenerator\")\nexport class GridGenerator extends Component {\n  @property(Node) dummyCandy: Node = null!;\n\n  @property(EasyLevels)\n  levelData: EasyLevels = null!;\n\n  @property([Node])\n  tilePrefabs: Node[] = []; // 0 ve 1 için prefabları buraya ekle\n\n  start() {\n    this.setNodeActive(this.dummyCandy, true);\n    this.generate(EasyLevels.level[1]); // Örnek olarak 1. seviyeyi yüklüyoruz\n  }\n\n  update(deltaTime: number) {}\n\n  private setNodeActive(settingNode: Node, isActive: boolean) {\n    settingNode.active = isActive;\n  }\n\n  private async testEffects() {\n    // EffectManager.decreaseScale(this.dummyCandy,0.2,true);\n    // EffectManager.downCellPosition(this.dummyCandy,0.3);\n  }\n\n  generate(level: any) {\n    const rows = level.rows;\n    const cols = level.cols;\n    const gridData = level.grid;\n    const tileSize = 64; // Örnek tile boyutu, kendi tile boyutunuza göre ayarlayın\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const tileType = gridData[row][col];\n        const tilePrefab = this.tilePrefabs[tileType];\n        if (tilePrefab) {\n          const newTileNode = instantiate(tilePrefab);\n          const position = this.getTilePosition(row, col, tileSize);\n          newTileNode.setPosition(position);\n          this.node.addChild(newTileNode);\n        }\n      }\n    }\n  }\n\n  // Griddeki her bir tile'ın pozisyonunu hesaplar\n  private getTilePosition(row: number, col: number, tileSize: number): Vec3 {\n    const x = col * tileSize + tileSize / 2;\n    const y = row * tileSize + tileSize / 2;\n    return new Vec3(x, y, 0);\n  }\n}\n"]}