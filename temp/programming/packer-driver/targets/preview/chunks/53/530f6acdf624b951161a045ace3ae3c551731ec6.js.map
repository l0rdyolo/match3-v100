{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","Color","EffectManager","ccclass","property","Direction","MatchChecker","SwapPiecePositions","pieceA","pieceB","posA","posB","gridMap","movePiece","highlightNeighbors","posAData","get","posBData","set","piece","dx","dy","directions","currentPiece","neighborPiecePosition","row","col","console","log","getPieceAtPosition","position","Array","from","entries","find","_","pos"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,K,OAAAA,K;;AACZC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;iBAEzBK,S;AAAAA,QAAAA,S,CAAAA,S;AAAAA,QAAAA,S,CAAAA,S;SAAAA,S,KAAAA,S;;8BAMQC,Y,WADZH,OAAO,CAAC,cAAD,C,UASLC,QAAQ,CAACH,KAAD,C,sCATX,MACaK,YADb,CAC0B;AAAA;AAAA;AAAA;;AAWc,eAAlBC,kBAAkB,CACpCC,MADoC,EAEpCC,MAFoC,EAGpCC,IAHoC,EAIpCC,IAJoC,EAKpCC,OALoC,EAMpC;AAAA;;AAAA;AACA;AAAA;AAAA,gDAAcC,SAAd,CAAwBL,MAAxB,EAAgCG,IAAhC,EAAsC,GAAtC;AACA,kBAAM;AAAA;AAAA,gDAAcE,SAAd,CAAwBJ,MAAxB,EAAgCC,IAAhC,EAAsC,GAAtC,CAAN,CAFA,CAGA;;AACA,YAAA,KAAI,CAACI,kBAAL,CAAwBN,MAAxB,EAAiCI,OAAjC;;AACA,gBAAMG,QAAQ,GAAGH,OAAO,CAACI,GAAR,CAAYR,MAAZ,CAAjB;AACA,gBAAMS,QAAQ,GAAGL,OAAO,CAACI,GAAR,CAAYP,MAAZ,CAAjB;AACAG,YAAAA,OAAO,CAACM,GAAR,CAAYV,MAAZ,EAAoBS,QAApB;AACAL,YAAAA,OAAO,CAACM,GAAR,CAAYT,MAAZ,EAAoBM,QAApB;AARA;AASD;;AAGgC,eAAlBD,kBAAkB,CAC/BK,KAD+B,EAE/BP,OAF+B,EAGzB;AACN,eAAK,IAAM;AAAEQ,YAAAA,EAAF;AAAMC,YAAAA;AAAN,WAAX,IAAyB,KAAKC,UAA9B,EAA0C;AACxC,gBAAMC,YAAY,GAAGX,OAAO,CAACI,GAAR,CAAYG,KAAZ,CAArB;AACA,gBAAMK,qBAAqB,GAAG;AAC5BC,cAAAA,GAAG,EAAEF,YAAY,CAACE,GAAb,GAAmBL,EADI;AAE5BM,cAAAA,GAAG,EAAEH,YAAY,CAACG,GAAb,GAAmBL;AAFI,aAA9B,CAFwC,CAMxC;;AACAM,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,kBAAL,CAAwBL,qBAAxB,EAA+CZ,OAA/C,CAAZ;AACD;AACF;;AACgC,eAAlBiB,kBAAkB,CAC/BC,QAD+B,EAE/BlB,OAF+B,EAGb;AAAA;;AAClB,qCAAOmB,KAAK,CAACC,IAAN,CAAWpB,OAAO,CAACqB,OAAR,EAAX,EAA8BC,IAA9B,CACL;AAAA,gBAAC,CAACC,CAAD,EAAIC,GAAJ,CAAD;AAAA,mBAAcA,GAAG,CAACX,GAAJ,KAAYK,QAAQ,CAACL,GAArB,IAA4BW,GAAG,CAACV,GAAJ,KAAYI,QAAQ,CAACJ,GAA/D;AAAA,WADK,CAAP,qBAAO,iBAEH,CAFG,CAAP;AAID;;AAnDuB,O,UACTJ,U,GAAa,CAC1B;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE;AAAb,OAD0B,EACR;AAClB;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE,CAAC;AAAd,OAF0B,EAEP;AACnB;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE;AAAb,OAH0B,EAGR;AAClB;AAAED,QAAAA,EAAE,EAAE,CAAC,CAAP;AAAUC,QAAAA,EAAE,EAAE;AAAd,OAJ0B,CAIP;AAJO,O;;;;;iBAOU,I","sourcesContent":["import { _decorator, Color, director, Node, Vec3 } from \"cc\";\nimport { EffectManager } from \"../Effects/EffectManager\";\nconst { ccclass ,property } = _decorator;\n\nenum Direction {\n  Horizontal,\n  Vertical,\n}\n\n@ccclass(\"MatchChecker\")\nexport class MatchChecker {\n  private static directions = [\n    { dx: 0, dy: 1 }, // Right\n    { dx: 0, dy: -1 }, // Left\n    { dx: 1, dy: 0 }, // Down\n    { dx: -1, dy: 0 }, // Up\n  ];\n\n  @property(Color) dummyColor : Color = null!;\n\n\n  public static async SwapPiecePositions(\n    pieceA: Node,\n    pieceB: Node,\n    posA: Vec3,\n    posB: Vec3,\n    gridMap: Map<Node, { row: number; col: number }>\n  ) {\n    EffectManager.movePiece(pieceA, posB, 0.1);\n    await EffectManager.movePiece(pieceB, posA, 0.1);\n    // Update the gridMap\n    this.highlightNeighbors(pieceA , gridMap)\n    const posAData = gridMap.get(pieceA);\n    const posBData = gridMap.get(pieceB);\n    gridMap.set(pieceA, posBData);\n    gridMap.set(pieceB, posAData);\n  }\n\n\n  private static highlightNeighbors(\n    piece: Node,\n    gridMap: Map<Node, { row: number; col: number }>\n  ): void {\n    for (const { dx, dy } of this.directions) {\n      const currentPiece = gridMap.get(piece);\n      const neighborPiecePosition = {\n        row: currentPiece.row + dx,\n        col: currentPiece.col + dy,\n      };\n      //bla bla\n      console.log(this.getPieceAtPosition(neighborPiecePosition, gridMap));\n    }\n  }\n  private static getPieceAtPosition(\n    position: { row: number; col: number },\n    gridMap: Map<Node, { row: number; col: number }>\n  ): Node | undefined {\n    return Array.from(gridMap.entries()).find(\n      ([_, pos]) => pos.row === position.row && pos.col === position.col\n    )?.[0];\n\n  }\n}\n"]}