{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","GridManager","ccclass","property","GravityHandler","applyGravity","matches","columnPieceCount","Map","piece","col","has","set","get","applyGravityToCol","count","console","log","i"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AAEZC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;gCAGjBK,c,WADZF,OAAO,CAAC,gBAAD,C,UAGHC,QAAQ;AAAA;AAAA,qC,2BAHb,MACaC,cADb,SACoCJ,SADpC,CAC8C;AAAA;AAAA;;AAAA;AAAA;;AAK1CK,QAAAA,YAAY,CAACC,OAAD,EAAmB;AAC3B,cAAMC,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB;;AAEA,eAAK,IAAMC,KAAX,IAAoBH,OAApB,EAA6B;AACzB,gBAAMI,GAAG,GAAGD,KAAK,CAACC,GAAlB;;AACA,gBAAIH,gBAAgB,CAACI,GAAjB,CAAqBD,GAArB,CAAJ,EAA+B;AAC3BH,cAAAA,gBAAgB,CAACK,GAAjB,CAAqBF,GAArB,EAA0BH,gBAAgB,CAACM,GAAjB,CAAqBH,GAArB,IAA4B,CAAtD;AACH,aAFD,MAEO;AACHH,cAAAA,gBAAgB,CAACK,GAAjB,CAAqBF,GAArB,EAA0B,CAA1B;AACH;AACJ;;AAED,eAAKI,iBAAL,CAAuBP,gBAAvB;AACH;;AAEDO,QAAAA,iBAAiB,CAACP,gBAAD,EAAwC;AACrD,eAAK,IAAM,CAACG,GAAD,EAAMK,KAAN,CAAX,IAA2BR,gBAA3B,EAA6C;AACzCS,YAAAA,OAAO,CAACC,GAAR,CAAeP,GAAf,qBAA+BK,KAA/B;;AAGA,iBAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACH,KAAlB,EAAyBG,CAAC,EAA1B,EAA8B,CAC1B;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACH;AACJ;AACJ;;AA5CyC,O;;;;;iBAGP,I","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nimport { Piece } from '../Piece/Piece';\nimport { GridManager } from '../Grid/GridManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GravityHandler')\nexport class GravityHandler extends Component {\n\n    @property(GridManager)\n    private gridManager: GridManager = null;\n\n    applyGravity(matches: Piece[]) {\n        const columnPieceCount = new Map<number, number>();\n\n        for (const piece of matches) {\n            const col = piece.col;\n            if (columnPieceCount.has(col)) {\n                columnPieceCount.set(col, columnPieceCount.get(col) + 1);\n            } else {\n                columnPieceCount.set(col, 1);\n            }\n        }\n\n        this.applyGravityToCol(columnPieceCount);\n    }\n\n    applyGravityToCol(columnPieceCount: Map<number, number>) {\n        for (const [col, count] of columnPieceCount) {\n            console.log(`${col} sütununu ${count} birim aşağı indirin.`);\n\n            \n            for (let i = 0; i<count; i++) {\n                //count sayısı kadar row sabit kalacak şekilde aşağıya gönderilmeli\n                // const piece = this.gridManager.grid[][i];\n\n                // if (piece === null) continue; // Eğer hücre boşsa, geç\n\n                // const newRow = row + count;\n\n                // if (newRow < this.gridManager.gridHeight) {\n                //     // Parçayı yeni pozisyona taşı\n                //     this.gridManager.grid[newRow][col] = piece;\n                //     piece.row = newRow;\n                //     piece.updatePosition();\n\n                //     // Eski pozisyonu boşalt\n                //     this.gridManager.grid[row][col] = null;\n                // }\n            }\n        }\n    }\n}\n"]}