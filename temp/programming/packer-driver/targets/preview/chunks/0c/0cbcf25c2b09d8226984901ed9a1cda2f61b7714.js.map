{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Color","Vec3","SingletonComponent","GridGenerator","GameGlobal","SliderManager","MatchChecker","GravityHandler","PiecePool","ccclass","property","GridManager","_grid","gridGenerator","selectionManager","sliderManager","matchChecker","gravityHandler","gridWidth","gridHeight","gridOffset","colors","red","black","blue","yellow","grid","onLoad","init","start","node","getComponent","Generate","length","offsetDiff","PIECE_OFFSET","piecePositionsDiff","gridX","setPosition","SwapPieces","pieceA","pieceB","Slide","pa_row","row","pa_col","col","pb_row","pb_col","tempA","tempB","deleteMatches","matches","fillPromises","matchedPiece","delete","push","Promise","resolve","all","handleSelection","selections","applySelection","console","log","checkForMatches","applyGravity","fillEmptySpaces","piece","newPieceNode","getInstance","getPiece","setParent","addChild","canSelect","ResetScale","updatePosition"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Color,\n  Component,\n  Node,\n  Sprite,\n  SpriteFrame,\n  SpriteRenderer,\n  Vec2,\n  Vec3,\n} from \"cc\";\nimport { SingletonComponent } from \"../SingletonComponent\";\nimport { Piece } from \"../Piece/Piece\";\nimport { GridGenerator } from \"./GridGenerator\";\nimport { GameGlobal } from \"../Game/GameGlobal\";\nimport { SliderManager } from \"../Interaction/SliderManager\";\nimport { MatchChecker } from \"../Match/MatchChecker\";\nimport { GravityHandler } from \"./GravityHandler\";\nimport { PiecePool } from \"../Piece/PiecePool\";\nimport { SelectionManager } from \"../Interaction/SelectionManager\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridManager\")\nexport class GridManager extends SingletonComponent<GridManager> {\n  private _grid: Piece[][];\n\n  private gridGenerator: GridGenerator = null;\n  private selectionManager: SelectionManager = null;\n  private sliderManager: SliderManager = null;\n  private matchChecker: MatchChecker = null;\n  private gravityHandler: GravityHandler = null;\n\n  private gridWidth: number = 0;\n  public gridHeight: number = 0;\n  private gridOffset: number = 0;\n\n  private colors = {\n    red: new Color(255, 0, 0),\n    black: new Color(0, 0, 0),\n    blue: new Color(0, 0, 255),\n    yellow: new Color(255, 255, 0),\n  };\n\n  get grid() {\n    return this._grid;\n  }\n\n  protected onLoad(): void {\n    super.onLoad();\n    this.init();\n  }\n\n  protected init(): void {\n    this.sliderManager = new SliderManager();\n    this.matchChecker = new MatchChecker();\n    this.gravityHandler = new GravityHandler();\n  }\n\n  start() {\n    this.gridGenerator = this.node.getComponent(GridGenerator);\n    this._grid = this.gridGenerator.Generate();\n    this.gridWidth = this._grid[0].length;\n    this.gridHeight = this._grid.length;\n\n    const offsetDiff = (GameGlobal.PIECE_OFFSET / 2) * this.gridWidth;\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\n\n    const gridX = piecePositionsDiff + offsetDiff;\n    this.node.setPosition(new Vec3(gridX, -200, 0));\n  }\n\n  async SwapPieces(pieceA: Piece, pieceB: Piece) {\n    await this.sliderManager.Slide(pieceA, pieceB);\n    const pa_row = pieceA.row;\n    const pa_col = pieceA.col;\n\n    const pb_row = pieceB.row;\n    const pb_col = pieceB.col;\n\n    pieceA.row = pb_row;\n    pieceA.col = pb_col;\n\n    pieceB.row = pa_row;\n    pieceB.col = pa_col;\n\n    const tempA = this.grid[pa_row][pa_col];\n    const tempB = this.grid[pb_row][pb_col];\n\n    this.grid[pa_row][pa_col] = tempB;\n    this.grid[pb_row][pb_col] = tempA;\n  }\n\n  async deleteMatches(matches: Piece[]) {\n    const fillPromises: Promise<void>[] = [];\n\n    for (const matchedPiece of matches) {\n      matchedPiece.delete();\n      fillPromises.push(\n        new Promise<void>((resolve) => {\n          resolve();\n        })\n      );\n    }\n    await Promise.all(fillPromises);\n  }\n  async handleSelection() {\n    //! IDEA - 1: swap piece grid dönebilir.\n    //! IDEA - 2: selectionManager>applySelection() buraya taşınmalı\n    const selections = this.selectionManager.applySelection();\n    if (selections.length <= 0) return;\n    const [pieceA, pieceB] = selections;\n    console.log(selections);\n    \n    await this.SwapPieces(pieceA, pieceB);\n    let matches: Piece[] = await this.matchChecker.checkForMatches(\n      pieceA,\n      pieceB\n    );\n    if (matches.length > 0) {\n      await this.deleteMatches(matches);\n      await this.gravityHandler.applyGravity(this._grid);\n      // await this.fillEmptySpaces();\n    } else {\n      await this.SwapPieces(pieceA, pieceB);\n    }\n  }\n\n  private async fillEmptySpaces() {\n    const grid = this.grid;\n    const fillPromises: Promise<void>[] = [];\n\n    for (let row = 0; row < this.gridHeight; row++) {\n      for (let col = 0; col < this.gridWidth; col++) {\n        const piece = grid[row][col];\n\n        if (piece.node === null) {\n          const newPieceNode = PiecePool.getInstance().getPiece();\n          newPieceNode.setParent(this.node);\n          this.node.addChild(newPieceNode);\n\n          piece.node = newPieceNode;\n          piece.canSelect = true;\n          piece.ResetScale();\n          piece.updatePosition(row, col);\n\n          fillPromises.push(\n            new Promise<void>((resolve) => {\n              resolve();\n            })\n          );\n        }\n      }\n    }\n\n    await Promise.all(fillPromises);\n    console.log(\"empty cells filled\");\n  }\n}\n"]}