{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Optimization/Lazy.ts"],"names":["Lazy","constructor","factory","errorHandler","maxRetries","instance","isInitialized","retryCount","initializeHooks","errorHooks","disposeHooks","getValue","args","tryInitialize","triggerHooks","error","shouldRetry","hooks","forEach","hook","onInitialize","push","onError","onDispose","dispose"],"mappings":"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","sourcesContent":["/**\r\n * Defines a factory function that asynchronously creates an instance of type `T`\r\n * using the provided arguments `Args`.\r\n * \r\n * @typeParam T - The type of object that the factory function produces.\r\n * @typeParam Args - A tuple type representing the arguments passed to the factory function.\r\n * @param args - An array of arguments of type `Args` used for creating an instance of `T`.\r\n * @returns A promise that resolves to an instance of type `T`.\r\n */\r\ntype FactoryFunction<T, Args extends any[]> = (...args: Args) => Promise<T>;\r\n\r\n/**\r\n * Defines an error handling function that decides whether an operation should retry\r\n * after encountering an error based on the error itself and the current retry count.\r\n * \r\n * @param error - The error encountered during the operation.\r\n * @param retryCount - The current count of retry attempts.\r\n * @returns A promise that resolves to a boolean indicating whether to retry the operation.\r\n */\r\ntype ErrorHandler = (error: any, retryCount: number) => Promise<boolean>;\r\n\r\n/**\r\n * Represents a lazy initialization and caching mechanism for objects of type `T`.\r\n * The object is initialized asynchronously using a factory function upon the first\r\n * request. It supports retry logic, lifecycle hooks, and error handling.\r\n * \r\n * @typeParam T - The type of the lazily initialized object.\r\n * @typeParam Args - A tuple type representing the arguments passed to the factory \r\n * function for initializing the object.\r\n */\r\nexport class Lazy<T, Args extends any[] = any[]> {\r\n    private instance: T | null = null;\r\n    private factory: FactoryFunction<T, Args>;\r\n    private errorHandler: ErrorHandler;\r\n    private isInitialized: boolean = false;\r\n    private retryCount: number = 0;\r\n    private maxRetries: number;\r\n    private initializeHooks: Array<() => void> = [];\r\n    private errorHooks: Array<(error: any) => void> = [];\r\n    private disposeHooks: Array<() => void> = [];\r\n\r\n    /**\r\n     * Constructs a Lazy object with specified factory, error handler, and maximum retry attempts.\r\n     * \r\n     * @param factory - A factory function used to asynchronously create an instance of `T`.\r\n     * @param errorHandler - A function called when the factory function throws an error, determining whether to retry.\r\n     * @param maxRetries - The maximum number of retries for initializing `T` upon failure. Defaults to 3.\r\n     */\r\n    constructor(factory: FactoryFunction<T, Args>, errorHandler: ErrorHandler, maxRetries: number = 3) {\r\n        this.factory = factory;\r\n        this.errorHandler = errorHandler;\r\n        this.maxRetries = maxRetries;\r\n    }\r\n\r\n    /**\r\n     * Asynchronously returns the instance of type `T`, initializing it if not already done.\r\n     * \r\n     * @param args - Arguments to pass to the factory function for creating the instance.\r\n     * @returns A promise that resolves to the instance of type `T`.\r\n     * @throws Throws an error if the object cannot be initialized after the maximum number of retries.\r\n     */\r\n    public async getValue(...args: Args): Promise<T> {\r\n        if (!this.isInitialized) {\r\n            await this.tryInitialize(args);\r\n        }\r\n        return this.instance!;\r\n    }\r\n\r\n    /**\r\n     * Attempts to initialize the instance using the provided arguments, with retry logic.\r\n     * \r\n     * @param args - Arguments to pass to the factory function for creating the instance.\r\n     */\r\n    private async tryInitialize(args: Args): Promise<void> {\r\n        try {\r\n            this.instance = await this.factory(...args);\r\n            this.isInitialized = true;\r\n            this.triggerHooks(this.initializeHooks);\r\n        } catch (error) {\r\n            this.triggerHooks(this.errorHooks, error);\r\n            const shouldRetry = await this.errorHandler(error, this.retryCount);\r\n            if (shouldRetry && this.retryCount < this.maxRetries) {\r\n                this.retryCount++;\r\n                await this.tryInitialize(args);\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invokes the provided lifecycle hooks with the specified arguments.\r\n     * \r\n     * @param hooks - An array of hooks to be triggered.\r\n     * @param args - Arguments to pass to each hook function.\r\n     */\r\n    private triggerHooks(hooks: Array<Function>, ...args: any[]): void {\r\n        hooks.forEach(hook => hook(...args));\r\n    }\r\n\r\n    /**\r\n     * Registers a hook to be called upon successful initialization of the instance.\r\n     * \r\n     * @param hook - The hook function to register.\r\n     */\r\n    public onInitialize(hook: () => void): void {\r\n        this.initializeHooks.push(hook);\r\n    }\r\n\r\n    /**\r\n     * Registers a hook to be called when an error occurs during initialization.\r\n     * \r\n     * @param hook - The hook function to register, receiving the error as an argument.\r\n     */\r\n    public onError(hook: (error: any) => void): void {\r\n        this.errorHooks.push(hook);\r\n    }\r\n\r\n    /**\r\n     * Registers a hook to be called when the instance is disposed.\r\n     * \r\n     * @param hook - The hook function to register.\r\n     */\r\n    public onDispose(hook: () => void): void {\r\n        this.disposeHooks.push(hook);\r\n    }\r\n\r\n    /**\r\n     * Disposes the current instance, if any, and triggers disposal hooks.\r\n     * Resets the instance state to allow re-initialization.\r\n     */\r\n    public dispose(): void {\r\n        if (this.instance && typeof (this.instance as any).dispose === 'function') {\r\n            (this.instance as any).dispose();\r\n        }\r\n        this.instance = null;\r\n        this.isInitialized = false;\r\n        this.triggerHooks(this.disposeHooks);\r\n    }\r\n}\r\n"]}