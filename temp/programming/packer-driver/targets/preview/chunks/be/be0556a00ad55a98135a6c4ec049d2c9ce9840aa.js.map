{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Vec3","SingletonComponent","GridGenerator","ccclass","property","GridManager","grid","gridGenerator","gridWidth","gridOffset","onLoad","start","node","getComponent","Generate","width","PIECE_OFFSET","offsetDiff","piecePositionsDiff","console","log","gridX","setPosition"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAmCC,MAAAA,I,OAAAA,I;;AACnCC,MAAAA,kB,iBAAAA,kB;;AAEAC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;6BAGjBM,W,WADZF,OAAO,CAAC,aAAD,C,gBAAR,MACaE,WADb;AAAA;AAAA,oDACiE;AAAA;AAAA;AAAA,eACtDC,IADsD;AAAA,eAGrDC,aAHqD,GAGrB,IAHqB;AAAA,eAKrDC,SALqD,GAKhC,CALgC;AAAA,eAMrDC,UANqD,GAM/B,CAN+B;AAAA;;AASnDC,QAAAA,MAAM,GAAS;AACrB,gBAAMA,MAAN;AACD;;AAEHC,QAAAA,KAAK,GAAG;AACJ,eAAKJ,aAAL,GAAqB,KAAKK,IAAL,CAAUC,YAAV;AAAA;AAAA,6CAArB;AACA,eAAKP,IAAL,GAAY,KAAKC,aAAL,CAAmBO,QAAnB,EAAZ;AACA,eAAKN,SAAL,GAAiB,KAAKD,aAAL,CAAmBQ,KAApC;AACA,eAAKN,UAAL,GAAkB,KAAKF,aAAL,CAAmBS,YAArC,CAJI,CAKJ;;AACA,cAAMC,UAAU,GAAG,EAAE,KAAKR,UAAL,GAAkB,CAApB,IAAyB,KAAKD,SAAjD;AACA,cAAMU,kBAAkB,GAAG,EAAE,KAAKV,SAAL,GAAe,CAAjB,IAAsB,GAAjD;AACAW,UAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ,EAAyBC,kBAAzB;AAEA,cAAMG,KAAK,GAAGH,kBAAkB,GAAGD,UAAnC;AACA,eAAKL,IAAL,CAAUU,WAAV,CAAsB,IAAItB,IAAJ,CAASqB,KAAT,EAAe,CAAC,GAAhB,EAAoB,CAApB,CAAtB;AACH;;AAzB4D,O","sourcesContent":["import { _decorator, Component, Node, Vec2, Vec3 } from 'cc';\nimport { SingletonComponent } from '../SingletonComponent';\nimport { Piece } from '../Piece/Piece';\nimport { GridGenerator } from './GridGenerator';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GridManager')\nexport class GridManager extends SingletonComponent<GridManager> {\n    public grid : Piece[][];\n\n    private gridGenerator : GridGenerator = null;\n\n    private gridWidth : number = 0;\n    private gridOffset : number = 0;\n\n\n    protected onLoad(): void {\n        super.onLoad();\n      }\n\n    start() {\n        this.gridGenerator = this.node.getComponent(GridGenerator)\n        this.grid = this.gridGenerator.Generate();\n        this.gridWidth = this.gridGenerator.width;\n        this.gridOffset = this.gridGenerator.PIECE_OFFSET;\n        //! dinamik olmalÄ±\n        const offsetDiff = -(this.gridOffset / 2 )* this.gridWidth;\n        const piecePositionsDiff = -(this.gridWidth/2) * 100\n        console.log(offsetDiff , piecePositionsDiff);\n        \n        const gridX = piecePositionsDiff + offsetDiff \n        this.node.setPosition(new Vec3(gridX,-200,0))\n    }\n\n\n}\n\n"]}