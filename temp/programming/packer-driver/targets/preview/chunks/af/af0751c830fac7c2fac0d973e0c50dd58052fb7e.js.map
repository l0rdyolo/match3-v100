{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Match/MatchChecker.ts"],"names":["MatchChecker","HorizontalMatchStrategy","VerticalMatchStrategy","constructor","matchStrategies","push","checkForMatches","pieceA","pieceB","matchedPieces","strategy","matches","checkMatch","length","concat","Promise","all","map","piece","matched","console","log"],"mappings":";;;8EAKaA,Y;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJJC,MAAAA,uB,iBAAAA,uB;;AAEAC,MAAAA,qB,iBAAAA,qB;;;;;;;8BAEIF,Y,GAAN,MAAMA,YAAN,CAAmB;AAGtBG,QAAAA,WAAW,GAAG;AAAA,eAFNC,eAEM,GAF6B,EAE7B;AACV,eAAKA,eAAL,CAAqBC,IAArB,CAA0B;AAAA;AAAA,mEAA1B;AACA,eAAKD,eAAL,CAAqBC,IAArB,CAA0B;AAAA;AAAA,+DAA1B;AAEH;;AAEYC,QAAAA,eAAe,CAACC,MAAD,EAAgBC,MAAhB,EAAiD;AAAA;;AAAA;AAEzE,gBAAIC,aAAsB,GAAG,EAA7B;;AAEA,iBAAK,IAAMC,QAAX,IAAuB,KAAI,CAACN,eAA5B,EAA6C;AACzC,kBAAMO,OAAO,GAAGD,QAAQ,CAACE,UAAT,CAAoBL,MAApB,EAA4BC,MAA5B,CAAhB;;AACA,kBAAIG,OAAO,CAACE,MAAR,IAAkB,CAAtB,EAAyB;AACrBJ,gBAAAA,aAAa,GAAGA,aAAa,CAACK,MAAd,CAAqBH,OAArB,CAAhB;AACH;AACJ;;AAED,gBAAIF,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,oBAAME,OAAO,CAACC,GAAR,CAAYP,aAAa,CAACQ,GAAd,CAAkBC,KAAK,IAAIA,KAAK,CAACC,OAAN,EAA3B,CAAZ,CAAN;AACH;;AAEDC,YAAAA,OAAO,CAACC,GAAR,CAAYZ,aAAZ;AAGA,mBAAOA,aAAP;AAlByE;AAmB5E;;AA5BqB,O","sourcesContent":["import { Piece } from \"../Piece/Piece\";\nimport { HorizontalMatchStrategy } from \"./MatchStrategies/HorizontalMatchStrategy\";\nimport { MatchStrategy } from \"./MatchStrategies/IMatchStrategy\";\nimport { VerticalMatchStrategy } from \"./MatchStrategies/VerticalMatchStrategy\";\n\nexport class MatchChecker {\n    private matchStrategies: MatchStrategy[] = [];\n\n    constructor() {\n        this.matchStrategies.push(new HorizontalMatchStrategy());\n        this.matchStrategies.push(new VerticalMatchStrategy());\n        \n    }\n\n    public async checkForMatches(pieceA: Piece, pieceB: Piece): Promise<Piece[]> {\n        \n        let matchedPieces: Piece[] = [];\n\n        for (const strategy of this.matchStrategies) {\n            const matches = strategy.checkMatch(pieceA, pieceB);\n            if (matches.length >= 3) {\n                matchedPieces = matchedPieces.concat(matches);\n            }\n        }\n\n        if (matchedPieces.length > 0) {\n            await Promise.all(matchedPieces.map(piece => piece.matched()));\n        }\n\n        console.log(matchedPieces);\n        \n\n        return matchedPieces;\n    }\n}"]}