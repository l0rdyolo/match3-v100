{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","EffectManager","ccclass","Direction","MatchChecker","SwapPiecePositions","pieceA","pieceB","posA","posB","gridMap","movePiece","posAData","get","posBData","set","CheckSwappedPieces","piece","row","col","dx","dy","directions","matchCount","countMatches","name","console","log","pieceName","i","j","isWithinBounds","isSamePiece","Array","from","values","some","pos","entries","find","_"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;AACAC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA;AAAF,O,GAAcF,U;;iBAEfG,S;AAAAA,QAAAA,S,CAAAA,S;AAAAA,QAAAA,S,CAAAA,S;SAAAA,S,KAAAA,S;;8BAMQC,Y,WADZF,OAAO,CAAC,cAAD,C,2BAAR,MACaE,YADb,CAC0B;AASc,eAAlBC,kBAAkB,CACpCC,MADoC,EAEpCC,MAFoC,EAGpCC,IAHoC,EAIpCC,IAJoC,EAKpCC,OALoC,EAMpC;AAAA;;AAAA;AACA;AAAA;AAAA,gDAAcC,SAAd,CAAwBL,MAAxB,EAAgCG,IAAhC,EAAsC,GAAtC;AACA;AAAA;AAAA,gDAAcE,SAAd,CAAwBJ,MAAxB,EAAgCC,IAAhC,EAAsC,GAAtC,EAFA,CAIA;;AACA,gBAAMI,QAAQ,GAAGF,OAAO,CAACG,GAAR,CAAYP,MAAZ,CAAjB;AACA,gBAAMQ,QAAQ,GAAGJ,OAAO,CAACG,GAAR,CAAYN,MAAZ,CAAjB;AACAG,YAAAA,OAAO,CAACK,GAAR,CAAYT,MAAZ,EAAoBQ,QAApB;AACAJ,YAAAA,OAAO,CAACK,GAAR,CAAYR,MAAZ,EAAoBK,QAApB;;AAEA,YAAA,KAAI,CAACI,kBAAL,CAAwBV,MAAxB,EAAgCI,OAAhC;;AACA,YAAA,KAAI,CAACM,kBAAL,CAAwBT,MAAxB,EAAgCG,OAAhC;AAXA;AAYD;;AAE+B,eAAlBM,kBAAkB,CAACC,KAAD,EAAcP,OAAd,EAAgE;AAC9F,cAAM;AAAEQ,YAAAA,GAAF;AAAOC,YAAAA;AAAP,cAAeT,OAAO,CAACG,GAAR,CAAYI,KAAZ,CAArB,CAD8F,CAG9F;;AACA,eAAK,IAAM;AAAEG,YAAAA,EAAF;AAAMC,YAAAA;AAAN,WAAX,IAAyB,KAAKC,UAA9B,EAA0C;AACxC,gBAAMC,UAAU,GAAG,IAAI,KAAKC,YAAL,CAAkBd,OAAlB,EAA2BO,KAAK,CAACQ,IAAjC,EAAuCP,GAAvC,EAA4CC,GAA5C,EAAiDC,EAAjD,EAAqDC,EAArD,CAAvB;;AACA,gBAAIE,UAAU,IAAI,CAAlB,EAAqB;AACnBG,cAAAA,OAAO,CAACC,GAAR,8BAAuCT,GAAvC,UAA+CC,GAA/C,sBAAmEC,EAAnE,UAA0EC,EAA1E,EADmB,CAEnB;AACD;AACF;AACF;;AAE0B,eAAZG,YAAY,CACzBd,OADyB,EAEzBkB,SAFyB,EAGzBV,GAHyB,EAIzBC,GAJyB,EAKzBC,EALyB,EAMzBC,EANyB,EAOjB;AACR,cAAIE,UAAU,GAAG,CAAjB;AAEA,cAAI,CAACM,CAAD,EAAIC,CAAJ,IAAS,CAACZ,GAAG,GAAGE,EAAP,EAAWD,GAAG,GAAGE,EAAjB,CAAb;;AAEA,iBAAO,KAAKU,cAAL,CAAoBF,CAApB,EAAuBC,CAAvB,EAA0BpB,OAA1B,KAAsC,KAAKsB,WAAL,CAAiBtB,OAAjB,EAA0BkB,SAA1B,EAAqCC,CAArC,EAAwCC,CAAxC,CAA7C,EAAyF;AACvFP,YAAAA,UAAU;AACVM,YAAAA,CAAC,IAAIT,EAAL;AACAU,YAAAA,CAAC,IAAIT,EAAL;AACD;;AAED,iBAAOE,UAAP;AACD;;AAE4B,eAAdQ,cAAc,CAACb,GAAD,EAAcC,GAAd,EAA2BT,OAA3B,EAAsF;AACjH,iBAAOQ,GAAG,IAAI,CAAP,IAAYC,GAAG,IAAI,CAAnB,IAAwBc,KAAK,CAACC,IAAN,CAAWxB,OAAO,CAACyB,MAAR,EAAX,EAA6BC,IAA7B,CAAkCC,GAAG,IAAIA,GAAG,CAACnB,GAAJ,KAAYA,GAAZ,IAAmBmB,GAAG,CAAClB,GAAJ,KAAYA,GAAxE,CAA/B;AACD;;AAEyB,eAAXa,WAAW,CAACtB,OAAD,EAAmDkB,SAAnD,EAAsEV,GAAtE,EAAmFC,GAAnF,EAAyG;AAAA;;AACjI,cAAMF,KAAK,uBAAGgB,KAAK,CAACC,IAAN,CAAWxB,OAAO,CAAC4B,OAAR,EAAX,EAA8BC,IAA9B,CAAmC;AAAA,gBAAC,CAACC,CAAD,EAAIH,GAAJ,CAAD;AAAA,mBAAcA,GAAG,CAACnB,GAAJ,KAAYA,GAAZ,IAAmBmB,GAAG,CAAClB,GAAJ,KAAYA,GAA7C;AAAA,WAAnC,CAAH,qBAAG,iBAAuF,CAAvF,CAAd;AACA,iBAAO,CAAAF,KAAK,QAAL,YAAAA,KAAK,CAAEQ,IAAP,MAAgBG,SAAvB;AACD;;AAtEuB,O,UAETN,U,GAAa,CAC1B;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE;AAAb,OAD0B,EACN;AACpB;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE,CAAC;AAAd,OAF0B,EAEN;AACpB;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE;AAAb,OAH0B,EAGN;AACpB;AAAED,QAAAA,EAAE,EAAE,CAAC,CAAP;AAAUC,QAAAA,EAAE,EAAE;AAAd,OAJ0B,CAIN;AAJM,O","sourcesContent":["import { _decorator, Node, Vec3 } from \"cc\";\nimport { EffectManager } from \"../Effects/EffectManager\";\nconst { ccclass } = _decorator;\n\nenum Direction {\n  Horizontal,\n  Vertical,\n}\n\n@ccclass(\"MatchChecker\")\nexport class MatchChecker {\n\n  private static directions = [\n    { dx: 0, dy: 1 },   // Right\n    { dx: 0, dy: -1 },  // Left\n    { dx: 1, dy: 0 },   // Down\n    { dx: -1, dy: 0 }   // Up\n  ];\n\n  public static async SwapPiecePositions(\n    pieceA: Node,\n    pieceB: Node,\n    posA: Vec3,\n    posB: Vec3,\n    gridMap: Map<Node, { row: number, col: number }>\n  ) {\n    EffectManager.movePiece(pieceA, posB, 0.1);\n    EffectManager.movePiece(pieceB, posA, 0.1);\n\n    // GridMap'i g√ºncelle\n    const posAData = gridMap.get(pieceA);\n    const posBData = gridMap.get(pieceB);\n    gridMap.set(pieceA, posBData);\n    gridMap.set(pieceB, posAData);\n\n    this.CheckSwappedPieces(pieceA, gridMap);\n    this.CheckSwappedPieces(pieceB, gridMap);\n  }\n\n  public static CheckSwappedPieces(piece: Node, gridMap: Map<Node, { row: number, col: number }>) {\n    const { row, col } = gridMap.get(piece);\n\n    // Surrounding pieces' match check\n    for (const { dx, dy } of this.directions) {\n      const matchCount = 1 + this.countMatches(gridMap, piece.name, row, col, dx, dy);\n      if (matchCount >= 3) {\n        console.log(`Match found starting at ${row}, ${col} in direction ${dx}, ${dy}`);\n        // Additional logic for match handling goes here\n      }\n    }\n  }\n\n  private static countMatches(\n    gridMap: Map<Node, { row: number, col: number }>,\n    pieceName: string,\n    row: number,\n    col: number,\n    dx: number,\n    dy: number\n  ): number {\n    let matchCount = 0;\n\n    let [i, j] = [row + dx, col + dy];\n\n    while (this.isWithinBounds(i, j, gridMap) && this.isSamePiece(gridMap, pieceName, i, j)) {\n      matchCount++;\n      i += dx;\n      j += dy;\n    }\n\n    return matchCount;\n  }\n\n  private static isWithinBounds(row: number, col: number, gridMap: Map<Node, { row: number, col: number }>): boolean {\n    return row >= 0 && col >= 0 && Array.from(gridMap.values()).some(pos => pos.row === row && pos.col === col);\n  }\n\n  private static isSamePiece(gridMap: Map<Node, { row: number, col: number }>, pieceName: string, row: number, col: number): boolean {\n    const piece = Array.from(gridMap.entries()).find(([_, pos]) => pos.row === row && pos.col === col)?.[0];\n    return piece?.name === pieceName;\n  }\n}\n"]}