{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","Vec2","ccclass","Direction","MatchChecker","checkMatch","grid","piece","row","col","moveDirection","isHorizontalMove","Math","abs","x","y","primaryDirection","Horizontal","Vertical","secondaryDirection","checkMatchInDirection","direction","pieceName","name","primaryStep","getStep","secondaryStep","matchCount","countMatches","step","i","j","isWithinBounds","isPrimary","length"],"mappings":"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","sourcesContent":["import { _decorator, Node, Vec2, Vec3 } from 'cc';\nconst { ccclass } = _decorator;\n\nenum Direction {\n    Horizontal,\n    Vertical,\n}\n\n@ccclass('MatchChecker')\nexport class MatchChecker {\n    public static checkMatch(grid: Node[][], piece: Node, row: number, col: number, moveDirection: Vec3): boolean {\n        const isHorizontalMove = Math.abs(moveDirection.x) > Math.abs(moveDirection.y);\n        const primaryDirection = isHorizontalMove ? Direction.Horizontal : Direction.Vertical;\n        const secondaryDirection = isHorizontalMove ? Direction.Vertical : Direction.Horizontal;\n\n        return (\n            this.checkMatchInDirection(grid, piece, row, col, primaryDirection, moveDirection) ||\n            this.checkMatchInDirection(grid, piece, row, col, secondaryDirection, moveDirection)\n        );\n    }\n\n    private static checkMatchInDirection(grid: Node[][], piece: Node, row: number, col: number, direction: Direction, moveDirection: Vec3): boolean {\n        const pieceName = piece.name;\n        const primaryStep = this.getStep(direction, moveDirection, true);\n        const secondaryStep = this.getStep(direction, moveDirection, false);\n        const matchCount = 1 + \n            this.countMatches(grid, pieceName, row, col, direction, primaryStep) + \n            this.countMatches(grid, pieceName, row, col, direction, secondaryStep);\n\n        return matchCount >= 3;\n    }\n\n    private static countMatches(grid: Node[][], pieceName: string, row: number, col: number, direction: Direction, step: Vec2): number {\n        let matchCount = 0;\n        let [i, j] = [row + step.x, col + step.y];\n\n        while (this.isWithinBounds(grid, i, j) && grid[i][j].name === pieceName) {\n            matchCount++;\n            i += step.x;\n            j += step.y;\n        }\n\n        return matchCount;\n    }\n\n    private static getStep(direction: Direction, moveDirection: Vec3, isPrimary: boolean): Vec2 {\n        if (direction === Direction.Horizontal) {\n            return new Vec2(isPrimary ? moveDirection.x : -moveDirection.x, 0);\n        } else {\n            return new Vec2(0, isPrimary ? moveDirection.y : -moveDirection.y);\n        }\n    }\n\n    private static isWithinBounds(grid: Node[][], row: number, col: number): boolean {\n        return row >= 0 && row < grid.length && col >= 0 && col < grid[row].length;\n    }\n}\n"]}