{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","Vec3","GridManager","ccclass","property","GravityHandler","onLoad","applyGravity","grid","moved","promises","col","length","row","node","piece","push","moveToPosition","Promise","all","fillEmptySpaces","getInstance","emptySpaces"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;;AAEvBC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;gCAGjBM,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCL,SADpC,CAC8C;AAC1CM,QAAAA,MAAM,GAAG;AACL,gBAAMA,MAAN;AACH;;AAGKC,QAAAA,YAAY,CAACC,IAAD,EAAO;AAAA;AACzB,gBAAIC,KAAK,GAAG,KAAZ;;AAEA,eAAG;AACCA,cAAAA,KAAK,GAAG,KAAR;AACA,kBAAIC,QAAyB,GAAG,EAAhC,CAFD,CAEqC;;AAEpC,mBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,MAAhC,EAAwCD,GAAG,EAA3C,EAA+C;AAC3C,qBAAK,IAAIE,GAAG,GAAGL,IAAI,CAACI,MAAL,GAAa,CAA5B,EAA+BC,GAAG,IAAI,CAAtC,EAAyCA,GAAG,EAA5C,EAAgD;AAC5C,sBAAIA,GAAG,GAAG,CAAN,GAAUL,IAAI,CAACI,MAAL,GAAc,CAA5B,EAA+B;;AAC/B,sBAAIJ,IAAI,CAACK,GAAD,CAAJ,CAAUF,GAAV,EAAeG,IAAf,KAAwB,IAAxB,IAAgCN,IAAI,CAACK,GAAG,GAAG,CAAP,CAAJ,CAAcF,GAAd,EAAmBG,IAAnB,KAA4B,IAAhE,EAAsE;AAClEN,oBAAAA,IAAI,CAACK,GAAD,CAAJ,CAAUF,GAAV,EAAeG,IAAf,GAAsBN,IAAI,CAACK,GAAG,GAAG,CAAP,CAAJ,CAAcF,GAAd,EAAmBG,IAAzC;AACAN,oBAAAA,IAAI,CAACK,GAAG,GAAG,CAAP,CAAJ,CAAcF,GAAd,EAAmBG,IAAnB,GAA0B,IAA1B;AACA,wBAAMC,KAAK,GAAGP,IAAI,CAACK,GAAD,CAAJ,CAAUF,GAAV,CAAd;AACAD,oBAAAA,QAAQ,CAACM,IAAT,CAAcD,KAAK,CAACE,cAAN,CAAqB,IAAIhB,IAAJ,CAASU,GAAT,EAAcE,GAAd,EAAmB,CAAnB,CAArB,CAAd;AACAJ,oBAAAA,KAAK,GAAG,IAAR;AACH;AACJ;AACJ;;AAED,oBAAMS,OAAO,CAACC,GAAR,CAAYT,QAAZ,CAAN;AAEH,aAnBD,QAmBSD,KAnBT,EAHyB,CAwBzB;AACA;;AAzByB;AA0B5B;;AAKWW,QAAAA,eAAe,GAAG;AACtB,cAAMZ,IAAI,GAAG;AAAA;AAAA,0CAAYa,WAAZ,GAA0Bb,IAAvC;;AACA,eAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,MAAhC,EAAwCD,GAAG,EAA3C,EAA+C;AAC3C,gBAAIW,WAAW,GAAG,CAAlB;;AACA,iBAAK,IAAIT,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,IAAI,CAACI,MAA7B,EAAqCC,GAAG,EAAxC,EAA4C;AACxC,kBAAIL,IAAI,CAACK,GAAD,CAAJ,CAAUF,GAAV,EAAeG,IAAf,KAAwB,IAA5B,EAAkC;AAC9BQ,gBAAAA,WAAW;AACd;AACJ,aAN0C,CAQ3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;AACJ,SAxDyC,CA0D1C;AACA;AACA;AACA;;;AA7D0C,O","sourcesContent":["import { _decorator, Component, Vec3 } from \"cc\";\nimport { SingletonComponent } from \"../SingletonComponent\";\nimport { GridManager } from \"./GridManager\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('GravityHandler')\nexport class GravityHandler extends Component {\n    onLoad() {\n        super.onLoad();\n    }\n\n\n    async applyGravity(grid) {\n    let moved = false;\n    \n    do {\n        moved = false;\n        let promises: Promise<void>[] = []; // Tüm asenkron hareketleri toplamak için bir array\n\n        for (let col = 0; col < grid[0].length; col++) {\n            for (let row = grid.length -1; row >= 0; row--) {\n                if (row + 1 > grid.length - 1) continue;\n                if (grid[row][col].node === null && grid[row + 1][col].node !== null) {\n                    grid[row][col].node = grid[row + 1][col].node;\n                    grid[row + 1][col].node = null;\n                    const piece = grid[row][col];\n                    promises.push(piece.moveToPosition(new Vec3(col, row, 0))); \n                    moved = true;\n                }\n            }\n        }\n\n        await Promise.all(promises); \n\n    } while (moved);\n\n    // Boş alanları dolduracak başka işlemler buraya eklenebilir\n    // await this.fillEmptySpaces();\n}\n\n\n\n\n    private fillEmptySpaces() {\n        const grid = GridManager.getInstance().grid;\n        for (let col = 0; col < grid[0].length; col++) {\n            let emptySpaces = 0;\n            for (let row = 0; row < grid.length; row++) {\n                if (grid[row][col].node === null) {\n                    emptySpaces++;\n                }\n            }\n            \n            // // Boş alanları yeni parçalarla doldur\n            // for (let i = 0; i < emptySpaces; i++) {\n            //     const newPiece = this.createNewPiece();\n            //     const row = emptySpaces - i - 1;\n            //     grid[row][col].node = newPiece;\n            //     const pieceComponent = newPiece.getComponent(Piece);\n            //     pieceComponent.moveToPosition(new Vec3(col, row, 0));\n            // }\n        }\n    }\n\n    // private createNewPiece(): Node {\n    //     // Yeni bir parça oluştur ve döndür\n    //     // Bu metodu kendi oyununuza göre uyarlamanız gerekecek\n    // }\n}"]}