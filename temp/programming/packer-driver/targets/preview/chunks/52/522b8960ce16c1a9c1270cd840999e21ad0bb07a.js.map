{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-2d/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","instantiate","Vec3","EasyLevels","InGameAssets","ccclass","property","GridGenerator","start","generate","levels","update","deltaTime","setNodeActive","settingNode","isActive","active","level","rows","cols","gridData","grid","tileSize","row","col","currentClass","assetType","AssetClass","get","length","randomIndex","Math","floor","random","console","log","randomAsset","newNode","node","addChild","position","getTilePosition","setPosition","newPosition","x","y"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;;AAC1CC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,Y,iBAAAA,Y;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;+BAGjBQ,a,WADZF,OAAO,CAAC,eAAD,C,gBAAR,MACaE,aADb,SACmCP,SADnC,CAC6C;AAE3CQ,QAAAA,KAAK,GAAG;AACN,eAAKC,QAAL,CAAc;AAAA;AAAA,wCAAWC,MAAX,CAAkB,CAAlB,CAAd;AACD;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAAE;;AAEpBC,QAAAA,aAAa,CAACC,WAAD,EAAoBC,QAApB,EAAuC;AAC1DD,UAAAA,WAAW,CAACE,MAAZ,GAAqBD,QAArB;AACD;;AAEDN,QAAAA,QAAQ,CAACQ,KAAD,EAAmB;AACzB,cAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,cAAMC,IAAI,GAAGF,KAAK,CAACE,IAAnB;AACA,cAAMC,QAAQ,GAAGH,KAAK,CAACI,IAAvB;AACA,cAAMC,QAAQ,GAAG,GAAjB,CAJyB,CAIH;;AAEtB,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,IAAxB,EAA8BK,GAAG,EAAjC,EAAqC;AACnC,iBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,IAAxB,EAA8BK,GAAG,EAAjC,EAAqC;AACnC,kBAAMC,YAAY,GAAGL,QAAQ,CAACG,GAAD,CAAR,CAAcC,GAAd,CAArB;AACA,kBAAME,SAAS,GAAG;AAAA;AAAA,gDAAaC,UAAb,CAAwBC,GAAxB,CAA4BH,YAA5B,CAAlB;;AAEA,kBAAIC,SAAS,IAAIA,SAAS,CAACG,MAAV,GAAmB,CAApC,EAAuC;AACrC,oBAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,SAAS,CAACG,MAArC,CAApB;AACAK,gBAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AAEA,oBAAMM,WAAW,GAAGV,SAAS,CAACI,WAAD,CAA7B;;AAEA,oBAAIM,WAAJ,EAAiB;AACf,sBAAMC,OAAO,GAAGpC,WAAW,CAACmC,WAAD,CAA3B;AAEA,uBAAKE,IAAL,CAAUC,QAAV,CAAmBF,OAAnB;AACA,sBAAMG,QAAQ,GAAG,KAAKC,eAAL,CAAqBlB,GAArB,EAA0BC,GAA1B,EAA+BF,QAA/B,CAAjB;AACAe,kBAAAA,OAAO,CAACK,WAAR,CAAoBF,QAApB;AACAH,kBAAAA,OAAO,CAACrB,MAAR,GAAiB,IAAjB;AACD;AACF;AACF;;AACD,gBAAM2B,WAAW,GAAG,IAAIzC,IAAJ,CAAS,EAAEoB,QAAQ,GAAGA,QAAQ,GAAC,CAAtB,CAAT,EAAkC,CAACA,QAAnC,EAA4C,CAA5C,CAApB;AACA,iBAAKgB,IAAL,CAAUI,WAAV,CAAsBC,WAAtB;AACD;AACF,SA1C0C,CA4C3C;;;AACQF,QAAAA,eAAe,CAAClB,GAAD,EAAcC,GAAd,EAA2BF,QAA3B,EAAmD;AACxE,cAAMsB,CAAC,GAAIpB,GAAG,GAAGF,QAAP,GAAmBA,QAAQ,GAAG,CAAxC;AACA,cAAMuB,CAAC,GAAItB,GAAG,GAAGD,QAAP,GAAmBA,QAAQ,GAAG,CAAxC;AACA,iBAAO,IAAIpB,IAAJ,CAAS0C,CAAT,EAAYC,CAAZ,EAAe,CAAf,CAAP;AACD;;AAjD0C,O","sourcesContent":["import { _decorator, Component, Node, instantiate, Vec3, Vec2 } from \"cc\";\nimport { EasyLevels } from \"../Levels/EasyLevels\";\nimport { InGameAssets } from \"../InGameAssets\";\nimport { LevelData } from \"../Levels/LevelData\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridGenerator\")\nexport class GridGenerator extends Component {\n\n  start() {\n    this.generate(EasyLevels.levels[2]);\n  }\n\n  update(deltaTime: number) {}\n\n  private setNodeActive(settingNode: Node, isActive: boolean) {\n    settingNode.active = isActive;\n  }\n\n  generate(level: LevelData) {\n    const rows = level.rows;\n    const cols = level.cols;\n    const gridData = level.grid;\n    const tileSize = 100; // burayı değiştir\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const currentClass = gridData[row][col];\n        const assetType = InGameAssets.AssetClass.get(currentClass);\n        \n        if (assetType && assetType.length > 0) {\n          const randomIndex = Math.floor(Math.random() * assetType.length );\n          console.log(randomIndex);\n          \n          const randomAsset = assetType[randomIndex];\n\n          if (randomAsset) {\n            const newNode = instantiate(randomAsset);\n          \n            this.node.addChild(newNode);\n            const position = this.getTilePosition(row, col, tileSize);\n            newNode.setPosition(position);\n            newNode.active = true;\n          }\n        }\n      }\n      const newPosition = new Vec3(-(tileSize + tileSize/2),-tileSize,0)\n      this.node.setPosition(newPosition )\n    }\n  }\n\n  // Griddeki her bir tile'ın pozisyonunu hesaplar\n  private getTilePosition(row: number, col: number, tileSize: number): Vec3 {\n    const x = (col * tileSize )- tileSize / 2;\n    const y = (row * tileSize )- tileSize / 2;\n    return new Vec3(x, y, 0);\n  }\n}\n"]}