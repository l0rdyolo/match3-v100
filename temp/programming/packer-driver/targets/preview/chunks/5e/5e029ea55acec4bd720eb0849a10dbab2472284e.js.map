{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","EffectManager","PoolHelper","PiecesPool","ccclass","Direction","MatchChecker","SwapPiecePositions","pieceA","pieceB","posA","posB","gridMap","movePiece","posAData","get","posBData","set","checkMatches","getPieceAtPosition","position","Array","from","entries","find","_","pos","row","col","visitNeighborWithDirection","currentPiece","direction","visited","depth","maxDepth","currentPiecePosition","neighborPiecePosition","dx","dy","neighbor","has","name","add","horizontalVisited","collectMatches","directions","horizontal","verticalVisited","vertical","isVertical","isHorizontal","size","handleMatch","Set","matchedPieces","piece","decreaseScale","delete","release"],"mappings":"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","sourcesContent":["import { _decorator, Color, Node, Sprite, Vec3 } from \"cc\";\r\nimport { EffectManager } from \"../Effects/EffectManager\";\r\nimport { PoolHelper } from \"../PoolHelper\";\r\nimport { PiecesPool } from \"../Poolable/PiecesPool\";\r\nconst { ccclass } = _decorator;\r\n\r\nenum Direction {\r\n  Horizontal,\r\n  Vertical,\r\n}\r\n\r\n@ccclass(\"MatchChecker\")\r\nexport class MatchChecker {\r\n  private static directions = {\r\n    horizontal: [\r\n      { dx: 0, dy: 1 }, // Right\r\n      { dx: 0, dy: -1 }, // Left\r\n    ],\r\n    vertical: [\r\n      { dx: 1, dy: 0 }, // Down\r\n      { dx: -1, dy: 0 }, // Up\r\n    ],\r\n  };\r\n\r\n  public static async SwapPiecePositions(\r\n    pieceA: Node,\r\n    pieceB: Node,\r\n    posA: Vec3,\r\n    posB: Vec3,\r\n    gridMap: Map<Node, { row: number; col: number }>\r\n  ) {\r\n    await EffectManager.movePiece(pieceA, posB, 0.1);\r\n    await EffectManager.movePiece(pieceB, posA, 0.1);\r\n\r\n    // Update the gridMap\r\n    const posAData = gridMap.get(pieceA);\r\n    const posBData = gridMap.get(pieceB);\r\n    gridMap.set(pieceA, posBData);\r\n    gridMap.set(pieceB, posAData);\r\n\r\n    this.checkMatches(pieceA, gridMap);\r\n    this.checkMatches(pieceB, gridMap);\r\n  }\r\n\r\n  private static getPieceAtPosition(\r\n    position: { row: number; col: number },\r\n    gridMap: Map<Node, { row: number; col: number }>\r\n  ): Node | undefined {\r\n    return Array.from(gridMap.entries()).find(\r\n      ([_, pos]) => pos.row === position.row && pos.col === position.col\r\n    )?.[0];\r\n  }\r\n\r\n  private static visitNeighborWithDirection(\r\n    currentPiece: Node,\r\n    gridMap: Map<Node, { row: number; col: number }>,\r\n    direction: { dx: number; dy: number },\r\n    visited: Set<Node>,\r\n    depth: number,\r\n    maxDepth: number\r\n  ): void {\r\n    if (depth > maxDepth) return;\r\n\r\n    const currentPiecePosition = gridMap.get(currentPiece);\r\n    const neighborPiecePosition = {\r\n      row: currentPiecePosition.row + direction.dx,\r\n      col: currentPiecePosition.col + direction.dy,\r\n    };\r\n\r\n    const neighbor = this.getPieceAtPosition(neighborPiecePosition, gridMap);\r\n    if (\r\n      neighbor &&\r\n      !visited.has(neighbor) &&\r\n      neighbor.name === currentPiece.name\r\n    ) {\r\n      visited.add(neighbor);\r\n      this.visitNeighborWithDirection(\r\n        neighbor,\r\n        gridMap,\r\n        direction,\r\n        visited,\r\n        depth + 1,\r\n        maxDepth\r\n      );\r\n    }\r\n  }\r\n\r\n  public static  checkMatches(\r\n    currentPiece: Node,\r\n    gridMap: Map<Node, { row: number; col: number }>,\r\n    maxDepth: number = 3\r\n  ) : boolean {\r\n    const horizontalVisited = this.collectMatches(\r\n      currentPiece,\r\n      gridMap,\r\n      this.directions.horizontal,\r\n      maxDepth\r\n    );\r\n\r\n    const verticalVisited = this.collectMatches(\r\n      currentPiece,\r\n      gridMap,\r\n      this.directions.vertical,\r\n      maxDepth\r\n    );\r\n\r\n    let isVertical = false;\r\n    let isHorizontal = false; \r\n\r\n\r\n    if (horizontalVisited.size >= 3) {\r\n      this.handleMatch(Array.from(horizontalVisited), gridMap);\r\n      isHorizontal = true;\r\n    }\r\n\r\n    if (verticalVisited.size >= 3) {\r\n      this.handleMatch(Array.from(verticalVisited), gridMap);\r\n      isVertical = true;\r\n    }\r\n\r\n    return isVertical || isHorizontal;\r\n  }\r\n\r\n  private static collectMatches(\r\n    currentPiece: Node,\r\n    gridMap: Map<Node, { row: number; col: number }>,\r\n    directions: { dx: number; dy: number }[],\r\n    maxDepth: number\r\n  ): Set<Node> {\r\n    const visited = new Set<Node>();\r\n    visited.add(currentPiece);\r\n\r\n    for (const direction of directions) {\r\n      this.visitNeighborWithDirection(\r\n        currentPiece,\r\n        gridMap,\r\n        direction,\r\n        visited,\r\n        0,\r\n        maxDepth\r\n      );\r\n    }\r\n\r\n    return visited;\r\n  }\r\n\r\n  private static async handleMatch(\r\n    matchedPieces: Node[],\r\n    gridMap: Map<Node, { row: number; col: number }>\r\n  ): Promise<void> {\r\n    for (const piece of matchedPieces) {\r\n      EffectManager.decreaseScale(piece, 0.1, false);\r\n      gridMap.delete(piece);\r\n      PoolHelper.release(PiecesPool, piece);\r\n    }\r\n  }\r\n}\r\n"]}