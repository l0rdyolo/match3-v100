{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-2d/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Node","instantiate","Vec3","EasyLevels","InGameAssets","ccclass","property","GridGenerator","start","setNodeActive","dummyCandy","generate","levels","update","deltaTime","settingNode","isActive","active","level","rows","cols","gridData","grid","tileSize","row","col","currentClass","assetType","AssetClass","get","console","log","length","randomIndex","Math","floor","random","randomAsset","newNode","position","getTilePosition","setPosition","node","addChild","x","y"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, instantiate, Vec3 } from \"cc\";\nimport { EasyLevels } from \"../Levels/EasyLevels\";\nimport { InGameAssets } from \"../InGameAssets\";\nimport { LevelData } from \"../Levels/LevelData\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridGenerator\")\nexport class GridGenerator extends Component {\n  @property(Node) dummyCandy: Node = null!;\n\n  start() {\n    this.setNodeActive(this.dummyCandy, true);\n    this.generate(EasyLevels.levels[1]); // Örnek olarak 1. seviyeyi yüklüyoruz\n  }\n\n  update(deltaTime: number) {}\n\n  private setNodeActive(settingNode: Node, isActive: boolean) {\n    settingNode.active = isActive;\n  }\n\n  generate(level: LevelData) {\n    const rows = level.rows;\n    const cols = level.cols;\n    const gridData = level.grid;\n    const tileSize = 100; // Örnek tile boyutu, kendi tile boyutunuza göre ayarlayın\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const currentClass = gridData[row][col];\n        const assetType = InGameAssets.AssetClass.get(currentClass);\n        console.log(assetType.length);\n        \n        if (assetType && assetType.length > 0) {\n          const randomIndex = Math.floor(Math.random() * (assetType.length - 1) );\n          console.log(randomIndex);\n          \n          const randomAsset = assetType[randomIndex];\n\n          if (randomAsset) {\n            // Yeni node'u instantiate et\n            const newNode = instantiate(randomAsset);\n          \n            // Pozisyonunu ayarla\n            const position = this.getTilePosition(row, col, tileSize);\n            newNode.setPosition(position);\n          \n            // Node'u sahneye ekle\n            this.node.addChild(newNode);\n          }\n        }\n      }\n    }\n  }\n\n  // Griddeki her bir tile'ın pozisyonunu hesaplar\n  private getTilePosition(row: number, col: number, tileSize: number): Vec3 {\n    const x = col * tileSize + tileSize / 2;\n    const y = row * tileSize + tileSize / 2;\n    return new Vec3(x, y, 0);\n  }\n}\n"]}