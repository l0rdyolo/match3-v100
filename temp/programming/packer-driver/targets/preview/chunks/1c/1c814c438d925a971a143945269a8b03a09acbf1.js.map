{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Node","Vec3","CCInteger","PiecesPool","EffectManager","ccclass","property","GridGenerator","PIECE_CONTENT_SIZE","start","grid","generateGrid","row","GRID_ROW","col","piece","piecesPool","getPieceFromPool","createsMatch","pieceLastPosition","getCenteredPosition","pieceFirstPosition","x","setPosition","on","EventType","TOUCH_START","onPieceClicked","createPiece","event","clickedPiece","currentTarget","console","log","getPosition","name","returnPieceToPool","j","i","_j","_i"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, systemEvent, SystemEventType, EventTouch, Vec2, CCInteger } from 'cc';\nimport { PiecesPool } from '../Poolable/PiecesPool';\nimport { EffectManager } from '../Effects/EffectManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GridGenerator')\nexport class GridGenerator extends Component {\n    @property(PiecesPool)\n    private piecesPool: PiecesPool = null;\n   \n    private PIECE_CONTENT_SIZE: number = 100; //dinamikle≈ütir\n    \n    @property(CCInteger)\n    GRID_ROW: number = 0;\n\n    protected start(): void {\n        const grid = this.generateGrid();\n    }\n\n    private async generateGrid() {\n        const grid: Node[][] = [];\n        for (let row = 0; row < this.GRID_ROW; row++) {\n            grid[row] = [];\n            for (let col = 0; col < this.GRID_ROW; col++) {\n                let piece: Node;\n                do {\n                    piece = this.piecesPool.getPieceFromPool();\n                } while (this.createsMatch(piece, row, col, grid));\n                const pieceLastPosition = this.getCenteredPosition(col, row)\n                const pieceFirstPosition = new Vec3(pieceLastPosition.x, 500)\n                piece.setPosition(pieceFirstPosition);\n                piece.on(Node.EventType.TOUCH_START, this.onPieceClicked, this);\n                grid[row][col] = piece;\n\n                await EffectManager.createPiece(piece , pieceLastPosition , 0.1 ,  100)\n            }\n        }\n    }\n\n\n    private onPieceClicked(event: EventTouch) {\n        const clickedPiece = event.currentTarget as Node;\n        console.log(`Piece clicked at position: ${clickedPiece.getPosition()}`);\n        // Implement what happens when a piece is clicked.\n    }\n\n    private createsMatch(piece: Node, row: number, col: number, grid: Node[][]): boolean {\n        if (row >= 2 &&\n            grid[row - 1][col]?.name === piece.name &&\n            grid[row - 2][col]?.name === piece.name) {\n                this.piecesPool.returnPieceToPool(piece);\n            return true;\n        }\n\n        if (col >= 2 &&\n            grid[row][col - 1]?.name === piece.name &&\n            grid[row][col - 2]?.name === piece.name) {\n                this.piecesPool.returnPieceToPool(piece);\n            return true;\n        }\n\n        return false;\n    }\n\n\n    private getCenteredPosition(j : number, i:number ) : Vec3{\n      //EVERY game board should be square matrix\n      const _j = (j * this.PIECE_CONTENT_SIZE)  - ((this.PIECE_CONTENT_SIZE * 2) )\n      const _i = (i * this.PIECE_CONTENT_SIZE)  - ((this.PIECE_CONTENT_SIZE * 2) ) \n      return new Vec3(_j,_i)\n    }\n}\n"]}