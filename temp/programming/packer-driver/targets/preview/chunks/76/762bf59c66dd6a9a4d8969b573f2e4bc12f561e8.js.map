{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Match/MatchChecker.ts"],"names":["MatchChecker","HorizontalMatchStrategy","VerticalMatchStrategy","constructor","matchStrategies","push","checkForMatches","pieceA","pieceB","grid","matchedPieces","strategy","matches","checkMatch","length","concat","Promise","all","map","piece","matched","console","log","checkForMatchesAfterGravity","row","col","isEmpty"],"mappings":";;;8EAMaA,Y;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALJC,MAAAA,uB,iBAAAA,uB;;AAEAC,MAAAA,qB,iBAAAA,qB;;;;;;;8BAGIF,Y,GAAN,MAAMA,YAAN,CAAmB;AAGtBG,QAAAA,WAAW,GAAG;AAAA,eAFNC,eAEM,GAF6B,EAE7B;AACV,eAAKA,eAAL,CAAqBC,IAArB,CAA0B;AAAA;AAAA,mEAA1B;AACA,eAAKD,eAAL,CAAqBC,IAArB,CAA0B;AAAA;AAAA,+DAA1B;AACH,SANqB,CAOtB;;;AAEaC,QAAAA,eAAe,CAACC,MAAD,EAAgBC,MAAhB,EAA+BC,IAA/B,EAAiE;AAAA;;AAAA;AACzF,gBAAIC,aAAsB,GAAG,EAA7B;;AACA,iBAAK,IAAMC,QAAX,IAAuB,KAAI,CAACP,eAA5B,EAA6C;AACzC,kBAAMQ,OAAO,GAAGD,QAAQ,CAACE,UAAT,CAAoBN,MAApB,EAA4BC,MAA5B,EAAqCC,IAArC,CAAhB;;AACA,kBAAIG,OAAO,CAACE,MAAR,IAAkB,CAAtB,EAAyB;AACrBJ,gBAAAA,aAAa,GAAGA,aAAa,CAACK,MAAd,CAAqBH,OAArB,CAAhB;AACH;AACJ;;AACD,gBAAIF,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,oBAAME,OAAO,CAACC,GAAR,CAAYP,aAAa,CAACQ,GAAd,CAAkBC,KAAK,IAAIA,KAAK,CAACC,OAAN,EAA3B,CAAZ,CAAN;AACH;;AACDC,YAAAA,OAAO,CAACC,GAAR,CAAYZ,aAAZ;AAEA,mBAAOA,aAAP;AAbyF;AAc5F;;AAEYa,QAAAA,2BAA2B,CAACd,IAAD,EAAmC;AAAA;;AAAA;AACvE,gBAAIC,aAAsB,GAAG,EAA7B;;AAEA,iBAAK,IAAIc,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGf,IAAI,CAACK,MAA7B,EAAqCU,GAAG,EAAxC,EAA4C;AACxC,mBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGhB,IAAI,CAACe,GAAD,CAAJ,CAAUV,MAAlC,EAA0CW,GAAG,EAA7C,EAAiD;AAC7C,oBAAMN,KAAK,GAAGV,IAAI,CAACe,GAAD,CAAJ,CAAUC,GAAV,CAAd;;AACA,oBAAI,CAACN,KAAK,CAACO,OAAX,EAAoB;AAChB,uBAAK,IAAMf,QAAX,IAAuB,MAAI,CAACP,eAA5B,EAA6C;AACzC,wBAAMQ,OAAO,GAAGD,QAAQ,CAACE,UAAT,CAAoBM,KAApB,EAA2BA,KAA3B,EAAmCV,IAAnC,CAAhB;;AACA,wBAAIG,OAAO,CAACE,MAAR,IAAkB,CAAtB,EAAyB;AACrBJ,sBAAAA,aAAa,GAAGA,aAAa,CAACK,MAAd,CAAqBH,OAArB,CAAhB;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,gBAAIF,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,oBAAME,OAAO,CAACC,GAAR,CAAYP,aAAa,CAACQ,GAAd,CAAkBC,KAAK,IAAIA,KAAK,CAACC,OAAN,EAA3B,CAAZ,CAAN;AACH;;AAED,mBAAOV,aAAP;AArBuE;AAsB1E;;AA/CqB,O","sourcesContent":["import { Piece } from \"../Piece/Piece\";\nimport { HorizontalMatchStrategy } from \"./MatchStrategies/HorizontalMatchStrategy\";\nimport { MatchStrategy } from \"./MatchStrategies/IMatchStrategy\";\nimport { VerticalMatchStrategy } from \"./MatchStrategies/VerticalMatchStrategy\";\nimport { GridManager } from \"../Grid/GridManager\";\n\nexport class MatchChecker {\n    private matchStrategies: MatchStrategy[] = [];\n\n    constructor() {\n        this.matchStrategies.push(new HorizontalMatchStrategy());\n        this.matchStrategies.push(new VerticalMatchStrategy());\n    }\n    //! IDEA - 3 : stategyler birbirin tekralrayan kodlar içeriyor. düzenlenmeli\n\n    public async checkForMatches(pieceA: Piece, pieceB: Piece, grid:Piece[][]): Promise<Piece[]> {\n        let matchedPieces: Piece[] = [];\n        for (const strategy of this.matchStrategies) {\n            const matches = strategy.checkMatch(pieceA, pieceB , grid);\n            if (matches.length >= 3) {\n                matchedPieces = matchedPieces.concat(matches);\n            }\n        }\n        if (matchedPieces.length > 0) {\n            await Promise.all(matchedPieces.map(piece => piece.matched()));\n        }\n        console.log(matchedPieces);\n        \n        return matchedPieces;\n    }\n\n    public async checkForMatchesAfterGravity(grid:Piece[][]): Promise<Piece[]> {\n        let matchedPieces: Piece[] = [];\n\n        for (let row = 0; row < grid.length; row++) {\n            for (let col = 0; col < grid[row].length; col++) {\n                const piece = grid[row][col];\n                if (!piece.isEmpty) {\n                    for (const strategy of this.matchStrategies) {\n                        const matches = strategy.checkMatch(piece, piece , grid);\n                        if (matches.length >= 3) {\n                            matchedPieces = matchedPieces.concat(matches);\n                        }\n                    }\n                }\n            }\n        }\n\n        if (matchedPieces.length > 0) {\n            await Promise.all(matchedPieces.map(piece => piece.matched()));\n        }\n\n        return matchedPieces;\n    }\n\n}\n"]}