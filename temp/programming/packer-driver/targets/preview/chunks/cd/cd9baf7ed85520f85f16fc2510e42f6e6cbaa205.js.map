{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Vec3","CCInteger","InteractionManager","ccclass","property","GridGenerator","grid","piecesPool","PIECE_OFFSET","PIECE_CONTENT_SIZE","interactionManager","start","Generate","row","height","piece","createPiece","col","getPieceFromPool","setParent","node","createsMatch","setPosition","getCenteredPosition","addChild","name","returnPieceToPool","j","i","_j","_i"],"mappings":"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","sourcesContent":["import {\r\n  _decorator,\r\n  Component,\r\n  Node,\r\n  Vec3,\r\n  CCInteger,\r\n} from \"cc\";\r\nimport { PiecesPool } from \"../Poolable/PiecesPool\";\r\nimport { InteractionManager } from \"../Interaction/InteractionManager\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GridManager')\r\nexport class GridGenerator extends Component   {\r\n  public grid: Node[][] = [];\r\n  private piecesPool: PiecesPool = null;\r\n  private PIECE_OFFSET: number = 5;\r\n\r\n  @property(CCInteger)\r\n  private width : number = 0;\r\n\r\n  @property(CCInteger)\r\n  private height : number = 0;\r\n\r\n  private PIECE_CONTENT_SIZE: number = 100; //dinamikleştir\r\n\r\n  private interactionManager: InteractionManager = new InteractionManager();\r\n\r\n  protected start(): void {\r\n    //!TODO: grid yerleşmesini ve content size'ı responsive yapmalıyız\r\n    // this.node.setPosition(-7*50, -500);\r\n    // this.generateGrid();\r\n  }\r\n\r\n  public async Generate() {\r\n    for (let row = 0; row < this.height; row++) {\r\n      const piece = this.createPiece(row,0);\r\n    }\r\n\r\n    // for (let row = 0; row < this.GRID_ROW; row++) {\r\n    //   this.grid[row] = [];\r\n    //   const piecesInRow: PieceProps[] = [];\r\n    //   for (let col = 0; col < this.GRID_ROW; col++) {\r\n    //     const piece: Node = this.createPiece(row, col);\r\n    //     this.grid[row][col] = piece;\r\n    //     const pieceLastPosition = this.getCenteredPosition(col, row);\r\n    //     const pieceFirstPosition = new Vec3(\r\n    //       pieceLastPosition.x,\r\n    //       this.GRID_ROW * this.PIECE_CONTENT_SIZE\r\n    //     );\r\n    //     piece.setPosition(pieceFirstPosition);\r\n    //     //piecelere event listener ekliyoruz\r\n    //     // piece.on(Node.EventType.TOUCH_START, this.onPieceClicked, this);\r\n    //     piece.on(Node.EventType.TOUCH_START, (event: EventTouch) => {\r\n    //       this.interactionManager.onPieceClicked(event, piece , this.gridMap);\r\n    //     });\r\n    //     this.grid[row][col] = piece;\r\n\r\n    //     const pieceProps: PieceProps = {\r\n    //       piece: piece,\r\n    //       targetPosition: pieceLastPosition,\r\n    //     };\r\n    //     piecesInRow.push(pieceProps);\r\n    //   }\r\n    //   await EffectManager.animateRowFall(piecesInRow, 0.1);\r\n    // }\r\n  }\r\n\r\n  //bu fonksiyon init olurken match var mı diye kontrol edip piece üretiyor.\r\n  private createPiece(row: number, col: number): Node {\r\n    let piece: Node;\r\n    do {\r\n      piece = this.piecesPool.getPieceFromPool();\r\n      piece.setParent(this.node);\r\n    } while (this.createsMatch(piece, row, col, this.grid));\r\n    piece.setPosition(this.getCenteredPosition(col, row));\r\n    this.node.addChild(piece);\r\n    return piece;\r\n  }\r\n\r\n  private createsMatch(\r\n    piece: Node,\r\n    row: number,\r\n    col: number,\r\n    grid: Node[][]\r\n  ): boolean {\r\n    if (\r\n      row >= 2 &&\r\n      grid[row - 1][col]?.name === piece.name &&\r\n      grid[row - 2][col]?.name === piece.name\r\n    ) {\r\n      this.piecesPool.returnPieceToPool(piece);\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      col >= 2 &&\r\n      grid[row][col - 1]?.name === piece.name &&\r\n      grid[row][col - 2]?.name === piece.name\r\n    ) {\r\n      this.piecesPool.returnPieceToPool(piece);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private getCenteredPosition(j: number, i: number): Vec3 {\r\n    //EVERY game board should be square matrix\r\n    const _j = j * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\r\n    const _i = i * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\r\n    return new Vec3(_j, _i);\r\n  }\r\n}\r\n"]}