{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Vec3","SingletonComponent","GridGenerator","ccclass","property","GridManager","_grid","gridGenerator","gridWidth","gridOffset","grid","onLoad","start","node","getComponent","Generate","width","PIECE_OFFSET","offsetDiff","piecePositionsDiff","gridX","setPosition","SwapPieces","pieceA","pieceB","pa_row","row","pa_col","col","pb_row","pb_col","tempA","tempB","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAgDC,MAAAA,I,OAAAA,I;;AAChDC,MAAAA,kB,iBAAAA,kB;;AAEAC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;6BAGjBM,W,WADZF,OAAO,CAAC,aAAD,C,gBAAR,MACaE,WADb;AAAA;AAAA,oDACiE;AAAA;AAAA;AAAA,eACvDC,KADuD;AAAA,eAGvDC,aAHuD,GAGxB,IAHwB;AAAA,eAKvDC,SALuD,GAKnC,CALmC;AAAA,eAMvDC,UANuD,GAMlC,CANkC;AAAA;;AAQtD,YAAJC,IAAI,GAAE;AACT,iBAAO,KAAKJ,KAAZ;AACD;;AAESK,QAAAA,MAAM,GAAS;AACvB,gBAAMA,MAAN;AACD;;AAEDC,QAAAA,KAAK,GAAG;AACN,eAAKL,aAAL,GAAqB,KAAKM,IAAL,CAAUC,YAAV;AAAA;AAAA,6CAArB;AACA,eAAKR,KAAL,GAAa,KAAKC,aAAL,CAAmBQ,QAAnB,EAAb;AACA,eAAKP,SAAL,GAAiB,KAAKD,aAAL,CAAmBS,KAApC;AACA,eAAKP,UAAL,GAAkB,KAAKF,aAAL,CAAmBU,YAArC,CAJM,CAKN;;AACA,cAAMC,UAAU,GAAI,KAAKT,UAAL,GAAkB,CAAnB,GAAwB,KAAKD,SAAhD;AACA,cAAMW,kBAAkB,GAAG,EAAE,KAAKX,SAAL,GAAiB,CAAnB,IAAwB,GAAnD;AAEA,cAAMY,KAAK,GAAGD,kBAAkB,GAAGD,UAAnC;AACA,eAAKL,IAAL,CAAUQ,WAAV,CAAsB,IAAIrB,IAAJ,CAASoB,KAAT,EAAgB,CAAC,GAAjB,EAAsB,CAAtB,CAAtB;AACD;;AAEDE,QAAAA,UAAU,CAACC,MAAD,EAAgBC,MAAhB,EAA+B;AACvC;AACA,cAAMC,MAAM,GAAGF,MAAM,CAACG,GAAtB;AACA,cAAMC,MAAM,GAAGJ,MAAM,CAACK,GAAtB;AAEA,cAAMC,MAAM,GAAGL,MAAM,CAACE,GAAtB;AACA,cAAMI,MAAM,GAAGN,MAAM,CAACI,GAAtB,CANuC,CAQvC;;AACAL,UAAAA,MAAM,CAACG,GAAP,GAAaG,MAAb;AACAN,UAAAA,MAAM,CAACK,GAAP,GAAaE,MAAb;AAEAN,UAAAA,MAAM,CAACE,GAAP,GAAaD,MAAb;AACAD,UAAAA,MAAM,CAACI,GAAP,GAAaD,MAAb,CAbuC,CAevC;;AACA,cAAMI,KAAK,GAAG,KAAKrB,IAAL,CAAUe,MAAV,EAAkBE,MAAlB,CAAd;AACA,cAAMK,KAAK,GAAG,KAAKtB,IAAL,CAAUmB,MAAV,EAAkBC,MAAlB,CAAd,CAjBuC,CAmBvC;;AACA,eAAKpB,IAAL,CAAUe,MAAV,EAAkBE,MAAlB,IAA4BK,KAA5B;AACA,eAAKtB,IAAL,CAAUmB,MAAV,EAAkBC,MAAlB,IAA4BC,KAA5B;AAEAE,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,IAAjB;AACH;;AArDgE,O,eAyDjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { _decorator, Component, Node, SpriteFrame, Vec2, Vec3 } from 'cc';\nimport { SingletonComponent } from '../SingletonComponent';\nimport { Piece } from '../Piece/Piece';\nimport { GridGenerator } from './GridGenerator';\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridManager\")\nexport class GridManager extends SingletonComponent<GridManager> {\n  private _grid: Piece[][];\n\n  private gridGenerator: GridGenerator = null;\n\n  private gridWidth: number = 0;\n  private gridOffset: number = 0;\n\n   get grid(){\n    return this._grid\n  }\n\n  protected onLoad(): void {\n    super.onLoad();\n  }\n\n  start() {\n    this.gridGenerator = this.node.getComponent(GridGenerator);\n    this._grid = this.gridGenerator.Generate();\n    this.gridWidth = this.gridGenerator.width;\n    this.gridOffset = this.gridGenerator.PIECE_OFFSET;\n    //! dinamik olmalı\n    const offsetDiff = (this.gridOffset / 2) * this.gridWidth;\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\n\n    const gridX = piecePositionsDiff + offsetDiff;\n    this.node.setPosition(new Vec3(gridX, -200, 0));\n  }\n\n  SwapPieces(pieceA: Piece, pieceB: Piece) {\n    // Mevcut satır ve sütunları saklayın\n    const pa_row = pieceA.row;\n    const pa_col = pieceA.col;\n\n    const pb_row = pieceB.row;\n    const pb_col = pieceB.col;\n\n    // Parçaların satır ve sütun bilgilerini güncelleyin\n    pieceA.row = pb_row;\n    pieceA.col = pb_col;\n\n    pieceB.row = pa_row;\n    pieceB.col = pa_col;\n\n    // Grid'deki yerleri geçici olarak saklayın\n    const tempA = this.grid[pa_row][pa_col];\n    const tempB = this.grid[pb_row][pb_col];\n\n    // Grid'i yeni pozisyonlara göre güncelleyin\n    this.grid[pa_row][pa_col] = tempB;\n    this.grid[pb_row][pb_col] = tempA;\n\n    console.log(this.grid);\n}\n\n}\n\n// async swapPieces(piece1: Piece, piece2: Piece,piece1Pos:Vec3,piece2Pos:Vec3) {\n//     console.log(\"Swap pieces:\",piece1,piece2)\n//       // Pozisyonları değiştir\n//       // const tempPosition = piece1.node.position.clone();\n//       //piece1.node.position = piece2.node.position;\n//       // piece2.node.position = tempPosition;\n//       EffectManager.movePiece(piece1.node,piece2Pos,0.1);\n//       await EffectManager.movePiece(piece2.node,piece1Pos,0.1);\n    \n  \n  \n//       // Satır ve sütun değerlerini değiştir\n//       const tempRow = piece1.row;\n//       const tempCol = piece1.col;\n//       piece1.row = piece2.row;\n//       piece1.col = piece2.col;\n//       piece2.row = tempRow;\n//       piece2.col = tempCol;\n  \n  \n//      /* // Type'ları değiştir\n//       const tempType = piece1.type;\n//       piece1.type = piece2.type;\n//       piece2.type = tempType;*/\n  \n//       // Grid'deki referansları güncelle\n//       this.gridGenerator.grid[piece1.row][piece1.col] = piece1;\n//       this.gridGenerator.grid[piece2.row][piece2.col] = piece2;\n//   }"]}