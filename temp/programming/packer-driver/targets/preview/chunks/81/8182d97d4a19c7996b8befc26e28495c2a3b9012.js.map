{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Color","Node","Vec3","SingletonComponent","GridGenerator","GameGlobal","SliderManager","MatchChecker","GravityHandler","PiecePool","ccclass","property","GridManager","_grid","gridGenerator","sliderManager","matchChecker","gravityHandler","gridWidth","gridHeight","gridOffset","colors","red","black","blue","yellow","grid","onLoad","init","start","node","getComponent","Generate","length","offsetDiff","PIECE_OFFSET","piecePositionsDiff","gridX","setPosition","SwapPieces","pieceA","pieceB","Slide","pa_row","row","pa_col","col","pb_row","pb_col","tempA","tempB","deleteMatches","matches","matchedPiece","delete","handleSelection","checkForMatches","applyGravity","fillEmptySpaces","checkForMatchesAfterGravity","console","log","fillPromises","piece","newPieceNode","getInstance","getPiece","setParent","addChild","canSelect","ResetScale","updatePosition","push","Promise","resolve","once","EventType","TRANSFORM_CHANGED","all"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Color,\n  Component,\n  Node,\n  Sprite,\n  SpriteFrame,\n  SpriteRenderer,\n  Vec2,\n  Vec3,\n} from \"cc\";\nimport { SingletonComponent } from \"../SingletonComponent\";\nimport { Piece } from \"../Piece/Piece\";\nimport { GridGenerator } from \"./GridGenerator\";\nimport { GameGlobal } from \"../Game/GameGlobal\";\nimport { SliderManager } from \"../Interaction/SliderManager\";\nimport { MatchChecker } from \"../Match/MatchChecker\";\nimport { GravityHandler } from \"./GravityHandler\";\nimport { PiecePool } from \"../Piece/PiecePool\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridManager\")\nexport class GridManager extends SingletonComponent<GridManager> {\n  private _grid: Piece[][];\n\n  private gridGenerator: GridGenerator = null;\n  private sliderManager: SliderManager = null;\n  private matchChecker: MatchChecker = null;\n  private gravityHandler: GravityHandler = null;\n\n  private gridWidth: number = 0;\n  public gridHeight: number = 0;\n  private gridOffset: number = 0;\n\n  private colors = {\n    red: new Color(255, 0, 0),\n    black: new Color(0, 0, 0),\n    blue: new Color(0, 0, 255),\n    yellow: new Color(255, 255, 0),\n  };\n\n  get grid() {\n    return this._grid;\n  }\n\n  protected onLoad(): void {\n    super.onLoad();\n    this.init();\n  }\n\n  protected init(): void {\n    this.sliderManager = new SliderManager();\n    this.matchChecker = new MatchChecker();\n    this.gravityHandler = new GravityHandler();\n  }\n\n  start() {\n    this.gridGenerator = this.node.getComponent(GridGenerator);\n    this._grid = this.gridGenerator.Generate();\n    this.gridWidth = this._grid[0].length;\n    this.gridHeight = this._grid.length;\n\n    const offsetDiff = (GameGlobal.PIECE_OFFSET / 2) * this.gridWidth;\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\n\n    const gridX = piecePositionsDiff + offsetDiff;\n    this.node.setPosition(new Vec3(gridX, -200, 0));\n  }\n\n  async SwapPieces(pieceA: Piece, pieceB: Piece) {\n    await this.sliderManager.Slide(pieceA, pieceB);\n    const pa_row = pieceA.row;\n    const pa_col = pieceA.col;\n\n    const pb_row = pieceB.row;\n    const pb_col = pieceB.col;\n\n    pieceA.row = pb_row;\n    pieceA.col = pb_col;\n\n    pieceB.row = pa_row;\n    pieceB.col = pa_col;\n\n    const tempA = this.grid[pa_row][pa_col];\n    const tempB = this.grid[pb_row][pb_col];\n\n    this.grid[pa_row][pa_col] = tempB;\n    this.grid[pb_row][pb_col] = tempA;\n  }\n\n  deleteMatches(matches: Piece[]) {\n    for (const matchedPiece of matches) {\n      matchedPiece.delete();\n    }\n  }\n  async handleSelection(pieceA: Piece, pieceB: Piece) {\n    await this.SwapPieces(pieceA, pieceB);\n    let matches: Piece[] = await this.matchChecker.checkForMatches(\n      pieceA,\n      pieceB\n    );\n\n    if (matches.length > 0) {\n      this.deleteMatches(matches);\n      await this.gravityHandler.applyGravity(); \n      await this.fillEmptySpaces(); \n\n      do {\n          matches = await this.matchChecker.checkForMatchesAfterGravity();\n          if (matches.length > 0) {\n              this.deleteMatches(matches);\n              await this.gravityHandler.applyGravity(); \n              await this.fillEmptySpaces(); \n          }\n      } while (matches.length > 0);\n\n      console.log(\"Matchler bitti, yeni selection bekleniyor.\");\n    } else {\n      await this.SwapPieces(pieceA, pieceB);\n      console.log(\"Match yok, selection geri alındı.\");\n    }\n  }\n\n  private async fillEmptySpaces() {\n    const grid = this.grid;\n    const fillPromises: Promise<void>[] = [];\n\n    for (let row = 0; row < this.gridHeight; row++) {\n      for (let col = 0; col < this.gridWidth; col++) {\n        const piece = grid[row][col];\n\n        if (piece.node === null) {\n          const newPieceNode = PiecePool.getInstance().getPiece();\n          newPieceNode.setParent(this.node);\n          this.node.addChild(newPieceNode);\n\n          piece.node = newPieceNode;\n          piece.canSelect = true;\n          piece.ResetScale();\n          piece.updatePosition(row, col);\n\n          fillPromises.push(new Promise<void>((resolve) => {\n            piece.node.once(Node.EventType.TRANSFORM_CHANGED, resolve);\n          }));\n        }\n      }\n    }\n\n    await Promise.all(fillPromises); \n  }\n}\n"]}