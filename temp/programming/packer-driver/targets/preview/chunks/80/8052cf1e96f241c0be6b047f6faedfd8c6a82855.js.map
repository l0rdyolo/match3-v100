{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","ccclass","property","GravityHandler","onLoad","applyGravity","grid","moved","promises","col","length","row","currentPiece","belowPiece","isEmpty","posA","node","getPosition","updatePosition","Promise","all"],"mappings":";;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;;;;;;;;OAEf;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;gCAGjBI,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCH,SADpC,CAC8C;AAC5CI,QAAAA,MAAM,GAAG;AACP,gBAAMA,MAAN;AACD;;AAEKC,QAAAA,YAAY,CAACC,IAAD,EAAO;AAAA;AACvB,gBAAIC,KAAK,GAAG,KAAZ;AACA,gBAAIC,QAAyB,GAAG,EAAhC;;AAEA,eAAG;AACDD,cAAAA,KAAK,GAAG,KAAR;;AAEA,mBAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,MAAhC,EAAwCD,GAAG,EAA3C,EAA+C;AAC7C,qBAAK,IAAIE,GAAG,GAAGL,IAAI,CAACI,MAAL,GAAc,CAA7B,EAAgCC,GAAG,IAAI,CAAvC,EAA0CA,GAAG,EAA7C,EAAiD;AAC/C,sBAAMC,YAAY,GAAGN,IAAI,CAACK,GAAD,CAAJ,CAAUF,GAAV,CAArB;AACA,sBAAMI,UAAU,GAAGP,IAAI,CAACK,GAAG,GAAG,CAAP,CAAJ,CAAcF,GAAd,CAAnB,CAF+C,CAI/C;;AACA,sBAAII,UAAU,CAACC,OAAX,IAAsB,CAACF,YAAY,CAACE,OAAxC,EAAiD;AAC/C,wBAAMC,IAAI,GAAGH,YAAY,CAACI,IAAb,CAAkBC,WAAlB,EAAb;AACAL,oBAAAA,YAAY,CAACM,cAAb,CACEL,UAAU,CAACF,GADb,EAEEE,UAAU,CAACJ,GAFb;AAKAF,oBAAAA,KAAK,GAAG,IAAR;AACD;AACF;AACF;;AAED,oBAAMY,OAAO,CAACC,GAAR,CAAYZ,QAAZ,CAAN;AACD,aAtBD,QAsBSD,KAtBT;AAJuB;AA2BxB;;AAhC2C,O","sourcesContent":["import { _decorator, Component, Vec3 } from \"cc\";\r\nimport { EffectManager } from \"../Effects/EffectManager\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"GravityHandler\")\r\nexport class GravityHandler extends Component {\r\n  onLoad() {\r\n    super.onLoad();\r\n  }\r\n\r\n  async applyGravity(grid) {\r\n    let moved = false;\r\n    let promises: Promise<void>[] = [];\r\n\r\n    do {\r\n      moved = false;\r\n\r\n      for (let col = 0; col < grid[0].length; col++) {\r\n        for (let row = grid.length - 2; row >= 0; row--) {\r\n          const currentPiece = grid[row][col];\r\n          const belowPiece = grid[row + 1][col];\r\n\r\n          // Eğer aşağıdaki hücre boşsa ve yukarıdaki hücre doluysa\r\n          if (belowPiece.isEmpty && !currentPiece.isEmpty) {\r\n            const posA = currentPiece.node.getPosition();\r\n            currentPiece.updatePosition(\r\n              belowPiece.row,\r\n              belowPiece.col\r\n            )\r\n            \r\n            moved = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      await Promise.all(promises);\r\n    } while (moved); \r\n  }\r\n}\r\n"]}