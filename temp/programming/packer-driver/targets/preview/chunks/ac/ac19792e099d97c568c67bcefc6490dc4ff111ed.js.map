{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Interaction/InteractionManager.ts"],"names":["_decorator","Component","tween","MatchChecker","ccclass","property","InteractionManager","grid","selectedPiece","initializeGrid","onPieceClicked","event","piece","pieceA","pieceB","posA","getPosition","posB","setPosition","rowA","findPieceRow","colA","findPieceCol","rowB","colB","checkMatch","console","log","to","position","start","highlightPiece","setScale","clearSelection"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAA6BC,MAAAA,K,OAAAA,K;;AACzCC,MAAAA,Y,iBAAAA,Y;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAYC,QAAAA;AAAZ,O,GAAyBL,U;;oCAGlBM,kB,WADZF,OAAO,CAAC,oBAAD,C,gBAAR,MACaE,kBADb,SACwCL,SADxC,CACkD;AAAA;AAAA;AAAA,eACtCM,IADsC,GACrB,EADqB;AAAA,eAEtCC,aAFsC,GAET,IAFS;AAAA;;AAIvCC,QAAAA,cAAc,CAACF,IAAD,EAAiB;AAClC,eAAKA,IAAL,GAAYA,IAAZ;AACH;;AAEMG,QAAAA,cAAc,CAACC,KAAD,EAAoBC,KAApB,EAAiC;AAClD,cAAI,KAAKJ,aAAT,EAAwB;AACpB,gBAAMK,MAAM,GAAG,KAAKL,aAApB;AACA,gBAAMM,MAAM,GAAGF,KAAf;AAEA,gBAAMG,IAAI,GAAGF,MAAM,CAACG,WAAP,EAAb;AACA,gBAAMC,IAAI,GAAGH,MAAM,CAACE,WAAP,EAAb,CALoB,CAOpB;;AACAH,YAAAA,MAAM,CAACK,WAAP,CAAmBD,IAAnB;AACAH,YAAAA,MAAM,CAACI,WAAP,CAAmBH,IAAnB;AAEA,gBAAMI,IAAI,GAAG,KAAKC,YAAL,CAAkBP,MAAlB,CAAb;AACA,gBAAMQ,IAAI,GAAG,KAAKC,YAAL,CAAkBT,MAAlB,CAAb;AACA,gBAAMU,IAAI,GAAG,KAAKH,YAAL,CAAkBN,MAAlB,CAAb;AACA,gBAAMU,IAAI,GAAG,KAAKF,YAAL,CAAkBR,MAAlB,CAAb;;AAEA,gBAAI,CAAC;AAAA;AAAA,8CAAaW,UAAb,CAAwB,KAAKlB,IAA7B,EAAmCM,MAAnC,EAA2CM,IAA3C,EAAiDE,IAAjD,CAAD,IAA2D,CAAC;AAAA;AAAA,8CAAaI,UAAb,CAAwB,KAAKlB,IAA7B,EAAmCO,MAAnC,EAA2CS,IAA3C,EAAiDC,IAAjD,CAAhE,EAAwH;AACpH;AACAE,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAEAzB,cAAAA,KAAK,CAACW,MAAD,CAAL,CAAce,EAAd,CAAiB,GAAjB,EAAsB;AAAEC,gBAAAA,QAAQ,EAAEd;AAAZ,eAAtB,EAA0Ce,KAA1C;AACA5B,cAAAA,KAAK,CAACY,MAAD,CAAL,CAAcc,EAAd,CAAiB,GAAjB,EAAsB;AAAEC,gBAAAA,QAAQ,EAAEZ;AAAZ,eAAtB,EAA0Ca,KAA1C;AACH,aAND,MAOI,CAEH;;AAED,iBAAKtB,aAAL,GAAqB,IAArB;AACH,WA5BD,MA4BO;AACH,iBAAKA,aAAL,GAAqBI,KAArB;AACA,iBAAKmB,cAAL,CAAoBnB,KAApB;AACH;AACJ;;AAEOQ,QAAAA,YAAY,CAACR,KAAD,EAAsB;AACtC;AACA;AACA,iBAAO,CAAC,CAAR,CAHsC,CAG3B;AACd;;AAEOU,QAAAA,YAAY,CAACV,KAAD,EAAsB;AACtC;AACA;AACA,iBAAO,CAAC,CAAR,CAHsC,CAG3B;AACd;;AAEOmB,QAAAA,cAAc,CAACnB,KAAD,EAAc;AAChCA,UAAAA,KAAK,CAACoB,QAAN,CAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB;AACH;;AAEMC,QAAAA,cAAc,GAAG;AACpB,cAAI,KAAKzB,aAAT,EAAwB;AACpB,iBAAKA,aAAL,CAAmBwB,QAAnB,CAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC;AACA,iBAAKxB,aAAL,GAAqB,IAArB;AACH;AACJ;;AAhE6C,O","sourcesContent":["import { _decorator, Component, EventTouch, Node, tween } from 'cc';\nimport { MatchChecker } from '../Grid/MatchChecker';\nconst { ccclass , property } = _decorator;\n\n@ccclass('InteractionManager')\nexport class InteractionManager extends Component {\n    private grid: Node[][] = [];\n    private selectedPiece: Node | null = null;\n\n    public initializeGrid(grid: Node[][]) {\n        this.grid = grid;\n    }\n\n    public onPieceClicked(event: EventTouch, piece: Node) {\n        if (this.selectedPiece) {\n            const pieceA = this.selectedPiece;\n            const pieceB = piece;\n\n            const posA = pieceA.getPosition();\n            const posB = pieceB.getPosition();\n\n            // Swap positions\n            pieceA.setPosition(posB);\n            pieceB.setPosition(posA);\n\n            const rowA = this.findPieceRow(pieceA);\n            const colA = this.findPieceCol(pieceA);\n            const rowB = this.findPieceRow(pieceB);\n            const colB = this.findPieceCol(pieceB);\n\n            if (!MatchChecker.checkMatch(this.grid, pieceA, rowA, colA) && !MatchChecker.checkMatch(this.grid, pieceB, rowB, colB)) {\n                // Swap back if no match\n                console.log(\"matched?\");\n\n                tween(pieceA).to(0.3, { position: posA }).start();\n                tween(pieceB).to(0.3, { position: posB }).start();\n            }\n            else{\n                \n            }\n\n            this.selectedPiece = null;\n        } else {\n            this.selectedPiece = piece;\n            this.highlightPiece(piece);\n        }\n    }\n\n    private findPieceRow(piece: Node): number {\n        // Implement logic to find the row of the piece in the grid.\n        // Example: return this.grid.findIndex(row => row.includes(piece));\n        return -1; // Placeholder, implement this logic.\n    }\n\n    private findPieceCol(piece: Node): number {\n        // Implement logic to find the column of the piece in the grid.\n        // Example: return this.grid[row].indexOf(piece);\n        return -1; // Placeholder, implement this logic.\n    }\n\n    private highlightPiece(piece: Node) {\n        piece.setScale(1.2, 1.2, 1.2);\n    }\n\n    public clearSelection() {\n        if (this.selectedPiece) {\n            this.selectedPiece.setScale(1, 1, 1);\n            this.selectedPiece = null;\n        }\n    }\n}\n"]}