{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-2d/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Node","PiecesPool","ccclass","property","GridGenerator","start","grid","generateGrid","i","row","j","piece","piecesPool","getPieceFromPool","setPosition","on","EventType","TOUCH_END","onPieceClicked","push","event","clickedPiece","currentTarget","console","log","getPosition"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;;AACvBC,MAAAA,U,iBAAAA,U;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;+BAGjBM,a,WADZF,OAAO,CAAC,eAAD,C,UAEHC,QAAQ;AAAA;AAAA,mC,2BAFb,MACaC,aADb,SACmCL,SADnC,CAC6C;AAAA;AAAA;;AAAA;AAAA;;AAI/BM,QAAAA,KAAK,GAAS;AACpB,cAAMC,IAAI,GAAG,KAAKC,YAAL,EAAb,CADoB,CAEpB;AACH;;AAEOA,QAAAA,YAAY,GAAa;AAC7B,cAAMD,IAAc,GAAG,EAAvB;;AAEA,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,gBAAMC,GAAW,GAAG,EAApB;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,kBAAMC,KAAK,GAAG,KAAKC,UAAL,CAAgBC,gBAAhB,EAAd;AACAF,cAAAA,KAAK,CAACG,WAAN,CAAkBJ,CAAC,GAAG,EAAtB,EAA0BF,CAAC,GAAG,EAA9B,EAFwB,CAIxB;;AACAG,cAAAA,KAAK,CAACI,EAAN,CAASf,IAAI,CAACgB,SAAL,CAAeC,SAAxB,EAAmC,KAAKC,cAAxC,EAAwD,IAAxD;AAEAT,cAAAA,GAAG,CAACU,IAAJ,CAASR,KAAT;AACH;;AACDL,YAAAA,IAAI,CAACa,IAAL,CAAUV,GAAV;AACH;;AAED,iBAAOH,IAAP;AACH;;AAGOY,QAAAA,cAAc,CAACE,KAAD,EAAoB;AACtC,cAAMC,YAAY,GAAGD,KAAK,CAACE,aAA3B;AACAC,UAAAA,OAAO,CAACC,GAAR,iCAA0CH,YAAY,CAACI,WAAb,EAA1C,EAFsC,CAGtC;AACH;;AAlCwC,O;;;;;iBAER,I","sourcesContent":["import { _decorator, Component, Node, Vec3, systemEvent, SystemEventType, EventTouch } from 'cc';\nimport { PiecesPool } from '../Poolable/PiecesPool';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GridGenerator')\nexport class GridGenerator extends Component {\n    @property(PiecesPool)\n    private piecesPool: PiecesPool = null;\n\n    protected start(): void {\n        const grid = this.generateGrid();\n        // Further grid management tasks can be handled here.\n    }\n\n    private generateGrid(): Node[][] {\n        const grid: Node[][] = [];\n\n        for (let i = 0; i < 5; i++) {\n            const row: Node[] = [];\n            for (let j = 0; j < 5; j++) {\n                const piece = this.piecesPool.getPieceFromPool();\n                piece.setPosition(j * 50, i * 50);\n                \n                // Add click event listener\n                piece.on(Node.EventType.TOUCH_END, this.onPieceClicked, this);\n\n                row.push(piece);\n            }\n            grid.push(row);\n        }\n\n        return grid;\n    }\n\n\n    private onPieceClicked(event: EventTouch) {\n        const clickedPiece = event.currentTarget as Node;\n        console.log(`Piece clicked at position: ${clickedPiece.getPosition()}`);\n        // Implement what happens when a piece is clicked.\n    }\n}\n"]}