{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Node","Vec3","CCInteger","PiecesPool","EffectManager","InteractionManager","ccclass","property","GridGenerator","gridMap","Map","grid","PIECE_CONTENT_SIZE","interactionManager","start","node","setPosition","generateGrid","row","GRID_ROW","piecesInRow","col","piece","createPiece","set","pieceLastPosition","getCenteredPosition","pieceFirstPosition","x","on","EventType","TOUCH_START","event","onPieceClicked","pieceProps","targetPosition","push","animateRowFall","piecesPool","getPieceFromPool","setParent","createsMatch","addChild","name","returnPieceToPool","j","i","_j","PIECE_OFFSET","_i"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Component,\n  Node,\n  Vec3,\n  systemEvent,\n  SystemEventType,\n  EventTouch,\n  Vec2,\n  CCInteger,\n} from \"cc\";\nimport { PiecesPool } from \"../Poolable/PiecesPool\";\nimport { EffectManager } from \"../Effects/EffectManager\";\nimport { InteractionManager } from \"../Interaction/InteractionManager\";\nconst { ccclass, property } = _decorator;\n\ntype PieceProps = {\n  piece: Node;\n  targetPosition: Vec3;\n};\n\n@ccclass(\"GridGenerator\")\nexport class GridGenerator extends Component {\n  private gridMap: Map<Node, { row: number; col: number }> = new Map();\n  private grid: Node[][] = [];\n\n  @property(PiecesPool)\n  private piecesPool: PiecesPool = null;\n\n  @property(CCInteger)\n  private PIECE_OFFSET: number = 5;\n\n  @property(CCInteger)\n  GRID_ROW: number = 0;\n\n  private PIECE_CONTENT_SIZE: number = 100; //dinamikleştir\n\n  private interactionManager: InteractionManager = new InteractionManager();\n\n  protected start(): void {\n    //!TODO: grid yerleşmesini ve content size'ı responsive yapmalıyız\n    this.node.setPosition(-450, -450);\n    this.generateGrid();\n  }\n\n  private async generateGrid() {\n    for (let row = 0; row < this.GRID_ROW; row++) {\n      this.grid[row] = [];\n      const piecesInRow: PieceProps[] = [];\n\n      for (let col = 0; col < this.GRID_ROW; col++) {\n        const piece: Node = this.createPiece(row, col);\n        this.gridMap.set(piece, { row, col });\n        this.grid[row][col] = piece;\n        const pieceLastPosition = this.getCenteredPosition(col, row);\n        const pieceFirstPosition = new Vec3(\n          pieceLastPosition.x,\n          this.GRID_ROW * this.PIECE_CONTENT_SIZE\n        );\n        piece.setPosition(pieceFirstPosition);\n        //piecelere event listener ekliyoruz\n        // piece.on(Node.EventType.TOUCH_START, this.onPieceClicked, this);\n        piece.on(Node.EventType.TOUCH_START, (event: EventTouch) => {\n          this.interactionManager.onPieceClicked(event, piece);\n        });\n        this.grid[row][col] = piece;\n\n        const pieceProps: PieceProps = {\n          piece: piece,\n          targetPosition: pieceLastPosition,\n        };\n        piecesInRow.push(pieceProps);\n      }\n      await EffectManager.animateRowFall(piecesInRow, 0.1);\n    }\n  }\n\n  private createPiece(row: number, col: number): Node {\n    let piece: Node;\n    do {\n      piece = this.piecesPool.getPieceFromPool();\n      piece.setParent(this.node);\n    } while (this.createsMatch(piece, row, col, this.grid));\n    piece.setPosition(this.getCenteredPosition(col, row));\n    this.node.addChild(piece);\n    return piece;\n  }\n\n  private createsMatch(\n    piece: Node,\n    row: number,\n    col: number,\n    grid: Node[][]\n  ): boolean {\n    if (\n      row >= 2 &&\n      grid[row - 1][col]?.name === piece.name &&\n      grid[row - 2][col]?.name === piece.name\n    ) {\n      this.piecesPool.returnPieceToPool(piece);\n      return true;\n    }\n\n    if (\n      col >= 2 &&\n      grid[row][col - 1]?.name === piece.name &&\n      grid[row][col - 2]?.name === piece.name\n    ) {\n      this.piecesPool.returnPieceToPool(piece);\n      return true;\n    }\n    return false;\n  }\n\n  private getCenteredPosition(j: number, i: number): Vec3 {\n    //EVERY game board should be square matrix\n    const _j = j * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\n    const _i = i * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\n    return new Vec3(_j, _i);\n  }\n}\n"]}