{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Vec3","CCInteger","Piece","PieceTypes","PiecePool","ccclass","property","GridGenerator","grid","PIECE_OFFSET","PIECE_CONTENT_SIZE","Generate","row","width","col","height","piece","createPiece","pieceNode","getInstance","getPiece","console","error","Normal","node","setParent","addChild","setPosition","getCenteredPosition","createsMatch","createsMatchByName","isMatch","name","returnPiece","j","i","_j","_i"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, CCInteger } from \"cc\";\r\nimport { Piece } from \"../Piece/Piece\";\r\nimport { InteractionManager } from \"../Interaction/InteractionManager\";\r\nimport { PieceTypes } from \"../Piece/PieceTypes\";\r\nimport { PiecePool } from \"../Piece/PiecePool\";\r\nimport { SelectionManager } from \"../Interaction/SelectionManager\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"GridGenerator\")\r\nexport class GridGenerator extends Component {\r\n  public grid: Piece[][] = [];\r\n\r\n  public PIECE_OFFSET: number = 5;\r\n\r\n  @property(CCInteger)\r\n  public width: number = 0;\r\n\r\n  @property(CCInteger)\r\n  private height: number = 0;\r\n\r\n  private PIECE_CONTENT_SIZE: number = 100; //dinamikle≈ütir\r\n\r\n\r\n  //! todo rowlari tweenleyebiliriz\r\n  public Generate() : Piece[][] {\r\n    for (let row = 0; row < this.width; row++) {\r\n      this.grid[row] = [];\r\n      for (let col = 0; col < this.height; col++) {\r\n        const piece = this.createPiece(row, col);\r\n        this.grid[row][col] = piece;\r\n      }\r\n    }\r\n    return this.grid;\r\n  }\r\n  private createPiece(row: number, col: number): Piece {\r\n    let pieceNode: Node | null;\r\n    let piece: Piece | null;\r\n    do {\r\n        pieceNode = PiecePool.getInstance().getPiece();\r\n        \r\n        if (!pieceNode) {\r\n            console.error(\"Piece could not be instantiated.\");\r\n            continue;\r\n        }\r\n        piece = new Piece(row, col, pieceNode, PieceTypes.Normal);\r\n        piece.node.setParent(this.node);\r\n        this.node.addChild(piece.node);\r\n        piece.node.setPosition(this.getCenteredPosition(col, row));\r\n\r\n    } while (this.createsMatch(piece, row, col, this.grid));\r\n\r\n    return piece!;\r\n}\r\n\r\nprivate createsMatchByName(\r\n  piece: Piece,\r\n  row: number,\r\n  col: number,\r\n  grid: Piece[][]\r\n): boolean {\r\n  let isMatch = false;\r\n  if (\r\n      row >= 2 &&\r\n      grid[row - 1][col]?.node.name === piece.node.name &&\r\n      grid[row - 2][col]?.node.name === piece.node.name\r\n  ) {\r\n      isMatch = true;\r\n  }\r\n\r\n  if (\r\n      col >= 2 &&\r\n      grid[row][col - 1]?.node.name === piece.node.name &&\r\n      grid[row][col - 2]?.node.name === piece.node.name\r\n  ) {\r\n      isMatch = true;\r\n  }\r\n  if(isMatch) PiecePool.getInstance().returnPiece(piece.node);\r\n  return isMatch;\r\n}\r\n\r\nprivate createsMatch(\r\n  piece: Piece,\r\n  row: number,\r\n  col: number,\r\n  grid: Piece[][]\r\n): boolean {\r\n  return this.createsMatchByName(piece, row, col, grid);\r\n}\r\n\r\n  private getCenteredPosition(j: number, i: number): Vec3 {\r\n    //EVERY game board should be square matrix\r\n    const _j = j * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\r\n    const _i = i * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\r\n    return new Vec3(_j, _i);\r\n  }\r\n}\r\n"]}