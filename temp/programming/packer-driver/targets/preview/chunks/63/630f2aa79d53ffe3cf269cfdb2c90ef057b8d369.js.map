{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Vec3","SingletonComponent","GridGenerator","ccclass","property","GridManager","grid","gridGenerator","gridWidth","gridOffset","onLoad","start","node","getComponent","Generate","width","PIECE_OFFSET","offsetDiff","piecePositionsDiff","console","log","gridX","setPosition","SwapPieces","pieceA","pieceB","tempPieceA","tempPieceB","row","col"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAmCC,MAAAA,I,OAAAA,I;;AACnCC,MAAAA,kB,iBAAAA,kB;;AAEAC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;6BAGjBM,W,WADZF,OAAO,CAAC,aAAD,C,gBAAR,MACaE,WADb;AAAA;AAAA,oDACiE;AAAA;AAAA;AAAA,eACxDC,IADwD;AAAA,eAGvDC,aAHuD,GAGxB,IAHwB;AAAA,eAKvDC,SALuD,GAKnC,CALmC;AAAA,eAMvDC,UANuD,GAMlC,CANkC;AAAA;;AAQrDC,QAAAA,MAAM,GAAS;AACvB,gBAAMA,MAAN;AACD;;AAEDC,QAAAA,KAAK,GAAG;AACN,eAAKJ,aAAL,GAAqB,KAAKK,IAAL,CAAUC,YAAV;AAAA;AAAA,6CAArB;AACA,eAAKP,IAAL,GAAY,KAAKC,aAAL,CAAmBO,QAAnB,EAAZ;AACA,eAAKN,SAAL,GAAiB,KAAKD,aAAL,CAAmBQ,KAApC;AACA,eAAKN,UAAL,GAAkB,KAAKF,aAAL,CAAmBS,YAArC,CAJM,CAKN;;AACA,cAAMC,UAAU,GAAI,KAAKR,UAAL,GAAkB,CAAnB,GAAwB,KAAKD,SAAhD;AACA,cAAMU,kBAAkB,GAAG,EAAE,KAAKV,SAAL,GAAiB,CAAnB,IAAwB,GAAnD;AACAW,UAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ,EAAwBC,kBAAxB;AAEA,cAAMG,KAAK,GAAGH,kBAAkB,GAAGD,UAAnC;AACA,eAAKL,IAAL,CAAUU,WAAV,CAAsB,IAAItB,IAAJ,CAASqB,KAAT,EAAgB,CAAC,GAAjB,EAAsB,CAAtB,CAAtB;AACD;;AAEDE,QAAAA,UAAU,CAACC,MAAD,EAAkBC,MAAlB,EAA+B;AACvC,cAAMC,UAAU,GAAGF,MAAnB;AACA,cAAMG,UAAU,GAAGF,MAAnB;AAEAC,UAAAA,UAAU,CAACE,GAAX,GAAiBH,MAAM,CAACG,GAAxB;AACAF,UAAAA,UAAU,CAACG,GAAX,GAAiBJ,MAAM,CAACI,GAAxB;AAEAF,UAAAA,UAAU,CAACC,GAAX,GAAiBJ,MAAM,CAACI,GAAxB;AACAD,UAAAA,UAAU,CAACE,GAAX,GAAiBL,MAAM,CAACK,GAAxB;AAGA,eAAKvB,IAAL,CAAUkB,MAAM,CAACI,GAAjB,EAAsBJ,MAAM,CAACK,GAA7B,IAAoC,IAApC;AACA,eAAKvB,IAAL,CAAUmB,MAAM,CAACG,GAAjB,EAAsBH,MAAM,CAACI,GAA7B,IAAoC,IAApC;AAEA,eAAKvB,IAAL,CAAUoB,UAAU,CAACE,GAArB,EAA0BF,UAAU,CAACG,GAArC,IAA4CF,UAA5C;AACA,eAAKrB,IAAL,CAAUqB,UAAU,CAACC,GAArB,EAA0BD,UAAU,CAACE,GAArC,IAA4CH,UAA5C;AAEAP,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,IAAjB;AACD;;AA5C8D,O,eA+CjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { _decorator, Component, Node, Vec2, Vec3 } from 'cc';\nimport { SingletonComponent } from '../SingletonComponent';\nimport { Piece } from '../Piece/Piece';\nimport { GridGenerator } from './GridGenerator';\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridManager\")\nexport class GridManager extends SingletonComponent<GridManager> {\n  public grid: Piece[][];\n\n  private gridGenerator: GridGenerator = null;\n\n  private gridWidth: number = 0;\n  private gridOffset: number = 0;\n\n  protected onLoad(): void {\n    super.onLoad();\n  }\n\n  start() {\n    this.gridGenerator = this.node.getComponent(GridGenerator);\n    this.grid = this.gridGenerator.Generate();\n    this.gridWidth = this.gridGenerator.width;\n    this.gridOffset = this.gridGenerator.PIECE_OFFSET;\n    //! dinamik olmalı\n    const offsetDiff = (this.gridOffset / 2) * this.gridWidth;\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\n    console.log(offsetDiff, piecePositionsDiff);\n\n    const gridX = piecePositionsDiff + offsetDiff;\n    this.node.setPosition(new Vec3(gridX, -200, 0));\n  }\n\n  SwapPieces(pieceA : Piece , pieceB:Piece){\n    const tempPieceA = pieceA;\n    const tempPieceB = pieceB;\n\n    tempPieceA.row = pieceB.row;\n    tempPieceA.col = pieceB.col\n\n    tempPieceB.row = pieceA.row;\n    tempPieceB.col = pieceA.col\n\n    \n    this.grid[pieceA.row][pieceA.col] = null;\n    this.grid[pieceB.row][pieceB.col] = null;\n\n    this.grid[tempPieceA.row][tempPieceA.col] = tempPieceB;\n    this.grid[tempPieceB.row][tempPieceB.col] = tempPieceA;\n\n    console.log(this.grid);\n  }\n}\n\n// async swapPieces(piece1: Piece, piece2: Piece,piece1Pos:Vec3,piece2Pos:Vec3) {\n//     console.log(\"Swap pieces:\",piece1,piece2)\n//       // Pozisyonları değiştir\n//       // const tempPosition = piece1.node.position.clone();\n//       //piece1.node.position = piece2.node.position;\n//       // piece2.node.position = tempPosition;\n//       EffectManager.movePiece(piece1.node,piece2Pos,0.1);\n//       await EffectManager.movePiece(piece2.node,piece1Pos,0.1);\n    \n  \n  \n//       // Satır ve sütun değerlerini değiştir\n//       const tempRow = piece1.row;\n//       const tempCol = piece1.col;\n//       piece1.row = piece2.row;\n//       piece1.col = piece2.col;\n//       piece2.row = tempRow;\n//       piece2.col = tempCol;\n  \n  \n//      /* // Type'ları değiştir\n//       const tempType = piece1.type;\n//       piece1.type = piece2.type;\n//       piece2.type = tempType;*/\n  \n//       // Grid'deki referansları güncelle\n//       this.gridGenerator.grid[piece1.row][piece1.col] = piece1;\n//       this.gridGenerator.grid[piece2.row][piece2.col] = piece2;\n//   }"]}