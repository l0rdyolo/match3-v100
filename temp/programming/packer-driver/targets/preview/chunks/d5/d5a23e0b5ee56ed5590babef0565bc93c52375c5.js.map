{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","GridManager","ccclass","property","GravityHandler","applyGravity","matches","columnPieceCount","Map","piece","col","has","set","get","applyGravityToCol","count","console","log","highestRow","getInstance","gridHeight","i","gridManager","grid","includes","newRow","row","updatePosition"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AAEZC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;gCAGjBK,c,WADZF,OAAO,CAAC,gBAAD,C,UAGHC,QAAQ;AAAA;AAAA,qC,2BAHb,MACaC,cADb,SACoCJ,SADpC,CAC8C;AAAA;AAAA;;AAAA;AAAA;;AAK1CK,QAAAA,YAAY,CAACC,OAAD,EAAmB;AAC3B,cAAMC,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB;;AAEA,eAAK,IAAMC,KAAX,IAAoBH,OAApB,EAA6B;AACzB,gBAAMI,GAAG,GAAGD,KAAK,CAACC,GAAlB;;AACA,gBAAIH,gBAAgB,CAACI,GAAjB,CAAqBD,GAArB,CAAJ,EAA+B;AAC3BH,cAAAA,gBAAgB,CAACK,GAAjB,CAAqBF,GAArB,EAA0BH,gBAAgB,CAACM,GAAjB,CAAqBH,GAArB,IAA4B,CAAtD;AACH,aAFD,MAEO;AACHH,cAAAA,gBAAgB,CAACK,GAAjB,CAAqBF,GAArB,EAA0B,CAA1B;AACH;AACJ;;AAED,eAAKI,iBAAL,CAAuBP,gBAAvB,EAAwCD,OAAxC;AACH;;AAEDQ,QAAAA,iBAAiB,CAACP,gBAAD,EAAuCD,OAAvC,EAAgD;AAC7D,eAAK,IAAM,CAACI,GAAD,EAAMK,KAAN,CAAX,IAA2BR,gBAA3B,EAA6C;AACzCS,YAAAA,OAAO,CAACC,GAAR,CAAeP,GAAf,qBAA+BK,KAA/B;AACAC,YAAAA,OAAO,CAACC,GAAR,GAFyC,CAIzC;;AACA,gBAAIC,UAAU,GAAG;AAAA;AAAA,4CAAYC,WAAZ,GAA0BC,UAA1B,GAAuC,CAAxD,CALyC,CAOzC;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG;AAAA;AAAA,4CAAYF,WAAZ,GAA0BC,UAA9C,EAA0DC,CAAC,EAA3D,EAA+D;AAC3D,kBAAMZ,KAAK,GAAG,KAAKa,WAAL,CAAiBC,IAAjB,CAAsBF,CAAtB,EAAyBX,GAAzB,CAAd;;AACA,kBAAID,KAAK,IAAIH,OAAO,CAACkB,QAAR,CAAiBf,KAAjB,CAAb,EAAsC;AAClCS,gBAAAA,UAAU,GAAGG,CAAC,GAAG,CAAjB;AACA;AACH;AACJ,aAdwC,CAgBzC;;;AACA,iBAAK,IAAIA,EAAC,GAAGH,UAAb,EAAyBG,EAAC,IAAI,CAA9B,EAAiCA,EAAC,EAAlC,EAAsC;AAClC,kBAAMZ,MAAK,GAAG,KAAKa,WAAL,CAAiBC,IAAjB,CAAsBF,EAAtB,EAAyBX,GAAzB,CAAd;;AACA,kBAAID,MAAJ,EAAW;AACP,oBAAMgB,MAAM,GAAGJ,EAAC,GAAGN,KAAnB;;AAEA,oBAAIU,MAAM,GAAG;AAAA;AAAA,gDAAYN,WAAZ,GAA0BC,UAAvC,EAAmD;AAC/C;AACA,uBAAKE,WAAL,CAAiBC,IAAjB,CAAsBE,MAAtB,EAA8Bf,GAA9B,IAAqCD,MAArC;AACAA,kBAAAA,MAAK,CAACiB,GAAN,GAAYD,MAAZ;;AACAhB,kBAAAA,MAAK,CAACkB,cAAN,GAJ+C,CAM/C;;;AACA,uBAAKL,WAAL,CAAiBC,IAAjB,CAAsBF,EAAtB,EAAyBX,GAAzB,IAAgC,IAAhC;AACH;AACJ;AACJ;AACJ;AACJ;;AAvDyC,O;;;;;iBAGP,I","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nimport { Piece } from '../Piece/Piece';\nimport { GridManager } from '../Grid/GridManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GravityHandler')\nexport class GravityHandler extends Component {\n\n    @property(GridManager)\n    private gridManager: GridManager = null;\n\n    applyGravity(matches: Piece[]) {\n        const columnPieceCount = new Map<number, number>();\n\n        for (const piece of matches) {\n            const col = piece.col;\n            if (columnPieceCount.has(col)) {\n                columnPieceCount.set(col, columnPieceCount.get(col) + 1);\n            } else {\n                columnPieceCount.set(col, 1);\n            }\n        }\n\n        this.applyGravityToCol(columnPieceCount,matches);\n    }\n\n    applyGravityToCol(columnPieceCount: Map<number, number>,matches) {\n        for (const [col, count] of columnPieceCount) {\n            console.log(`${col} sütununu ${count} birim aşağı indirin.`);\n            console.log();\n            \n            // Bu sütundaki en yüksek satırı bul (matched row'lar)\n            let highestRow = GridManager.getInstance().gridHeight - 1;\n    \n            // Aşağıya indirilecek parçaları bulun\n            for (let i = 0; i < GridManager.getInstance().gridHeight; i++) {\n                const piece = this.gridManager.grid[i][col];\n                if (piece && matches.includes(piece)) {\n                    highestRow = i - 1;\n                    break;\n                }\n            }\n    \n            // Sütundaki parçaları aşağıya indir\n            for (let i = highestRow; i >= 0; i--) {\n                const piece = this.gridManager.grid[i][col];\n                if (piece) {\n                    const newRow = i + count;\n    \n                    if (newRow < GridManager.getInstance().gridHeight) {\n                        // Parçayı yeni pozisyona taşı\n                        this.gridManager.grid[newRow][col] = piece;\n                        piece.row = newRow;\n                        piece.updatePosition();\n    \n                        // Eski pozisyonu boşalt\n                        this.gridManager.grid[i][col] = null;\n                    }\n                }\n            }\n        }\n    }\n    }\n"]}