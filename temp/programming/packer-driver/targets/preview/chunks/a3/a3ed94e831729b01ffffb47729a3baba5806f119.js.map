{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Piece/Piece.ts"],"names":["Piece","Node","ParticleSystem2D","tween","Vec3","SelectionManager","GameGlobal","constructor","row","col","node","type","canSelect","m_isEmpty","particle","spriteNode","on","EventType","TOUCH_START","onTouch","getComponentInChildren","getChildByName","init","setPosition","isEmpty","getInstance","eventTarget","emit","_row","_col","PIECE_CONTENT_SIZE","PIECE_OFFSET","piecePostion","updatePosition","newX","newY","matched","resetSystem","playOnLoad","Promise","resolve","to","scale","call","start","Shake","shakeAmount","duration","originalPosition","getPosition","by","position","delete","setSelection","Highlight","cancelSelection","ResetScale","easing","moveToPosition","newPos","startPos","clone","targetPos","x","y","z","onUpdate","target","ratio","currentPos","lerp","assingPiece","console","log"],"mappings":"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","sourcesContent":["import { easing, Node, ParticleSystem2D, removeProperty, SpriteRenderer, tween, Vec3 } from \"cc\";\nimport { IPiece } from \"./IPiece\";\nimport { PieceTypes } from \"./PieceTypes\";\nimport { SelectionManager } from \"../Interaction/SelectionManager\";\nimport { GameGlobal } from \"../Game/GameGlobal\";\n\nexport class Piece implements IPiece {\n  public canSelect: boolean;\n  public row: number = -1!;\n  public col: number = -1!;\n  public node: Node;\n  public type: PieceTypes = null;\n\n  private m_isEmpty = false;\n  private particle: ParticleSystem2D = null;\n  private spriteNode: Node = null;\n  public constructor(row: number, col: number, node: Node, type: PieceTypes) {\n    this.row = row;\n    this.col = col;\n    this.node = node;\n    this.type = type;\n    this.node.on(Node.EventType.TOUCH_START, this.onTouch, this);\n    this.m_isEmpty = false;\n    this.particle = this.node.getComponentInChildren(ParticleSystem2D);\n    this.spriteNode = this.node.getChildByName(\"Sprite\");\n  }\n\n  init(){\n    this.setPosition(this.row,this.col);\n  }\n\n\n  onTouch() {\n    if(this.isEmpty) return; \n    SelectionManager.getInstance().eventTarget.emit(\"piece-selected\", this);\n  }\n\n  public get isEmpty() : boolean{\n    const m_isEmpty = this.node ? true : false;\n    return m_isEmpty \n  }\n\n  setPosition(_row: number, _col: number) {\n    const row =\n      _row * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET);\n    const col =\n      _col * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET);\n    const piecePostion = new Vec3(col, row);\n    this.node.setPosition(piecePostion);\n  }\n\n  updatePosition(row = this.row , col = this.col) {\n    this.canSelect = false;\n    const newX = row //* GameGlobal.PIECE_CONTENT_SIZE;\n    const newY = col //* GameGlobal.PIECE_CONTENT_SIZE;\n    this.setPosition(newX,newY);\n  }\n\n  async matched(): Promise<void> {\n    if (this.particle) {\n      this.particle.resetSystem();\n      this.particle.playOnLoad = true;\n    }\n\n    if (this.spriteNode) {\n      await new Promise<void>((resolve) => {\n        tween(this.spriteNode)\n          .to(0.2, { scale: new Vec3(0, 0, 0) })\n          .call(resolve) \n          .start();\n      });\n    }\n\n    this.canSelect = false;\n  }\n\n  public async Shake(shakeAmount: number = 10, duration: number = 0.3) {\n    if (!this.canSelect) return;\n    const originalPosition = this.node?.getPosition();\n\n    return new Promise<void>((resolve) => {\n      if (this.node) {\n        tween(this.node)\n          .by(duration / 4, { position: new Vec3(shakeAmount, 0, 0) })\n          .by(duration / 4, { position: new Vec3(-shakeAmount * 2, 0, 0) })\n          .by(duration / 4, { position: new Vec3(shakeAmount * 2, 0, 0) })\n          .by(duration / 4, { position: new Vec3(-shakeAmount, 0, 0) })\n          .call(() => {\n            this.node?.setPosition(originalPosition);\n            resolve();\n          })\n          .start();\n      }\n    });\n  }\n\n  public delete(){\n    //! burada pool'a döndürülmeli şimdilik poolda 500 üretiliyor ama buna gerek olmayabilir.\n    this.node = null;\n    this.canSelect = false;\n  }\n\n  public setSelection(): Piece {\n    this.Highlight();\n    return this;\n  }\n\n  public cancelSelection() {\n    this.ResetScale();\n    return null;\n  }\n\n  public Highlight(duration : number = 0.1 , scale : Vec3 = new Vec3(1.1, 1.1, 1.1)) {\n    tween(this.node)\n      .to(duration, { scale: scale } , { easing: 'expoOut' } )\n      .start();\n  }\n\n  public ResetScale(duration: number = 0.1) {\n    if (!this.canSelect) return;\n    tween(this.node)\n      .to(duration, { scale: new Vec3(1, 1, 1) })\n      .start();\n  }\n\n  public moveToPosition(newPos: Vec3, duration: number = 0.2): Promise<void> {\n    return new Promise<void>((resolve) => {\n        const startPos = this.node.position.clone();\n        const targetPos = new Vec3(\n            newPos.x * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET),\n            newPos.y * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET),\n            newPos.z\n        );\n\n        this.canSelect = false;\n\n        tween(this.node)\n            .to(duration, { position: targetPos }, {\n                easing: 'quartOut',\n                onUpdate: (target: Node, ratio: number) => {\n                    const currentPos = new Vec3();\n                    Vec3.lerp(currentPos, startPos, targetPos, ratio);\n                    target.setPosition(currentPos);\n                }\n            })\n            .call(() => {\n                this.row = newPos.y;\n                this.col = newPos.x;\n                this.canSelect = true;\n                resolve();\n            })\n            .start();\n    });\n  }\n\n  public assingPiece(node : Node , row : number , col : number){\n    console.log(node,row, col);\n  }\n\n}\n"]}