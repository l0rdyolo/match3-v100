{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","ccclass","property","GravityHandler","onLoad","applyGravity","grid","moved","promises","emptyPieceMap","Map","col","length","row","currentPiece","belowPiece","isEmpty","key","set","push","updatePosition","node","delete","Promise","all","console","log","size"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;;;;;;;;OAEf;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;gCAGjBI,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCH,SADpC,CAC8C;AAC5CI,QAAAA,MAAM,GAAG;AACP,gBAAMA,MAAN;AACD;;AAEKC,QAAAA,YAAY,CAACC,IAAD,EAAO;AAAA;AACvB,gBAAIC,KAAK,GAAG,KAAZ;AACA,gBAAIC,QAAyB,GAAG,EAAhC;AACA,gBAAIC,aAAa,GAAG,IAAIC,GAAJ,EAApB;;AAEA,eAAG;AACDH,cAAAA,KAAK,GAAG,KAAR;;AAEA,mBAAK,IAAII,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAhC,EAAwCD,GAAG,EAA3C,EAA+C;AAC7C,qBAAK,IAAIE,GAAG,GAAGP,IAAI,CAACM,MAAL,GAAc,CAA7B,EAAgCC,GAAG,IAAI,CAAvC,EAA0CA,GAAG,EAA7C,EAAiD;AAC/C,sBAAMC,YAAY,GAAGR,IAAI,CAACO,GAAD,CAAJ,CAAUF,GAAV,CAArB;AACA,sBAAMI,UAAU,GAAGT,IAAI,CAACO,GAAG,GAAG,CAAP,CAAJ,CAAcF,GAAd,CAAnB,CAF+C,CAI/C;;AACA,sBAAII,UAAU,CAACC,OAAX,IAAsB,CAACF,YAAY,CAACE,OAAxC,EAAiD;AAC/C,wBAAMC,GAAG,GAAMF,UAAU,CAACF,GAAjB,SAAwBE,UAAU,CAACJ,GAA5C;AACAF,oBAAAA,aAAa,CAACS,GAAd,CAAkBD,GAAlB,EAAuBF,UAAvB,EAF+C,CAI/C;;AACAP,oBAAAA,QAAQ,CAACW,IAAT,CAAcL,YAAY,CAACM,cAAb,CAA4BL,UAAU,CAACF,GAAvC,EAA4CE,UAAU,CAACJ,GAAvD,CAAd,EAL+C,CAO/C;;AACAI,oBAAAA,UAAU,CAACM,IAAX,GAAkBP,YAAY,CAACO,IAA/B;AACAP,oBAAAA,YAAY,CAACO,IAAb,GAAoB,IAApB;AAEAd,oBAAAA,KAAK,GAAG,IAAR;AACD,mBAZD,MAYO,IAAI,CAACQ,UAAU,CAACC,OAAhB,EAAyB;AAC9B;AACA,wBAAMC,IAAG,GAAMF,UAAU,CAACF,GAAjB,SAAwBE,UAAU,CAACJ,GAA5C;;AACAF,oBAAAA,aAAa,CAACa,MAAd,CAAqBL,IAArB;AACD;AACF;AACF;;AAED,oBAAMM,OAAO,CAACC,GAAR,CAAYhB,QAAZ,CAAN;AACD,aA9BD,QA8BSD,KA9BT,EALuB,CAqCvB;;;AACAkB,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BjB,aAAa,CAACkB,IAA1C,EAAgDlB,aAAhD;AAtCuB;AAuCxB;;AA5C2C,O","sourcesContent":["import { _decorator, Component, Vec3 } from \"cc\";\r\nimport { Piece } from \"../Piece/Piece\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"GravityHandler\")\r\nexport class GravityHandler extends Component {\r\n  onLoad() {\r\n    super.onLoad();\r\n  }\r\n\r\n  async applyGravity(grid) {\r\n    let moved = false;\r\n    let promises: Promise<void>[] = [];\r\n    let emptyPieceMap = new Map<string, Piece>();\r\n\r\n    do {\r\n      moved = false;\r\n\r\n      for (let col = 0; col < grid[0].length; col++) {\r\n        for (let row = grid.length - 1; row >= 1; row--) {\r\n          const currentPiece = grid[row][col];\r\n          const belowPiece = grid[row - 1][col];\r\n\r\n          // Eğer aşağıdaki hücre boşsa ve yukarıdaki doluysa\r\n          if (belowPiece.isEmpty && !currentPiece.isEmpty) {\r\n            const key = `${belowPiece.row},${belowPiece.col}`;\r\n            emptyPieceMap.set(key, belowPiece);\r\n\r\n            // Parçayı yeni pozisyona taşı\r\n            promises.push(currentPiece.updatePosition(belowPiece.row, belowPiece.col));\r\n\r\n            // Node'ları yer değiştir\r\n            belowPiece.node = currentPiece.node;\r\n            currentPiece.node = null;\r\n\r\n            moved = true;\r\n          } else if (!belowPiece.isEmpty) {\r\n            // Eğer aşağıdaki hücre dolu olduysa, boş map'ten kaldır\r\n            const key = `${belowPiece.row},${belowPiece.col}`;\r\n            emptyPieceMap.delete(key);\r\n          }\r\n        }\r\n      }\r\n\r\n      await Promise.all(promises);\r\n    } while (moved);\r\n\r\n    // Geriye kalan boş alanların sayısını ve konumlarını görmek için:\r\n    console.log(\"Boş alanlar:\", emptyPieceMap.size, emptyPieceMap);\r\n  }\r\n}\r\n"]}