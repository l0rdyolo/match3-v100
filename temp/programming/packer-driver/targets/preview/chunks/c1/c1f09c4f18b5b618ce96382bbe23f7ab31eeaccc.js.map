{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Joystick/TouchEvents.ts"],"names":["TouchEvents","constructor","node","handlers","Map","register","eventTypeOrEvents","handler","Array","isArray","eventType","set","on","unregister","get","off","delete","registerAll","unregisterAll","clear"],"mappings":";;;kEAEaA,W;;;;;;;;;;;;;;;;;6BAAAA,W,GAAN,MAAMA,WAAN,CAAkB;AAGrBC,QAAAA,WAAW,CAAkBC,IAAlB,EAA8B;AAAA,eAFxBC,QAEwB,GAFoC,IAAIC,GAAJ,EAEpC;AAAA,eAAZF,IAAY,GAAZA,IAAY;AAAG;;AAErCG,QAAAA,QAAQ,CAACC,iBAAD,EAAyFC,OAAzF,EAAgI;AAC3I,cAAIC,KAAK,CAACC,OAAN,CAAcH,iBAAd,CAAJ,EAAsC;AAClC,iBAAK,IAAM,CAACI,SAAD,EAAYH,QAAZ,CAAX,IAAmCD,iBAAnC,EAAsD;AAClD,mBAAKH,QAAL,CAAcQ,GAAd,CAAkBD,SAAlB,EAA6BH,QAA7B;AACA,mBAAKL,IAAL,CAAUU,EAAV,CAAaF,SAAb,EAAwBH,QAAxB,EAAiC,IAAjC;AACH;AACJ,WALD,MAKO;AACH,iBAAKJ,QAAL,CAAcQ,GAAd,CAAkBL,iBAAlB,EAAqCC,OAArC;AACA,iBAAKL,IAAL,CAAUU,EAAV,CAAaN,iBAAb,EAAgCC,OAAhC,EAAyC,IAAzC;AACH;AACJ;;AAEMM,QAAAA,UAAU,CAACH,SAAD,EAA2B;AACxC,cAAMH,OAAO,GAAG,KAAKJ,QAAL,CAAcW,GAAd,CAAkBJ,SAAlB,CAAhB;;AACA,cAAIH,OAAJ,EAAa;AACT,iBAAKL,IAAL,CAAUa,GAAV,CAAcL,SAAd,EAAyBH,OAAzB,EAAkC,IAAlC;AACA,iBAAKJ,QAAL,CAAca,MAAd,CAAqBN,SAArB;AACH;AACJ;;AAEMO,QAAAA,WAAW,GAAG;AACjB,eAAK,IAAM,CAACP,SAAD,EAAYH,OAAZ,CAAX,IAAmC,KAAKJ,QAAxC,EAAkD;AAC9C,iBAAKD,IAAL,CAAUU,EAAV,CAAaF,SAAb,EAAwBH,OAAxB,EAAiC,IAAjC;AACH;AACJ;;AAEMW,QAAAA,aAAa,GAAG;AACnB,eAAK,IAAM,CAACR,SAAD,EAAYH,OAAZ,CAAX,IAAmC,KAAKJ,QAAxC,EAAkD;AAC9C,iBAAKD,IAAL,CAAUa,GAAV,CAAcL,SAAd,EAAyBH,OAAzB,EAAkC,IAAlC;AACH;;AACD,eAAKJ,QAAL,CAAcgB,KAAd;AACH;;AApCoB,O","sourcesContent":["import { NodeEventType, EventTouch, Node } from \"cc\";\n\nexport class TouchEvents {\n    private readonly handlers: Map<NodeEventType, (event: EventTouch) => void> = new Map();\n\n    constructor(private readonly node: Node) { }\n\n    public register(eventTypeOrEvents: NodeEventType | Array<[NodeEventType, (event: EventTouch) => void]>, handler?: (event: EventTouch) => void) {\n        if (Array.isArray(eventTypeOrEvents)) {\n            for (const [eventType, handler] of eventTypeOrEvents) {\n                this.handlers.set(eventType, handler);\n                this.node.on(eventType, handler, this);\n            }\n        } else {\n            this.handlers.set(eventTypeOrEvents, handler);\n            this.node.on(eventTypeOrEvents, handler, this);\n        }\n    }\n\n    public unregister(eventType: NodeEventType) {\n        const handler = this.handlers.get(eventType);\n        if (handler) {\n            this.node.off(eventType, handler, this);\n            this.handlers.delete(eventType);\n        }\n    }\n\n    public registerAll() {\n        for (const [eventType, handler] of this.handlers) {\n            this.node.on(eventType, handler, this);\n        }\n    }\n\n    public unregisterAll() {\n        for (const [eventType, handler] of this.handlers) {\n            this.node.off(eventType, handler, this);\n        }\n        this.handlers.clear();\n    }\n}\n"]}