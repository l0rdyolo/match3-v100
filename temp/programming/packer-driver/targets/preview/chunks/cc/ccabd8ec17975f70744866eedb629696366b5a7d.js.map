{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Runtime/EventSystem/EventManager.ts"],"names":["_decorator","SingletonComponent","NotExistEventException","ccclass","property","EventManager","eventListeners","Map","onLoad","addListener","eventType","listener","has","set","get","push","removeListener","listeners","index","indexOf","splice","triggerEvent","eventData","onEvent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;AACAC,MAAAA,kB,iBAAAA,kB;;AACAC,MAAAA,sB,iBAAAA,sB;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;8BAGjBK,Y,WADZF,OAAO,CAAC,cAAD,C,gBAAR,MACaE,YADb;AAAA;AAAA,oDACmE;AAAA;AAAA;AAAA,eACvDC,cADuD,GACP,IAAIC,GAAJ,EADO;AAAA;;AAGrDC,QAAAA,MAAM,GAAG;AACf,gBAAMA,MAAN;AACH;;AAEMC,QAAAA,WAAW,CAACC,SAAD,EAAoBC,QAApB,EAAoD;AAClE,cAAI,CAAC,KAAKL,cAAL,CAAoBM,GAApB,CAAwBF,SAAxB,CAAL,EAAyC;AACrC,iBAAKJ,cAAL,CAAoBO,GAApB,CAAwBH,SAAxB,EAAmC,EAAnC;AACH;;AACD,eAAKJ,cAAL,CAAoBQ,GAApB,CAAwBJ,SAAxB,EAAoCK,IAApC,CAAyCJ,QAAzC;AACH;;AAEMK,QAAAA,cAAc,CAACN,SAAD,EAAoBC,QAApB,EAAoD;AACrE,cAAI,CAAC,KAAKL,cAAL,CAAoBM,GAApB,CAAwBF,SAAxB,CAAL,EAAyC;AACrC,kBAAM;AAAA;AAAA,8EAAqCA,SAArC,8BAAN;AACH;;AACD,cAAMO,SAAS,GAAG,KAAKX,cAAL,CAAoBQ,GAApB,CAAwBJ,SAAxB,CAAlB;AACA,cAAMQ,KAAK,GAAGD,SAAS,CAACE,OAAV,CAAkBR,QAAlB,CAAd;;AACA,cAAIO,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdD,YAAAA,SAAS,CAACG,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AACH;AACJ;;AAEMG,QAAAA,YAAY,CAACX,SAAD,EAAoBY,SAApB,EAA0C;AACzD,cAAI,CAAC,KAAKhB,cAAL,CAAoBM,GAApB,CAAwBF,SAAxB,CAAL,EAAyC;;AACzC,eAAK,IAAMC,QAAX,IAAuB,KAAKL,cAAL,CAAoBQ,GAApB,CAAwBJ,SAAxB,CAAvB,EAA4D;AACxDC,YAAAA,QAAQ,CAACY,OAAT,CAAiBb,SAAjB,EAA4BY,SAA5B;AACH;AACJ;;AA9B8D,O","sourcesContent":["import { _decorator } from 'cc';\nimport { SingletonComponent } from \"../../Legacy/Singleton\";\nimport { NotExistEventException } from \"./ExistEventException\";\nimport { IEventListener } from \"./IEventListener\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('EventManager')\nexport class EventManager extends SingletonComponent<EventManager> {\n    private eventListeners: Map<string, IEventListener[]> = new Map<string, IEventListener[]>();\n\n    protected onLoad() {\n        super.onLoad();\n    }\n\n    public addListener(eventType: string, listener: IEventListener): void {\n        if (!this.eventListeners.has(eventType)) {\n            this.eventListeners.set(eventType, []);\n        }\n        this.eventListeners.get(eventType)!.push(listener);\n    }\n\n    public removeListener(eventType: string, listener: IEventListener): void {\n        if (!this.eventListeners.has(eventType)) {\n            throw new NotExistEventException(`Event <${eventType}> is not found to remove`);\n        }\n        const listeners = this.eventListeners.get(eventType)!;\n        const index = listeners.indexOf(listener);\n        if (index !== -1) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    public triggerEvent(eventType: string, eventData: any): void {\n        if (!this.eventListeners.has(eventType)) return;\n        for (const listener of this.eventListeners.get(eventType)!) {\n            listener.onEvent(eventType, eventData);\n        }\n    }\n}\n"]}