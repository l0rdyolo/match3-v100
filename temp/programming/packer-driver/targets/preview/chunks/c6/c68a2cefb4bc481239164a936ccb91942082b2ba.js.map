{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","GridManager","ccclass","property","GravityHandler","applyGravity","matches","columnPieceCount","Map","col","piece","has","set","get","keysArray","Array","from","values","console","log","applyGravityToCol","emptySpaces","i","applyGravityForSingleColumn","grid","getInstance","colActivePieces"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AAEZC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;gCAGjBK,c,WADZF,OAAO,CAAC,gBAAD,C,UAGHC,QAAQ;AAAA;AAAA,qC,2BAHb,MACaC,cADb,SACoCJ,SADpC,CAC8C;AAAA;AAAA;;AAAA;AAAA;;AAK1CK,QAAAA,YAAY,CAACC,OAAD,EAAmB;AAC3B,cAAMC,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB;AACA,cAAIC,GAAJ,CAF2B,CAG3B;;AACA,eAAK,IAAMC,KAAX,IAAoBJ,OAApB,EAA6B;AACzBG,YAAAA,GAAG,GAAGC,KAAK,CAACD,GAAZ;;AACA,gBAAIF,gBAAgB,CAACI,GAAjB,CAAqBF,GAArB,CAAJ,EAA+B;AAC3BF,cAAAA,gBAAgB,CAACK,GAAjB,CAAqBH,GAArB,EAA0BF,gBAAgB,CAACM,GAAjB,CAAqBJ,GAArB,IAA4B,CAAtD;AACH,aAFD,MAEO;AACHF,cAAAA,gBAAgB,CAACK,GAAjB,CAAqBH,GAArB,EAA0B,CAA1B;AACH;AAEJ;;AACD,cAAMK,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWT,gBAAgB,CAACU,MAAjB,EAAX,CAAlB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AAEA,eAAKM,iBAAL,CAAuBX,GAAvB,EAA6BF,gBAA7B;AACH;;AAEDa,QAAAA,iBAAiB,CAACX,GAAD,EAAcF,gBAAd,EAAqD;AAClE,cAAMc,WAAW,GAAGd,gBAAgB,CAACM,GAAjB,CAAqBJ,GAArB,CAApB;;AACA,eAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAApB,EAAiCC,CAAC,EAAlC,EAAsC;AAClC,iBAAKC,2BAAL,CAAiCd,GAAjC,EAAsCY,WAAtC;AACH;AACJ;;AAEDE,QAAAA,2BAA2B,CAACd,GAAD,EAAcY,WAAd,EAAmC;AAC1D,cAAMG,IAAI,GAAG;AAAA;AAAA,0CAAYC,WAAZ,GAA0BD,IAAvC;AACA,cAAIE,eAAe,GAAG,EAAtB;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ,EAAiBY,WAAjB;AAGH;;AArCyC,O;;;;;iBAGP,I","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nimport { Piece } from '../Piece/Piece';\nimport { GridManager } from '../Grid/GridManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GravityHandler')\nexport class GravityHandler extends Component {\n\n    @property(GridManager)\n    private gridManager: GridManager = null;\n\n    applyGravity(matches: Piece[]) {\n        const columnPieceCount = new Map<number, number>();\n        let col;\n        // Sütunlarda kaç adet boşluk oluştuğunu hesapla\n        for (const piece of matches) {\n            col = piece.col;\n            if (columnPieceCount.has(col)) {\n                columnPieceCount.set(col, columnPieceCount.get(col) + 1);\n            } else {\n                columnPieceCount.set(col, 1);\n            }\n            \n        }\n        const keysArray = Array.from(columnPieceCount.values());\n        console.log(keysArray);\n        \n        this.applyGravityToCol(col , columnPieceCount);\n    }\n\n    applyGravityToCol(col:number , columnPieceCount: Map<number, number>) {\n        const emptySpaces = columnPieceCount.get(col)\n        for (let i = 0; i < emptySpaces; i++) {\n            this.applyGravityForSingleColumn(col, emptySpaces);\n        }\n    }\n\n    applyGravityForSingleColumn(col: number, emptySpaces: number) {\n        const grid = GridManager.getInstance().grid;\n        let colActivePieces = [];\n        console.log(col ,emptySpaces);\n        \n\n    }\n}\n"]}