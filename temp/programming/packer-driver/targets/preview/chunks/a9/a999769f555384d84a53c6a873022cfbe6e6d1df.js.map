{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","Color","Sprite","EffectManager","ccclass","Direction","MatchChecker","SwapPiecePositions","pieceA","pieceB","posA","posB","gridMap","movePiece","posAData","get","posBData","set","horizontalVisited","Set","verticalVisited","checkMatches","getPieceAtPosition","position","Array","from","entries","find","_","pos","row","col","visitNeighborWithDirection","currentPiece","direction","visited","depth","maxDepth","currentPiecePosition","neighborPiecePosition","dx","dy","neighbor","has","name","sprite","getChildByName","getComponent","color","add","horizontalDirections","verticalDirections","size","console","log"],"mappings":"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","sourcesContent":["import { _decorator, Color, Node, Sprite, Vec3 } from \"cc\";\nimport { EffectManager } from \"../Effects/EffectManager\";\nconst { ccclass } = _decorator;\n\nenum Direction {\n  Horizontal,\n  Vertical,\n}\n\n@ccclass(\"MatchChecker\")\nexport class MatchChecker {\n  private static horizontalDirections = [\n    { dx: 0, dy: 1 }, // Right\n    { dx: 0, dy: -1 }, // Left\n  ];\n\n  private static verticalDirections = [\n    { dx: 1, dy: 0 }, // Down\n    { dx: -1, dy: 0 }, // Up\n  ];\n\n  public static async SwapPiecePositions(\n    pieceA: Node,\n    pieceB: Node,\n    posA: Vec3,\n    posB: Vec3,\n    gridMap: Map<Node, { row: number; col: number }>\n  ) {\n    EffectManager.movePiece(pieceA, posB, 0.1);\n    await EffectManager.movePiece(pieceB, posA, 0.1);\n    \n    // Update the gridMap\n    const posAData = gridMap.get(pieceA);\n    const posBData = gridMap.get(pieceB);\n    gridMap.set(pieceA, posBData);\n    gridMap.set(pieceB, posAData);\n    \n    const horizontalVisited = new Set<Node>();\n    const verticalVisited = new Set<Node>();\n    \n    this.checkMatches(pieceB, gridMap, horizontalVisited, verticalVisited);\n    \n  }\n\n  private static getPieceAtPosition(\n    position: { row: number; col: number },\n    gridMap: Map<Node, { row: number; col: number }>\n  ): Node | undefined {\n    return Array.from(gridMap.entries()).find(\n      ([_, pos]) => pos.row === position.row && pos.col === position.col\n    )?.[0];\n  }\n\n  private static visitNeighborWithDirection(\n    currentPiece: Node,\n    gridMap: Map<Node, { row: number; col: number }>,\n    direction: { dx: number; dy: number },\n    visited: Set<Node>,\n    depth: number,\n    maxDepth: number\n  ): void {\n    if (depth > maxDepth) return;\n\n    const currentPiecePosition = gridMap.get(currentPiece);\n    const neighborPiecePosition = {\n      row: currentPiecePosition.row + direction.dx,\n      col: currentPiecePosition.col + direction.dy,\n    };\n\n    const neighbor = this.getPieceAtPosition(neighborPiecePosition, gridMap);\n    if (neighbor && !visited.has(neighbor) && neighbor.name === currentPiece.name) {\n      const sprite = neighbor.getChildByName(\"Sprite\").getComponent(Sprite);\n      if (sprite) {\n        sprite.color = new Color(150, 150, 255); // Change color\n      }\n      visited.add(neighbor);\n      this.visitNeighborWithDirection(neighbor, gridMap, direction, visited, depth + 1, maxDepth);\n    }\n  }\n\n  private static checkMatches(\n    currentPiece: Node,\n    gridMap: Map<Node, { row: number; col: number }>,\n    horizontalVisited: Set<Node>,\n    verticalVisited: Set<Node>,\n    depth: number = 0,\n    maxDepth: number = 3\n  ): void {\n    horizontalVisited.add(currentPiece);\n    verticalVisited.add(currentPiece);\n\n    for (const direction of this.horizontalDirections) {\n      this.visitNeighborWithDirection(currentPiece, gridMap, direction, horizontalVisited, depth, maxDepth);\n    }\n    for (const direction of this.verticalDirections) {\n      this.visitNeighborWithDirection(currentPiece, gridMap, direction, verticalVisited, depth, maxDepth);\n    }\n\n    if(verticalVisited.size>=3){\n        console.log(\"veri patlak\");\n        \n    }\n    else if(horizontalVisited.size>=3){\n        console.log(\"hori patlak\");\n        \n    }\n  }\n}\n"]}