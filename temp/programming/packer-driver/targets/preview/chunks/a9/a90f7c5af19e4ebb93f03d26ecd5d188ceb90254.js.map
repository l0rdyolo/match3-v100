{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Match/MatchStrategies/HorizontalMatchStrategy.ts"],"names":["HorizontalMatchStrategy","directions","dx","dy","checkMatch","pieceA","pieceB","matchedPieces","row","col","piece","direction","currentRow","currentCol","grid","length","currentPiece","node","name","push"],"mappings":";;;8BAIaA,uB;;;;;;;;;;;;;;;;;;;;;;;yCAAAA,uB,GAAN,MAAMA,uBAAN,CAAuD;AAAA;AAAA,eACnDC,UADmD,GACtC,CAChB;AAAEC,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,EAAE,EAAE;AAAb,WADgB,EACE;AAClB;AAAED,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,EAAE,EAAE,CAAC;AAAd,WAFgB,CAEE;AAFF,WADsC;AAAA;;AAMnDC,QAAAA,UAAU,CAACC,MAAD,EAAiBC,MAAjB,EAA2C;AACxD;AACA,cAAMC,aAAsB,GAAG,EAA/B;AACA,cAAM;AAAEC,YAAAA,GAAF;AAAOC,YAAAA;AAAP,cAAeC,KAArB;;AAEA,eAAK,IAAMC,SAAX,IAAwB,KAAKV,UAA7B,EAAyC;AACrC,gBAAIW,UAAU,GAAGJ,GAAjB;AACA,gBAAIK,UAAU,GAAGJ,GAAG,GAAGE,SAAS,CAACR,EAAjC;;AAEA,mBAAOU,UAAU,IAAI,CAAd,IAAmBA,UAAU,GAAGC,IAAI,CAAC,CAAD,CAAJ,CAAQC,MAA/C,EAAuD;AACnD,kBAAMC,YAAY,GAAGF,IAAI,CAACF,UAAD,CAAJ,CAAiBC,UAAjB,CAArB;;AACA,kBAAIG,YAAY,IAAIA,YAAY,CAACC,IAAb,CAAkBC,IAAlB,KAA2BR,KAAK,CAACO,IAAN,CAAWC,IAA1D,EAAgE;AAC5DX,gBAAAA,aAAa,CAACY,IAAd,CAAmBH,YAAnB;AACH,eAFD,MAEO;AACH;AACH;;AACDH,cAAAA,UAAU,IAAIF,SAAS,CAACR,EAAxB;AACH;AACJ;;AAED,cAAII,aAAa,CAACQ,MAAd,IAAwB,CAA5B,EAA+B;AAC3BR,YAAAA,aAAa,CAACY,IAAd,CAAmBT,KAAnB;AACH;;AAED,iBAAOH,aAAP;AACH;;AA/ByD,O","sourcesContent":["import { Piece } from \"../../Piece/Piece\";\nimport { MatchChecker } from \"../MatchChecker\";\nimport { MatchStrategy } from \"./IMatchStrategy\";\n\nexport class HorizontalMatchStrategy implements MatchStrategy {\n    public directions = [\n        { dx: 0, dy: 1 }, // Right\n        { dx: 0, dy: -1 } // Left\n    ];\n\n    public checkMatch(pieceA: Piece , pieceB : Piece ): Piece[] {\n        return;\n        const matchedPieces: Piece[] = [];\n        const { row, col } = piece;\n\n        for (const direction of this.directions) {\n            let currentRow = row;\n            let currentCol = col + direction.dy;\n\n            while (currentCol >= 0 && currentCol < grid[0].length) {\n                const currentPiece = grid[currentRow][currentCol];\n                if (currentPiece && currentPiece.node.name === piece.node.name) {\n                    matchedPieces.push(currentPiece);\n                } else {\n                    break;\n                }\n                currentCol += direction.dy;\n            }\n        }\n\n        if (matchedPieces.length >= 2) {\n            matchedPieces.push(piece);\n        }\n\n        return matchedPieces;\n    }\n}"]}