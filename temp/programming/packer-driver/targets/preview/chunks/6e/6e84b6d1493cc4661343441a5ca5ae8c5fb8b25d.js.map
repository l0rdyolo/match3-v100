{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","Vec3","ccclass","property","GravityHandler","onLoad","applyGravity","grid","moved","promises","col","length","row","currentPiece","belowPiece","isEmpty","node","push","moveToPosition","Promise","all"],"mappings":";;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;;;;;;;;;OAG1B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;gCAGjBK,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCJ,SADpC,CAC8C;AAC5CK,QAAAA,MAAM,GAAG;AACP,gBAAMA,MAAN;AACD;;AAEKC,QAAAA,YAAY,CAACC,IAAD,EAAO;AAAA;AACvB,gBAAIC,KAAK,GAAG,KAAZ;AACA,gBAAIC,QAAyB,GAAG,EAAhC;;AAEA,eAAG;AACDD,cAAAA,KAAK,GAAG,KAAR;;AAEA,mBAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,MAAhC,EAAwCD,GAAG,EAA3C,EAA+C;AAC7C,qBAAK,IAAIE,GAAG,GAAGL,IAAI,CAACI,MAAL,GAAc,CAA7B,EAAgCC,GAAG,IAAI,CAAvC,EAA0CA,GAAG,EAA7C,EAAiD;AAC/C,sBAAIA,GAAG,GAAG,CAAN,GAAUL,IAAI,CAACI,MAAL,GAAc,CAA5B,EAA+B;AAC/B,sBAAME,YAAY,GAAGN,IAAI,CAACK,GAAD,CAAJ,CAAUF,GAAV,CAArB;AACA,sBAAMI,UAAU,GAAGP,IAAI,CAACK,GAAG,GAAC,CAAL,CAAJ,CAAYF,GAAZ,CAAnB;;AACA,sBAAIG,YAAY,CAACE,OAAb,IAAuB,CAACD,UAAU,CAACC,OAAvC,EAAgD;AAC9CD,oBAAAA,UAAU,CAACE,IAAX,GAAkBH,YAAY,CAACG,IAA/B,CAD8C,CAG9C;AACA;;AACAP,oBAAAA,QAAQ,CAACQ,IAAT,CAAcJ,YAAY,CAACK,cAAb,CAA4B,IAAIjB,IAAJ,CAASS,GAAT,EAAcE,GAAd,EAAmB,CAAnB,CAA5B,CAAd;AACAJ,oBAAAA,KAAK,GAAG,IAAR;AACD;AACF;AACF;;AACC,oBAAMW,OAAO,CAACC,GAAR,CAAYX,QAAZ,CAAN;AACH,aAnBD,QAmBSD,KAnBT;AAJuB;AAwBxB;;AA7B2C,O","sourcesContent":["import { _decorator, Component, Vec3 } from \"cc\";\nimport { SingletonComponent } from \"../SingletonComponent\";\nimport { GridManager } from \"./GridManager\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GravityHandler\")\nexport class GravityHandler extends Component {\n  onLoad() {\n    super.onLoad();\n  }\n\n  async applyGravity(grid) {\n    let moved = false;\n    let promises: Promise<void>[] = [];\n\n    do {\n      moved = false;\n\n      for (let col = 0; col < grid[0].length; col++) {\n        for (let row = grid.length - 1; row >= 0; row--) {\n          if (row + 1 > grid.length - 1) continue;\n          const currentPiece = grid[row][col];\n          const belowPiece = grid[row+1][col];\n          if (currentPiece.isEmpty &&!belowPiece.isEmpty) {\n            belowPiece.node = currentPiece.node;\n            \n            //! IDEA - parçaların yeni konumunun doğru güncelenmesi gerekiyor.\n            // await piece.moveToPosition(new Vec3(col, row, 0)); \n            promises.push(currentPiece.moveToPosition(new Vec3(col, row, 0)));\n            moved = true;\n          }\n        }\n      }\n        await Promise.all(promises);\n    } while (moved);\n  }\n}\n"]}