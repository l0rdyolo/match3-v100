{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-2d/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Node","CCInteger","PiecesPool","ccclass","property","GridGenerator","PIECE_CONTENT_SIZE","start","grid","generateGrid","i","GRID_ROW","row","j","piece","piecesPool","getPieceFromPool","on","EventType","TOUCH_END","onPieceClicked","push","event","clickedPiece","currentTarget","console","log","getPosition","getCenteredPosition","_j"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAA4DC,MAAAA,S,OAAAA,S;;AACnFC,MAAAA,U,iBAAAA,U;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;+BAGjBO,a,WADZF,OAAO,CAAC,eAAD,C,UAEHC,QAAQ;AAAA;AAAA,mC,UAKRA,QAAQ,CAACH,SAAD,C,2BAPb,MACaI,aADb,SACmCN,SADnC,CAC6C;AAAA;AAAA;;AAAA;;AAAA,eAIjCO,kBAJiC,GAIJ,GAJI;;AAAA;AAAA;;AAS/BC,QAAAA,KAAK,GAAS;AACpB,cAAMC,IAAI,GAAG,KAAKC,YAAL,EAAb,CADoB,CAEpB;AACH;;AAEOA,QAAAA,YAAY,GAAa;AAC7B,cAAMD,IAAc,GAAG,EAAvB;;AAEA,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAzB,EAAmCD,CAAC,EAApC,EAAwC;AACpC,gBAAME,GAAW,GAAG,EAApB;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,QAAzB,EAAmCE,CAAC,EAApC,EAAwC;AACpC,kBAAMC,KAAK,GAAG,KAAKC,UAAL,CAAgBC,gBAAhB,EAAd,CADoC,CAGpC;AAEA;;AACAF,cAAAA,KAAK,CAACG,EAAN,CAASjB,IAAI,CAACkB,SAAL,CAAeC,SAAxB,EAAmC,KAAKC,cAAxC,EAAwD,IAAxD;AAEAR,cAAAA,GAAG,CAACS,IAAJ,CAASP,KAAT;AACH;;AACDN,YAAAA,IAAI,CAACa,IAAL,CAAUT,GAAV;AACH;;AAED,iBAAOJ,IAAP;AACH;;AAGOY,QAAAA,cAAc,CAACE,KAAD,EAAoB;AACtC,cAAMC,YAAY,GAAGD,KAAK,CAACE,aAA3B;AACAC,UAAAA,OAAO,CAACC,GAAR,iCAA0CH,YAAY,CAACI,WAAb,EAA1C,EAFsC,CAGtC;AACH;;AAEOC,QAAAA,mBAAmB,CAACf,CAAD,EAAaH,CAAb,EAA8B;AACvD;AACA,cAAMmB,EAAE,GAAIhB,CAAC,GAAG,KAAKP,kBAAV,GAAkC,KAAKK,QAAL,GAAgB,CAAjB,IAAuB,KAAKA,QAAL,GAAgB,CAAvC,CAA5C;;AACA;AACD;;AA9CwC,O;;;;;iBAER,I;;;;;;;iBAKd,C","sourcesContent":["import { _decorator, Component, Node, Vec3, systemEvent, SystemEventType, EventTouch, Vec2, CCInteger } from 'cc';\nimport { PiecesPool } from '../Poolable/PiecesPool';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GridGenerator')\nexport class GridGenerator extends Component {\n    @property(PiecesPool)\n    private piecesPool: PiecesPool = null;\n   \n    private PIECE_CONTENT_SIZE: number = 100; //dinamikle≈ütir\n    \n    @property(CCInteger)\n    GRID_ROW: number = 0;\n\n    protected start(): void {\n        const grid = this.generateGrid();\n        // Further grid management tasks can be handled here.\n    }\n\n    private generateGrid(): Node[][] {\n        const grid: Node[][] = [];\n\n        for (let i = 0; i < this.GRID_ROW; i++) {\n            const row: Node[] = [];\n            for (let j = 0; j < this.GRID_ROW; j++) {\n                const piece = this.piecesPool.getPieceFromPool();\n                \n                // piece.setPosition((j * 100) - ((5/2) * 75), i * 100);\n                \n                // Add click event listener\n                piece.on(Node.EventType.TOUCH_END, this.onPieceClicked, this);\n\n                row.push(piece);\n            }\n            grid.push(row);\n        }\n\n        return grid;\n    }\n\n\n    private onPieceClicked(event: EventTouch) {\n        const clickedPiece = event.currentTarget as Node;\n        console.log(`Piece clicked at position: ${clickedPiece.getPosition()}`);\n        // Implement what happens when a piece is clicked.\n    }\n\n    private getCenteredPosition(j : number, i:number ) : Vec2{\n      //EVERY game board should be square matrix\n      const _j = (j * this.PIECE_CONTENT_SIZE) - ((this.GRID_ROW / 2) * (this.GRID_ROW / 3)) \n      return \n    }\n}\n"]}