{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Interaction/InteractionManager.ts"],"names":["_decorator","Component","Vec3","MatchChecker","EffectManager","ccclass","property","InteractionManager","grid","firstSelectedPiece","secondSelectedPiece","initializeGrid","onPieceClicked","event","piece","gridMap","pieceA","pieceB","posA","getPosition","posB","diff","subtract","length","SwapPiecePositions","checkMatches","shakePiece","resetSelection","highlightPiece","setScale","duration","movePiece","posAData","get","posBData","set","console","log","a","b"],"mappings":"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","sourcesContent":["import {\r\n  _decorator,\r\n  Component,\r\n  EventTouch,\r\n  Node,\r\n  tween,\r\n  Vec3,\r\n} from \"cc\";\r\nimport { MatchChecker } from \"../Grid/MatchChecker\";\r\nimport { EffectManager } from \"../Effects/EffectManager\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"InteractionManager\")\r\nexport class InteractionManager extends Component {\r\n  private grid: Node[][] = [];\r\n  // private selectedPiece: Node | null = null;\r\n  private firstSelectedPiece: Node | null = null;\r\n  private secondSelectedPiece: Node | null = null;\r\n\r\n  public initializeGrid(grid: Node[][]) {\r\n    this.grid = grid;\r\n  }\r\n\r\n  public async onPieceClicked(\r\n    event: EventTouch,\r\n    piece: Node,\r\n    gridMap: Map<Node, { row: number; col: number }>\r\n  ) {\r\n    if (this.firstSelectedPiece) {\r\n      this.secondSelectedPiece = piece;\r\n\r\n      const pieceA = this.secondSelectedPiece;\r\n      const pieceB = this.firstSelectedPiece;\r\n\r\n      const posA = pieceA.getPosition();\r\n      const posB = pieceB.getPosition();\r\n\r\n      //burada amacım 1 birimlik değişim olmuşsa matchchecker'a gitmek\r\n      //bu kısmı düzenlemeliyiz!!!!\r\n      const diff = Vec3.subtract(new Vec3(), posA, posB);\r\n      //! 1 birim mi diye kontrol ettim\r\n      if (diff.length() === 120) {\r\n      //! pozisyonları değiştir\r\n        await this.SwapPiecePositions(pieceA, pieceB, posA, posB, gridMap);\r\n      //!  match check\r\n        if (this.checkMatches(pieceA, pieceB, gridMap)) {\r\n            \r\n        } \r\n        else {\r\n          await this.SwapPiecePositions(pieceA, pieceB, posB, posA, gridMap , 0.2);\r\n        }\r\n      }\r\n      else{\r\n        //yanlış seçim\r\n        EffectManager.shakePiece(this.firstSelectedPiece)\r\n      }\r\n      this.resetSelection();\r\n    } else {\r\n      this.firstSelectedPiece = piece;\r\n      EffectManager.highlightPiece(piece);\r\n    }\r\n  }\r\n\r\n  private resetSelection() {\r\n    this.firstSelectedPiece!.setScale(1, 1, 1);\r\n    this.secondSelectedPiece!.setScale(1, 1, 1);\r\n    this.firstSelectedPiece = null;\r\n    this.secondSelectedPiece = null;\r\n  }\r\n\r\n  private async SwapPiecePositions(\r\n    pieceA: Node,\r\n    pieceB: Node,\r\n    posA: Vec3,\r\n    posB: Vec3,\r\n    gridMap: Map<Node, { row: number; col: number }>,\r\n    duration:number = 0.1\r\n  ) {\r\n    EffectManager.movePiece(pieceA, posB, duration);\r\n    await EffectManager.movePiece(pieceB, posA, duration);\r\n\r\n    // Update the gridMap\r\n    const posAData = gridMap.get(pieceA);\r\n    const posBData = gridMap.get(pieceB);\r\n    gridMap.set(pieceA, posBData);\r\n    gridMap.set(pieceB, posAData);\r\n\r\n    console.log(gridMap.get(pieceA),gridMap.get(pieceB));\r\n    \r\n  }\r\n\r\n  private checkMatches(\r\n    pieceA: Node,\r\n    pieceB: Node,\r\n    gridMap: Map<Node, { row: number; col: number }>\r\n  ):boolean {\r\n    const a  = MatchChecker.checkMatches(pieceA , gridMap);\r\n    const b  = MatchChecker.checkMatches(pieceB , gridMap);\r\n\r\n    return a||b;\r\n\r\n  }\r\n}\r\n"]}