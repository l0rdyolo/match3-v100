{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Vec3","CCInteger","PiecesPool","InteractionManager","Piece","PieceTypes","ccclass","property","GridGenerator","grid","PIECE_OFFSET","PIECE_CONTENT_SIZE","interactionManager","start","Generate","row","width","col","height","piece","createPiece","addComponent","getComponent","init","Normal","console","log","piecesPool","getPieceFromPool","setParent","node","createsMatch","setPosition","getCenteredPosition","addChild","name","returnPieceToPool","j","i","_j","_i"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, CCInteger } from \"cc\";\r\nimport { PiecesPool } from \"../Poolable/PiecesPool\";\r\nimport { InteractionManager } from \"../Interaction/InteractionManager\";\r\nimport { Piece } from \"../Piece/Piece\";\r\nimport { PieceTypes } from \"../Piece/PieceTypes\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"GridManager\")\r\nexport class GridGenerator extends Component {\r\n  public grid: Node[][] = [];\r\n\r\n  @property(PiecesPool)\r\n  private piecesPool: PiecesPool = null;\r\n  private PIECE_OFFSET: number = 5;\r\n\r\n  @property(CCInteger)\r\n  private width: number = 0;\r\n\r\n  @property(CCInteger)\r\n  private height: number = 0;\r\n\r\n  private PIECE_CONTENT_SIZE: number = 100; //dinamikleştir\r\n\r\n  private interactionManager: InteractionManager = new InteractionManager();\r\n\r\n  protected start(): void {\r\n    //!TODO: grid yerleşmesini ve content size'ı responsive yapmalıyız\r\n    // this.node.setPosition(-7*50, -500);\r\n    this.Generate();\r\n  }\r\n\r\n  public async Generate() {\r\n    for (let row = 0; row < this.width; row++) {\r\n      this.grid[row] = []\r\n      for (let col = 0; col < this.height; col++) {\r\n        const piece = this.createPiece(row, col);\r\n        piece!.addComponent(Piece);\r\n        piece!.getComponent(Piece).init(row , col , PieceTypes.Normal);\r\n        this.grid[row][col] = piece;\r\n      }\r\n    }\r\n\r\n    console.log(this.grid);\r\n    \r\n    // for (let row = 0; row < this.GRID_ROW; row++) {\r\n    //   this.grid[row] = [];\r\n    //   const piecesInRow: PieceProps[] = [];\r\n    //   for (let col = 0; col < this.GRID_ROW; col++) {\r\n    //     const piece: Node = this.createPiece(row, col);\r\n    //     this.grid[row][col] = piece;\r\n    //     const pieceLastPosition = this.getCenteredPosition(col, row);\r\n    //     const pieceFirstPosition = new Vec3(\r\n    //       pieceLastPosition.x,\r\n    //       this.GRID_ROW * this.PIECE_CONTENT_SIZE\r\n    //     );\r\n    //     piece.setPosition(pieceFirstPosition);\r\n    //     //piecelere event listener ekliyoruz\r\n    //     // piece.on(Node.EventType.TOUCH_START, this.onPieceClicked, this);\r\n    //     piece.on(Node.EventType.TOUCH_START, (event: EventTouch) => {\r\n    //       this.interactionManager.onPieceClicked(event, piece , this.gridMap);\r\n    //     });\r\n    //     this.grid[row][col] = piece;\r\n\r\n    //     const pieceProps: PieceProps = {\r\n    //       piece: piece,\r\n    //       targetPosition: pieceLastPosition,\r\n    //     };\r\n    //     piecesInRow.push(pieceProps);\r\n    //   }\r\n    //   await EffectManager.animateRowFall(piecesInRow, 0.1);\r\n    // }\r\n  }\r\n\r\n  //bu fonksiyon init olurken match var mı diye kontrol edip piece üretiyor.\r\n  private createPiece(row: number, col: number): Node {\r\n    let piece: Node;\r\n    do {\r\n      piece = this.piecesPool.getPieceFromPool();\r\n      piece.setParent(this.node);\r\n    } while (this.createsMatch(piece, row, col, this.grid));\r\n    piece.setPosition(this.getCenteredPosition(col, row));\r\n    this.node.addChild(piece);\r\n    return piece;\r\n  }\r\n\r\n  private createsMatch(\r\n    piece: Node,\r\n    row: number,\r\n    col: number,\r\n    grid: Node[][]\r\n  ): boolean {\r\n    return false;\r\n    if (\r\n      row >= 2 &&\r\n      grid[row - 1][col]?.name === piece.name &&\r\n      grid[row - 2][col]?.name === piece.name\r\n    ) {\r\n      this.piecesPool.returnPieceToPool(piece);\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      col >= 2 &&\r\n      grid[row][col - 1]?.name === piece.name &&\r\n      grid[row][col - 2]?.name === piece.name\r\n    ) {\r\n      this.piecesPool.returnPieceToPool(piece);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private getCenteredPosition(j: number, i: number): Vec3 {\r\n    //EVERY game board should be square matrix\r\n    const _j = j * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\r\n    const _i = i * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\r\n    return new Vec3(_j, _i);\r\n  }\r\n}\r\n"]}