{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Color","Sprite","Vec3","SingletonComponent","GridGenerator","GameGlobal","SliderManager","MatchChecker","GravityHandler","PiecePool","ccclass","property","GridManager","_grid","gridGenerator","sliderManager","matchChecker","gravityHandler","gridWidth","gridHeight","gridOffset","colors","red","black","blue","yellow","grid","onLoad","init","start","node","getComponent","Generate","length","offsetDiff","PIECE_OFFSET","piecePositionsDiff","gridX","setPosition","SwapPieces","pieceA","pieceB","Slide","pa_row","row","pa_col","col","pb_row","pb_col","tempA","tempB","deleteMatches","matches","matchedPiece","delete","highlightGridCorners","getComponentInChildren","color","handleSelection","checkForMatches","applyGravity","fillEmptySpaces","newPieceNode","getInstance","getPiece","canSelect","ResetScale","updatePosition","console","log"],"mappings":"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","sourcesContent":["import { _decorator, Color, Component, Node, Sprite, SpriteFrame, SpriteRenderer, Vec2, Vec3 } from 'cc';\nimport { SingletonComponent } from '../SingletonComponent';\nimport { Piece } from '../Piece/Piece';\nimport { GridGenerator } from './GridGenerator';\nimport { GameGlobal } from '../Game/GameGlobal';\nimport { SliderManager } from '../Interaction/SliderManager';\nimport { MatchChecker } from '../Match/MatchChecker';\nimport { GravityHandler } from './GravityHandler';\nimport { PiecePool } from '../Piece/PiecePool';\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridManager\")\nexport class GridManager extends SingletonComponent<GridManager> {\n  private _grid: Piece[][];\n\n  private gridGenerator: GridGenerator = null;\n  private sliderManager : SliderManager = null;\n  private matchChecker : MatchChecker = null;\n  private gravityHandler : GravityHandler = null;\n\n  private gridWidth: number = 0;\n  public gridHeight : number = 0;\n  private gridOffset: number = 0;\n\n  private colors = {\n    red: new Color(255, 0, 0),\n    black: new Color(0, 0, 0),\n    blue: new Color(0, 0, 255),\n    yellow: new Color(255, 255, 0),\n};\n\n   get grid(){\n    return this._grid\n  }\n\n  protected onLoad(): void {\n    super.onLoad();\n    this.init();\n  }\n\n\n\n  protected init(): void {\n    this.sliderManager = new SliderManager();\n    this.matchChecker = new MatchChecker();\n    this.gravityHandler = new GravityHandler();\n    \n  }\n\n  start() {\n    this.gridGenerator = this.node.getComponent(GridGenerator);\n    this._grid = this.gridGenerator.Generate();\n    this.gridWidth = this._grid[0].length\n    this.gridHeight = this._grid.length;\n    //! dinamik olmalı\n    const offsetDiff = (GameGlobal.PIECE_OFFSET / 2) * this.gridWidth;\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\n\n    const gridX = piecePositionsDiff + offsetDiff;\n    this.node.setPosition(new Vec3(gridX, -200, 0));\n    // this.highlightGridCorners();\n  }\n\n  async SwapPieces(pieceA: Piece, pieceB: Piece) {\n    await this.sliderManager.Slide(pieceA, pieceB);\n    const pa_row = pieceA.row;\n    const pa_col = pieceA.col;\n\n    const pb_row = pieceB.row;\n    const pb_col = pieceB.col;\n\n    pieceA.row = pb_row;\n    pieceA.col = pb_col;\n\n    pieceB.row = pa_row;\n    pieceB.col = pa_col;\n\n    const tempA = this.grid[pa_row][pa_col];\n    const tempB = this.grid[pb_row][pb_col];\n\n    this.grid[pa_row][pa_col] = tempB;\n    this.grid[pb_row][pb_col] = tempA;\n  }\n\n  deleteMatches(matches : Piece[]){\n    for (const matchedPiece of matches) {\n      matchedPiece.delete()\n    }\n  }\n\n  highlightGridCorners(){\n    this._grid[0][0].node.getComponentInChildren(Sprite).color = this.colors.black;\n    this._grid[this.gridHeight - 1][0].node.getComponentInChildren(Sprite).color = this.colors.yellow;\n    this._grid[0][this.gridWidth - 1].node.getComponentInChildren(Sprite).color = this.colors.blue;\n    this._grid[this.gridHeight - 1][this.gridWidth - 1].node.getComponentInChildren(Sprite).color = this.colors.red;\n  }\n\n  async handleSelection(pieceA : Piece , pieceB : Piece){\n    await this.SwapPieces(pieceA , pieceB);\n    let matches: Piece[] = await this.matchChecker.checkForMatches(pieceA, pieceB);\n    \n    if (matches.length > 0) {\n        this.deleteMatches(matches);\n        await this.gravityHandler.applyGravity(); // Gravity işleminin tamamlanmasını bekle\n        // // Gravity sonrası yeni eşleşmeleri kontrol et\n        this.fillEmptySpaces();\n        \n        // do {\n        //     matches = await this.matchChecker.checkForMatchesAfterGravity();\n        //     if (matches.length > 0) {\n        //         GridManager.getInstance().deleteMatches(matches);\n        //         await this.gravityHandler.applyGravity(); // Yeni gravity işlemini uygula ve bekle\n        //     }\n        // } while (matches.length > 0);\n\n    } else {\n        await this.SwapPieces(pieceA,pieceB);\n    }\n  }\n\n  private fillEmptySpaces() {\n    const grid = this.grid;\n    for (let row = 0; row < this.gridWidth; row++) {\n        for (let col = 0; col < this.gridHeight; col++) {\n     \n            \n            if (grid[row][col].node === null) {\n                const newPieceNode = PiecePool.getInstance().getPiece(); \n                grid[row][col].node = newPieceNode;\n                grid[row][col].canSelect = true;\n                grid[row][col].ResetScale();                \n                grid[row][col].updatePosition(row,col)\n                console.log(grid[row][col]);\n                \n            }\n        }\n    }\n}\n}"]}