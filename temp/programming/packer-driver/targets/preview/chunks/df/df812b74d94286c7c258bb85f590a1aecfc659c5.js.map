{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Piece/PiecePool.ts"],"names":["_decorator","Prefab","instantiate","SingletonComponent","ccclass","property","PiecePool","pool","initialPoolSize","start","fillPool","i","piece","createRandomPiece","push","prefab","getRandomPrefab","newPiece","active","node","addChild","setParent","piecesPrefabs","length","randomIndex","Math","floor","random","console","error","getPiece","pop","log","returnPiece","clearAll","forEach","destroy"],"mappings":"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","sourcesContent":["import { _decorator, Prefab, instantiate, Node } from 'cc';\nimport { SingletonComponent } from '../SingletonComponent';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PiecePool')\nexport class PiecePool extends SingletonComponent<PiecePool> {\n    @property([Prefab])\n    piecesPrefabs: Prefab[] = [];\n\n    public pool: Node[] = [];\n    private initialPoolSize: number = 500; //abartma\n    protected start(): void {\n        this.fillPool();\n    }\n\n    private fillPool(): void {\n        for (let i = 0; i < this.initialPoolSize; i++) {\n            const piece = this.createRandomPiece();\n            if (piece) {\n                this.pool.push(piece);\n            }\n        }\n    }\n\n    private createRandomPiece(): Node | null {\n        const prefab = this.getRandomPrefab();\n        if (prefab) {\n            const newPiece = instantiate(prefab);\n            newPiece.active = false;\n            this.node.addChild(newPiece);\n            newPiece.setParent(this.node);\n            return newPiece;\n        }\n        return null;\n    }\n\n    private getRandomPrefab(): Prefab | null {\n        if (this.piecesPrefabs.length > 0) {\n            const randomIndex = Math.floor(Math.random() * this.piecesPrefabs.length);\n            return this.piecesPrefabs[randomIndex];\n        } else {\n            console.error(\"No prefabs available in PiecePool.\");\n            return null;\n        }\n    }\n\n    public getPiece(): Node | null {\n        if (this.pool.length > 0) {\n            const piece = this.pool.pop();\n            piece!.active = true; \n            return piece!;\n        } else {\n            console.log(\"Pool is empty, generating a new piece.\");\n            const newPiece = this.createRandomPiece();\n            if (newPiece) {\n                this.node.addChild(newPiece);\n                newPiece.setParent(this.node);\n                newPiece.active = true;\n                return newPiece;\n            } else {\n                console.error(\"Failed to create a new piece.\");\n                return null;\n            }\n        }\n    }\n\n    public returnPiece(piece: Node) {\n        piece.active = false; \n        this.pool.push(piece);\n    }\n\n    public clearAll() {\n        this.pool.forEach(piece => piece.destroy());\n        this.pool = [];\n    }\n}\n"]}