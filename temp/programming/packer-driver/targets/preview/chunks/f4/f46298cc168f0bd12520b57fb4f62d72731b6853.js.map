{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/DetectorAPI/VersionDetector.ts"],"names":["VersionDetector","Detector","getVersionRegex","browserRegexParts","join","RegExp","detect","userAgent","versionRegex","match","exec","slice","find","m","undefined","replace"],"mappings":";;;wCAcaA,e;;;;;;;;;;;;;;AAdJC,MAAAA,Q,iBAAAA,Q;;;;;;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;iCACaD,e,GAAN,MAAMA,eAAN;AAAA;AAAA,gCAA+C;AAClD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYE,QAAAA,eAAe,GAAW;AAC9B,cAAMC,iBAAiB,GAAG,CACtB,QADsB,EACZ,SADY,EACD,QADC,EACS,KADT,EACgB,KADhB,EAExBC,IAFwB,CAEnB,GAFmB,CAA1B;AAIA,iBAAO,IAAIC,MAAJ,+BAAuCF,iBAAvC,2BAAgF,GAAhF,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACWG,QAAAA,MAAM,GAAW;AACpB,cAAI,CAAC,KAAKC,SAAV,EAAqB,OAAO,SAAP;AAErB,cAAMC,YAAY,GAAG,KAAKN,eAAL,EAArB;AACA,cAAMO,KAAK,GAAGD,YAAY,CAACE,IAAb,CAAkB,KAAKH,SAAvB,CAAd;AAEA,iBAAOE,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAeC,IAAf,CAAoBC,CAAC,IAAIA,CAAC,KAAKC,SAA/B,EAA0CC,OAA1C,CAAkD,GAAlD,EAAuD,GAAvD,CAAH,GAAiE,SAA7E;AACH;;AArCiD,O","sourcesContent":["import { Detector } from \"./Detector\";\n\n/**\n * Specializes in detecting browser version from the user agent string.\n * Inherits from `Detector` with a string type specialization, indicating\n * the type of detection result it produces.\n *\n * Example usage:\n * ```typescript\n * const versionDetector = new VersionDetector();\n * versionDetector.userAgent = navigator.userAgent;\n * console.log(versionDetector.detect()); // Outputs: 'Chrome.89.0'\n * ```\n */\nexport class VersionDetector extends Detector<string> {\n    /**\n     * Constructs a regular expression to match browser version patterns.\n     * Supports major browsers like Chrome, Firefox, Safari, Opera (as 'opr'),\n     * and Edge (as 'edg'). The regex is designed to capture both the\n     * 'version/X.Y' format and the 'browserName X.Y' format.\n     *\n     * @returns {RegExp} The regex for matching browser version strings.\n     * @private\n     */\n    private getVersionRegex(): RegExp {\n        const browserRegexParts = [\n            'chrome', 'firefox', 'safari', 'opr', 'edg'\n        ].join('|');\n\n        return new RegExp(`(version)/(\\\\d+).(\\\\d+)|(${browserRegexParts})[ \\\\/](\\\\d+).(\\\\d+)`, 'i');\n    }\n\n    /**\n     * Detects the browser version from the user agent string. If the user agent\n     * is not set or a version cannot be determined, returns 'Unknown'.\n     *\n     * The detection process involves executing a regex constructed by\n     * `getVersionRegex` against the `userAgent` property. It extracts the version\n     * number that matches first and formats it in a 'browserName.version' string.\n     *\n     * @returns {string} The detected version in 'browserName.version' format or\n     * 'Unknown'.\n     * @public\n     */\n    public detect(): string {\n        if (!this.userAgent) return 'Unknown';\n\n        const versionRegex = this.getVersionRegex();\n        const match = versionRegex.exec(this.userAgent);\n\n        return match ? match.slice(1).find(m => m !== undefined).replace('/', '.') : 'Unknown';\n    }\n}\n"]}