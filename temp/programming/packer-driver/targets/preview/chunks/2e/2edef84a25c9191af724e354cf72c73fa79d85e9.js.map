{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Interaction/InteractionManager.ts"],"names":["_decorator","Component","ccclass","property","InteractionManager","selectedPiece","onPieceClicked","event","piece","swapPieces","highlightPiece","pieceA","pieceB","console","log","getPosition","tempPos","clone","setPosition","setScale","clearSelection"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;;;;;;;;OACf;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;oCAGjBI,kB,WADZF,OAAO,CAAC,oBAAD,C,gBAAR,MACaE,kBADb,SACwCH,SADxC,CACkD;AAAA;AAAA;AAAA,eACtCI,aADsC,GACT,IADS;AAAA;;AAGvCC,QAAAA,cAAc,CAACC,KAAD,EAAoBC,KAApB,EAAiC;AAClD,cAAI,KAAKH,aAAT,EAAwB;AACpB,iBAAKI,UAAL,CAAgB,KAAKJ,aAArB,EAAoCG,KAApC;AACA,iBAAKH,aAAL,GAAqB,IAArB;AACH,WAHD,MAGO;AACH,iBAAKA,aAAL,GAAqBG,KAArB;AACA,iBAAKE,cAAL,CAAoBF,KAApB;AACH;AACJ;;AAEOC,QAAAA,UAAU,CAACE,MAAD,EAAeC,MAAf,EAA6B;AAC3CC,UAAAA,OAAO,CAACC,GAAR,wBAAiCH,MAAM,CAACI,WAAP,EAAjC,uBAAuEH,MAAM,CAACG,WAAP,EAAvE;AACA,cAAMC,OAAO,GAAGL,MAAM,CAACI,WAAP,GAAqBE,KAArB,EAAhB;AACAN,UAAAA,MAAM,CAACO,WAAP,CAAmBN,MAAM,CAACG,WAAP,EAAnB;AACAH,UAAAA,MAAM,CAACM,WAAP,CAAmBF,OAAnB;AACH;;AAEON,QAAAA,cAAc,CAACF,KAAD,EAAc;AAChC;AACAK,UAAAA,OAAO,CAACC,GAAR,sCAA+CN,KAAK,CAACO,WAAN,EAA/C,EAFgC,CAGhC;;AACAP,UAAAA,KAAK,CAACW,QAAN,CAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB;AACH;;AAEMC,QAAAA,cAAc,GAAG;AACpB,cAAI,KAAKf,aAAT,EAAwB;AACpB,iBAAKA,aAAL,CAAmBc,QAAnB,CAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EADoB,CACkB;;AACtC,iBAAKd,aAAL,GAAqB,IAArB;AACH;AACJ;;AAhC6C,O","sourcesContent":["import { _decorator, Component, Node, EventTouch } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('InteractionManager')\nexport class InteractionManager extends Component {\n    private selectedPiece: Node | null = null;\n\n    public onPieceClicked(event: EventTouch, piece: Node) {\n        if (this.selectedPiece) {\n            this.swapPieces(this.selectedPiece, piece);\n            this.selectedPiece = null;\n        } else {\n            this.selectedPiece = piece;\n            this.highlightPiece(piece);\n        }\n    }\n\n    private swapPieces(pieceA: Node, pieceB: Node) {\n        console.log(`Swapping piece at ${pieceA.getPosition()} with piece at ${pieceB.getPosition()}`);\n        const tempPos = pieceA.getPosition().clone();\n        pieceA.setPosition(pieceB.getPosition());\n        pieceB.setPosition(tempPos);\n    }\n\n    private highlightPiece(piece: Node) {\n        // Add a visual indicator that the piece is selected, such as changing its scale or color\n        console.log(`Highlighting piece at position: ${piece.getPosition()}`);\n        // Example highlight logic\n        piece.setScale(1.2, 1.2, 1.2);\n    }\n\n    public clearSelection() {\n        if (this.selectedPiece) {\n            this.selectedPiece.setScale(1, 1, 1); // Reset the scale or any visual change\n            this.selectedPiece = null;\n        }\n    }\n}\n"]}