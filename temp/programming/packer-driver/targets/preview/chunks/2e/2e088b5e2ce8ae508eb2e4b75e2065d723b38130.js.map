{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","GridManager","SingletonComponent","ccclass","property","GravityHandler","onLoad","applyGravity","grid","getInstance","console","log","moved","col","length","row","movePieceDown","piece","targetRow","findLowestEmptyRow","updatePosition","startRow"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;AAEAC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,kB,iBAAAA,kB;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;gCAGjBK,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb;AAAA;AAAA,oDACuE;AAEnEC,QAAAA,MAAM,GAAG;AACL,gBAAMA,MAAN;AACH;;AAEKC,QAAAA,YAAY,GAAG;AAAA;;AAAA;AACjB,gBAAMC,IAAI,GAAG;AAAA;AAAA,4CAAYC,WAAZ,GAA0BD,IAAvC;AACAE,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,gBAAIC,KAAK,GAAG,KAAZ;;AACA,eAAG;AACCA,cAAAA,KAAK,GAAG,KAAR;;AACA,mBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAhC,EAAwCD,GAAG,EAA3C,EAA+C;AAC3C,qBAAK,IAAIE,GAAG,GAAGP,IAAI,CAACM,MAAL,GAAc,CAA7B,EAAgCC,GAAG,GAAG,CAAtC,EAAyCA,GAAG,EAA5C,EAAgD;AAC5C,sBAAIP,IAAI,CAACO,GAAD,CAAJ,CAAUF,GAAV,MAAmB,IAAnB,IAA2BL,IAAI,CAACO,GAAG,GAAG,CAAP,CAAJ,CAAcF,GAAd,MAAuB,IAAtD,EAA4D;AACxD,0BAAM,KAAI,CAACG,aAAL,CAAmBD,GAAG,GAAG,CAAzB,EAA4BF,GAA5B,EAAkCL,IAAlC,CAAN;AACAI,oBAAAA,KAAK,GAAG,IAAR;AACH;AACJ;AACJ;AACJ,aAVD,QAUSA,KAVT,EAJiB,CAgBjB;;AAhBiB;AAiBpB;;AAEKI,QAAAA,aAAa,CAACD,GAAD,EAAcF,GAAd,EAA4BL,IAA5B,EAA8C;AAAA;;AAAA;AAC7D,gBAAMS,KAAK,GAAGT,IAAI,CAACO,GAAD,CAAJ,CAAUF,GAAV,CAAd;;AACA,gBAAII,KAAJ,EAAW;AACP,kBAAMC,SAAS,GAAG,MAAI,CAACC,kBAAL,CAAwBN,GAAxB,EAA6BE,GAA7B,EAAmCP,IAAnC,CAAlB;;AACA,kBAAIU,SAAS,KAAKH,GAAlB,EAAuB;AACnBP,gBAAAA,IAAI,CAACU,SAAD,CAAJ,CAAgBL,GAAhB,IAAuBI,KAAvB;AACAT,gBAAAA,IAAI,CAACO,GAAD,CAAJ,CAAUF,GAAV,IAAiB,IAAjB;AAEAI,gBAAAA,KAAK,CAACF,GAAN,GAAYG,SAAZ;AACAD,gBAAAA,KAAK,CAACG,cAAN,GALmB,CAMnB;AACH;AACJ;AAZ4D;AAahE;;AAGDD,QAAAA,kBAAkB,CAACN,GAAD,EAAcQ,QAAd,EAAgCb,IAAhC,EAA8C;AAC5D,eAAK,IAAIO,GAAG,GAAGP,IAAI,CAACM,MAAL,GAAc,CAA7B,EAAgCC,GAAG,GAAGM,QAAtC,EAAgDN,GAAG,EAAnD,EAAuD;AACnD,gBAAIP,IAAI,CAACO,GAAD,CAAJ,CAAUF,GAAV,MAAmB,IAAvB,EAA6B;AACzB,qBAAOE,GAAP;AACH;AACJ;;AACD,iBAAOM,QAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA1EuE,O","sourcesContent":["import { _decorator, Component, Node, Vec3 } from 'cc';\nimport { Piece } from '../Piece/Piece';\nimport { GridManager } from '../Grid/GridManager';\nimport { SingletonComponent } from \"../SingletonComponent\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('GravityHandler')\nexport class GravityHandler extends SingletonComponent<GravityHandler> {\n\n    onLoad() {\n        super.onLoad();\n    }\n\n    async applyGravity() {\n        const grid = GridManager.getInstance().grid;\n        console.log(\"apply gravity!!!\");\n        let moved = false;\n        do {\n            moved = false;\n            for (let col = 0; col < grid[0].length; col++) {\n                for (let row = grid.length - 1; row > 0; row--) {\n                    if (grid[row][col] === null && grid[row - 1][col] !== null) {\n                        await this.movePieceDown(row - 1, col , grid);\n                        moved = true;\n                    }\n                }\n            }\n        } while (moved);\n\n        // await this.fillEmptySpaces();\n    }\n\n    async movePieceDown(row: number, col: number , grid : Piece[][]) {\n        const piece = grid[row][col];\n        if (piece) {\n            const targetRow = this.findLowestEmptyRow(col, row , grid);\n            if (targetRow !== row) {\n                grid[targetRow][col] = piece;\n                grid[row][col] = null;\n\n                piece.row = targetRow;\n                piece.updatePosition();\n                // await EffectManager.movePiece(piece.node, targetPos, 0.2);\n            }\n        }\n    }\n\n   \n    findLowestEmptyRow(col: number, startRow: number ,grid): number {\n        for (let row = grid.length - 1; row > startRow; row--) {\n            if (grid[row][col] === null) {\n                return row;\n            }\n        }\n        return startRow;\n    }\n    /*\n\n    async fillEmptySpaces() {\n        for (let col = 0; col < grid[0].length; col++) {\n            let emptyCount = 0;\n            for (let row = 0; row < grid.length; row++) {\n                if (grid[row][col] === null) {\n                    emptyCount++;\n                }\n            }\n\n            for (let i = 0; i < emptyCount; i++) {\n                const newPieceNode = PiecePool.getInstance().getPiece();\n                if (!newPieceNode) {\n                    console.error(\"PiecePool could not provide a new piece.\");\n                    continue;\n                }\n\n                const targetRow = this.findLowestEmptyRow(col, -1);\n                const newPiece = new Piece(targetRow, col, newPieceNode);\n                grid[targetRow][col] = newPiece;\n\n                const startPos = gridManager.getPositionForCell(-1, col);\n                const targetPos = gridManager.getPositionForCell(targetRow, col);\n\n                newPiece.node.setPosition(startPos);\n                await EffectManager.movePiece(newPiece.node, targetPos, 0.2);\n            }\n        }\n    }\n         */\n}"]}