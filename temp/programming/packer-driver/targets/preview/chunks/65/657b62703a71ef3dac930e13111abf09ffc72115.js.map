{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/DetectorAPI/DeviceDetector.ts"],"names":["DeviceDetector","BrowserDetector","DeviceUtils","OSDetector","PlatformDetector","VersionDetector","constructor","userAgent","detect","gatherDeviceInfo","navigator","vendor","window","opera","detectors","key","detector","staticInfoKeys","method","detectedInfo","reduce","info","staticInfo"],"mappings":"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","sourcesContent":["import { BrowserDetector } from \"./BrowserDetector\";\nimport { DeviceInfo } from \"./DeviceInfo\";\nimport { DeviceUtils } from \"./Deviceutils\";\nimport { OSDetector } from \"./OSDetector\";\nimport { PlatformDetector } from \"./PlatformDetector\";\nimport { VersionDetector } from \"./VersionDetector\";\n\n/**\n * `DeviceDetector` class provides device information based on the user agent.\n */\nexport class DeviceDetector {\n    /**\n     * User agent string.\n     */\n    private userAgent: string;\n\n    /**\n     * Constructs a `DeviceDetector` instance.\n     */\n    constructor() {\n        this.userAgent = navigator.userAgent || navigator.vendor || (window as any).opera;\n    }\n\n    /**\n     * Gathers device information.\n     * @returns A promise that resolves to a `DeviceInfo` object.\n     */\n    private async gatherDeviceInfo(): Promise<Partial<DeviceInfo>> {\n        const detectors = [\n            { key: 'os', detector: new OSDetector(this.userAgent) },\n            { key: 'browser', detector: new BrowserDetector(this.userAgent) },\n            { key: 'version', detector: new VersionDetector(this.userAgent) },\n            { key: 'platform', detector: new PlatformDetector(this.userAgent) },\n        ];\n\n        const staticInfoKeys = [\n            { key: 'mobile', method: 'isMobile' },\n            { key: 'screenSize', method: 'getScreenSize' },\n            { key: 'orientation', method: 'getOrientation' },\n            { key: 'touchSupported', method: 'isTouchSupported' },\n            { key: 'language', method: 'getLanguage' },\n            { key: 'onlineStatus', method: 'getOnlineStatus' }\n        ];\n\n        const detectedInfo = detectors.reduce((info, { key, detector }) => {\n            info[key] = detector.detect();\n            return info;\n        }, {});\n\n        const staticInfo = staticInfoKeys.reduce((info, { key, method }) => {\n            if (key === 'mobile') {\n                info[key] = DeviceUtils[method](this.userAgent);\n            } else {\n                info[key] = DeviceUtils[method]();\n            }\n            return info;\n        }, {});\n\n        return { ...detectedInfo, ...staticInfo };\n    }\n\n    /**\n     * Detects device information.\n     * @returns A promise that resolves to a `DeviceInfo` object.\n     */\n    public detect: () => Promise<DeviceInfo> = async () => await this.gatherDeviceInfo() as DeviceInfo;\n}\n"]}