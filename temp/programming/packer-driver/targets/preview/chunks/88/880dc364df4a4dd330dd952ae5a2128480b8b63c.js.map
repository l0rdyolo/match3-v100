{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","GridManager","SingletonComponent","ccclass","property","GravityHandler","grid","gridManager","onLoad","getInstance","applyGravity","console","log","moved","col","length","row"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;AAEAC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,kB,iBAAAA,kB;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;gCAGjBK,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb;AAAA;AAAA,oDACuE;AAAA;AAAA;AAAA,eAC3DC,IAD2D,GAChC,EADgC;AAAA,eAE3DC,WAF2D;AAAA;;AAInEC,QAAAA,MAAM,GAAG;AACL,gBAAMA,MAAN;AACA,eAAKD,WAAL,GAAmB;AAAA;AAAA,0CAAYE,WAAZ,EAAnB;AACA,eAAKH,IAAL,GAAY,KAAKC,WAAL,CAAiBD,IAA7B;AACH;;AAEKI,QAAAA,YAAY,GAAG;AAAA;;AAAA;AACjBC,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,gBAAIC,KAAK,GAAG,KAAZ;;AACA,eAAG;AACCA,cAAAA,KAAK,GAAG,KAAR;;AACA,mBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAI,CAACR,IAAL,CAAU,CAAV,EAAaS,MAArC,EAA6CD,GAAG,EAAhD,EAAoD;AAChD,qBAAK,IAAIE,GAAG,GAAG,KAAI,CAACV,IAAL,CAAUS,MAAV,GAAmB,CAAlC,EAAqCC,GAAG,GAAG,CAA3C,EAA8CA,GAAG,EAAjD,EAAqD;AACjD,sBAAI,KAAI,CAACV,IAAL,CAAUU,GAAV,EAAeF,GAAf,MAAwB,IAAxB,IAAgC,KAAI,CAACR,IAAL,CAAUU,GAAG,GAAG,CAAhB,EAAmBF,GAAnB,MAA4B,IAAhE,EAAsE;AAClE;AACAD,oBAAAA,KAAK,GAAG,IAAR;AACH;AACJ;AACJ;AACJ,aAVD,QAUSA,KAVT,EAJiB,CAgBjB;;AAhBiB;AAiBpB;AAEF;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA3EuE,O","sourcesContent":["import { _decorator, Component, Node, Vec3 } from 'cc';\nimport { Piece } from '../Piece/Piece';\nimport { GridManager } from '../Grid/GridManager';\nimport { SingletonComponent } from \"../SingletonComponent\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('GravityHandler')\nexport class GravityHandler extends SingletonComponent<GravityHandler> {\n    private grid: (Piece | null)[][] = [];\n    private gridManager: GridManager;\n\n    onLoad() {\n        super.onLoad();\n        this.gridManager = GridManager.getInstance();\n        this.grid = this.gridManager.grid;\n    }\n\n    async applyGravity() {\n        console.log(\"apply gravity!!!\");\n        \n        let moved = false;\n        do {\n            moved = false;\n            for (let col = 0; col < this.grid[0].length; col++) {\n                for (let row = this.grid.length - 1; row > 0; row--) {\n                    if (this.grid[row][col] === null && this.grid[row - 1][col] !== null) {\n                        // await this.movePieceDown(row - 1, col);\n                        moved = true;\n                    }\n                }\n            }\n        } while (moved);\n\n        // await this.fillEmptySpaces();\n    }\n\n   /* async movePieceDown(row: number, col: number) {\n        const piece = this.grid[row][col];\n        if (piece) {\n            const targetRow = this.findLowestEmptyRow(col, row);\n            if (targetRow !== row) {\n                this.grid[targetRow][col] = piece;\n                this.grid[row][col] = null;\n\n                piece.row = targetRow;\n                const targetPos = this.gridManager.getPositionForCell(targetRow, col);\n                await EffectManager.movePiece(piece.node, targetPos, 0.2);\n            }\n        }\n    }\n\n   \n    findLowestEmptyRow(col: number, startRow: number): number {\n        for (let row = this.grid.length - 1; row > startRow; row--) {\n            if (this.grid[row][col] === null) {\n                return row;\n            }\n        }\n        return startRow;\n    }\n\n    async fillEmptySpaces() {\n        for (let col = 0; col < this.grid[0].length; col++) {\n            let emptyCount = 0;\n            for (let row = 0; row < this.grid.length; row++) {\n                if (this.grid[row][col] === null) {\n                    emptyCount++;\n                }\n            }\n\n            for (let i = 0; i < emptyCount; i++) {\n                const newPieceNode = PiecePool.getInstance().getPiece();\n                if (!newPieceNode) {\n                    console.error(\"PiecePool could not provide a new piece.\");\n                    continue;\n                }\n\n                const targetRow = this.findLowestEmptyRow(col, -1);\n                const newPiece = new Piece(targetRow, col, newPieceNode);\n                this.grid[targetRow][col] = newPiece;\n\n                const startPos = this.gridManager.getPositionForCell(-1, col);\n                const targetPos = this.gridManager.getPositionForCell(targetRow, col);\n\n                newPiece.node.setPosition(startPos);\n                await EffectManager.movePiece(newPiece.node, targetPos, 0.2);\n            }\n        }\n    }\n         */\n}"]}