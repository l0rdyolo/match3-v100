{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Color","Sprite","Vec3","SingletonComponent","GridGenerator","GameGlobal","SliderManager","MatchChecker","GravityHandler","PiecePool","ccclass","property","GridManager","_grid","gridGenerator","sliderManager","matchChecker","gravityHandler","gridWidth","gridHeight","gridOffset","colors","red","black","blue","yellow","grid","onLoad","init","highlightGridCorners","node","getComponentInChildren","color","start","getComponent","Generate","length","offsetDiff","PIECE_OFFSET","piecePositionsDiff","gridX","setPosition","SwapPieces","pieceA","pieceB","Slide","pa_row","row","pa_col","col","pb_row","pb_col","tempA","tempB","deleteMatches","matches","fillPromises","matchedPiece","delete","push","Promise","resolve","all","handleSelection","checkForMatches","emptyPieces","applyGravity","sleep","fillEmptySpaces","ms","setTimeout","piece","newPieceNode","getInstance","getPiece","setParent","addChild","updatePosition","consoleGrid","emptyCounter","i","j","currentPiece","isEmpty","console","log"],"mappings":"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","sourcesContent":["import { _decorator, Color, Sprite, Vec3 } from \"cc\";\r\nimport { SingletonComponent } from \"../SingletonComponent\";\r\nimport { Piece } from \"../Piece/Piece\";\r\nimport { GridGenerator } from \"./GridGenerator\";\r\nimport { GameGlobal } from \"../Game/GameGlobal\";\r\nimport { SliderManager } from \"../Interaction/SliderManager\";\r\nimport { MatchChecker } from \"../Match/MatchChecker\";\r\nimport { GravityHandler } from \"./GravityHandler\";\r\nimport { PiecePool } from \"../Piece/PiecePool\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"GridManager\")\r\nexport class GridManager extends SingletonComponent<GridManager> {\r\n  private _grid: Piece[][];\r\n\r\n  private gridGenerator: GridGenerator = null;\r\n  private sliderManager: SliderManager = null;\r\n  private matchChecker: MatchChecker = null;\r\n  private gravityHandler: GravityHandler = null;\r\n\r\n  private gridWidth: number = 0;\r\n  public gridHeight: number = 0;\r\n  private gridOffset: number = 0;\r\n\r\n  private colors = {\r\n    red: new Color(255, 0, 0),\r\n    black: new Color(0, 0, 0),\r\n    blue: new Color(0, 0, 255),\r\n    yellow: new Color(255, 255, 0),\r\n  };\r\n\r\n  get grid() {\r\n    return this._grid;\r\n  }\r\n\r\n  protected onLoad(): void {\r\n    super.onLoad();\r\n    this.init();\r\n  }\r\n\r\n  protected init(): void {\r\n    this.sliderManager = new SliderManager();\r\n    this.matchChecker = new MatchChecker();\r\n    this.gravityHandler = new GravityHandler();\r\n  }\r\n\r\n  highlightGridCorners() {\r\n    this._grid[0][0].node.getComponentInChildren(Sprite).color =\r\n      this.colors.black;\r\n    this._grid[this.gridHeight - 1][0].node.getComponentInChildren(\r\n      Sprite\r\n    ).color = this.colors.yellow;\r\n    this._grid[0][this.gridWidth - 1].node.getComponentInChildren(\r\n      Sprite\r\n    ).color = this.colors.blue;\r\n    this._grid[this.gridHeight - 1][\r\n      this.gridWidth - 1\r\n    ].node.getComponentInChildren(Sprite).color = this.colors.red;\r\n  }\r\n\r\n  start() {\r\n    this.gridGenerator = this.node.getComponent(GridGenerator);\r\n    this._grid = this.gridGenerator.Generate();\r\n    this.gridWidth = this._grid[0].length;\r\n    this.gridHeight = this._grid.length;\r\n\r\n    const offsetDiff = (GameGlobal.PIECE_OFFSET / 2) * this.gridWidth;\r\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\r\n\r\n    const gridX = piecePositionsDiff + offsetDiff;\r\n    this.node.setPosition(new Vec3(gridX, -200, 0));\r\n    // this.highlightGridCorners();\r\n  }\r\n\r\n  async SwapPieces(pieceA: Piece, pieceB: Piece) {\r\n    await this.sliderManager.Slide(pieceA, pieceB);\r\n\r\n    const pa_row = pieceA.row;\r\n    const pa_col = pieceA.col;\r\n\r\n    const pb_row = pieceB.row;\r\n    const pb_col = pieceB.col;\r\n\r\n    pieceA.row = pb_row;\r\n    pieceA.col = pb_col;\r\n\r\n    pieceB.row = pa_row;\r\n    pieceB.col = pa_col;\r\n\r\n    const tempA = this.grid[pa_row][pa_col];\r\n    const tempB = this.grid[pb_row][pb_col];\r\n\r\n    this.grid[pa_row][pa_col] = tempB;\r\n    this.grid[pb_row][pb_col] = tempA;\r\n  }\r\n\r\n  async deleteMatches(matches: Piece[]) {\r\n    const fillPromises: Promise<void>[] = [];\r\n\r\n    for (const matchedPiece of matches) {\r\n      matchedPiece.delete();\r\n      fillPromises.push(\r\n        new Promise<void>((resolve) => {\r\n          resolve();\r\n        })\r\n      );\r\n    }\r\n    await Promise.all(fillPromises);\r\n  }\r\n  async handleSelection(pieceA: Piece, pieceB: Piece) {\r\n    await this.SwapPieces(pieceA, pieceB);\r\n    let matches: Piece[] = await this.matchChecker.checkForMatches(\r\n      pieceA,\r\n      pieceB,\r\n      this.grid\r\n    );\r\n    if (matches.length > 0) {\r\n      await this.deleteMatches(matches);\r\n      let emptyPieces = await this.gravityHandler.applyGravity(this.grid);\r\n      await this.sleep(1000);\r\n      await this.fillEmptySpaces(emptyPieces);\r\n      await this.sleep(900);\r\n\r\n      //buraya bir sleep patlar\r\n      /*\r\n      let newMatches: Piece[] = await this.matchChecker.checkForMatchesAfterGravity(this.grid);\r\n\r\n      while (newMatches.length > 0) { \r\n          await this.deleteMatches(newMatches);\r\n          await this.gravityHandler.applyGravity(this.grid);\r\n          await this.sleep(3000);\r\n          await this.fillEmptySpaces();\r\n          await this.sleep(1900);\r\n\r\n          newMatches = await this.matchChecker.checkForMatchesAfterGravity(this.grid);\r\n      }\r\n\r\n      */\r\n    } else {\r\n      await this.SwapPieces(pieceA, pieceB);\r\n    }\r\n  }\r\n\r\n  sleep(ms: number) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  private async fillEmptySpaces(emptyPieces: Piece[]) {\r\n    for (const piece of emptyPieces) {\r\n      const newPieceNode = PiecePool.getInstance().getPiece();\r\n      piece.node = newPieceNode;\r\n      piece.node.setParent(this.node);\r\n      this.node.addChild(piece.node);\r\n      piece.updatePosition();\r\n    }\r\n  }\r\n\r\n  consoleGrid() {\r\n    let emptyCounter = 0;\r\n    let row = [];\r\n    for (let i = 0; i < this.gridWidth; i++) {\r\n      let col = [];\r\n      for (let j = 0; j < this.gridHeight; j++) {\r\n        const currentPiece = this.grid[i][j];\r\n        col.push(currentPiece);\r\n\r\n        if (currentPiece.isEmpty) {\r\n          emptyCounter++;\r\n        }\r\n      }\r\n      row.push(col);\r\n    }\r\n    console.log(row);\r\n\r\n    // emptyCounter === 0\r\n    //   ? console.log(\"boş piece yok\")\r\n    //   : console.log(`boş piece sayısı : ${emptyCounter}`);\r\n  }\r\n}\r\n"]}