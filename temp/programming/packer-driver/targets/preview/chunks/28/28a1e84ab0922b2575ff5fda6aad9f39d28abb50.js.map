{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Runtime/TaskSystem/TaskSystem.ts"],"names":["TaskSystem","AsyncLock","_lock","_taskQueue","_cts","AbortController","isCancelled","taskCount","length","addTaskAsync","task","Error","release","acquire","push","runTaskAsync","nextTask","shift","execute","error","signal","aborted","console","warn","cancelTasks","abort","renewTaskSystem"],"mappings":";;;yCAGaA,U;;;;;;;;;;;;;;;;;;;;;;AAHJC,MAAAA,S,iBAAAA,S;;;;;;;4BAGID,U,GAAN,MAAMA,UAAN,CAAiB;AAAA;AAAA,eACZE,KADY,GACJ;AAAA;AAAA,uCADI;AAAA,eAEZC,UAFY,GAEU,EAFV;AAAA,eAGZC,IAHY,GAGL,IAAIC,eAAJ,EAHK;AAAA,eAIbC,WAJa,GAIU,KAJV;AAAA;;AAMA,YAATC,SAAS,GAAW;AAC3B,iBAAO,KAAKJ,UAAL,CAAgBK,MAAvB;AACH;;AAEYC,QAAAA,YAAY,CAACC,IAAD,EAA6B;AAAA;;AAAA;AAClD,gBAAI,CAACA,IAAL,EAAW,MAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AAEX,gBAAMC,OAAO,SAAS,KAAI,CAACV,KAAL,CAAWW,OAAX,EAAtB;;AACA,gBAAI;AACA,cAAA,KAAI,CAACV,UAAL,CAAgBW,IAAhB,CAAqBJ,IAArB;;AACA,kBAAI,KAAI,CAACP,UAAL,CAAgBK,MAAhB,KAA2B,CAA/B,EAAkC;AAC9B,sBAAM,KAAI,CAACO,YAAL,EAAN;AACH;AACJ,aALD,SAKU;AACNH,cAAAA,OAAO;AACV;AAXiD;AAYrD;;AAEaG,QAAAA,YAAY,GAAkB;AAAA;;AAAA;AACxC,mBAAO,MAAI,CAACZ,UAAL,CAAgBK,MAAhB,GAAyB,CAAhC,EAAmC;AAC/B,kBAAMQ,QAAQ,GAAG,MAAI,CAACb,UAAL,CAAgBc,KAAhB,EAAjB;;AACA,kBAAI;AACA,sBAAMD,QAAQ,CAACE,OAAT,CAAiB,MAAI,CAACd,IAAtB,CAAN;AACH,eAFD,CAEE,OAAOe,KAAP,EAAmB;AACjB,oBAAI,MAAI,CAACf,IAAL,CAAUgB,MAAV,CAAiBC,OAArB,EAA8B;AAC1BC,kBAAAA,OAAO,CAACC,IAAR,CAAa,6BAAb;AACA;AACH;;AACDD,gBAAAA,OAAO,CAACH,KAAR,kCAA6CA,KAA7C;AACA,sBAAMA,KAAN;AACH;AACJ;AAbuC;AAc3C;;AAEMK,QAAAA,WAAW,GAAS;AACvB,eAAKpB,IAAL,CAAUqB,KAAV;;AACA,eAAKtB,UAAL,GAAkB,EAAlB;AACA,eAAKG,WAAL,GAAmB,IAAnB;AACH;;AAEMoB,QAAAA,eAAe,GAAS;AAC3B,eAAKpB,WAAL,GAAmB,KAAnB;AACA,eAAKF,IAAL,GAAY,IAAIC,eAAJ,EAAZ;AACH;;AAjDmB,O","sourcesContent":["import { AsyncLock } from \"./AsyncLock\";\nimport { ITask } from \"./ITask\";\n\nexport class TaskSystem {\n    private _lock = new AsyncLock();\n    private _taskQueue: ITask[] = [];\n    private _cts = new AbortController();\n    public isCancelled: boolean = false;\n\n    public get taskCount(): number {\n        return this._taskQueue.length;\n    }\n\n    public async addTaskAsync(task: ITask): Promise<void> {\n        if (!task) throw new Error(\"Task is null\");\n\n        const release = await this._lock.acquire();\n        try {\n            this._taskQueue.push(task);\n            if (this._taskQueue.length === 1) {\n                await this.runTaskAsync();\n            }\n        } finally {\n            release();\n        }\n    }\n\n    private async runTaskAsync(): Promise<void> {\n        while (this._taskQueue.length > 0) {\n            const nextTask = this._taskQueue.shift()!;\n            try {\n                await nextTask.execute(this._cts);\n            } catch (error: any) {\n                if (this._cts.signal.aborted) {\n                    console.warn(\"Warning: Task was cancelled\");\n                    break;\n                }\n                console.error(`Error while executing task: ${error}`);\n                throw error;\n            }\n        }\n    }\n\n    public cancelTasks(): void {\n        this._cts.abort();\n        this._taskQueue = [];\n        this.isCancelled = true;\n    }\n\n    public renewTaskSystem(): void {\n        this.isCancelled = false;\n        this._cts = new AbortController();\n    }\n}\n"]}