{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Piece/Piece.ts"],"names":["Piece","Node","ParticleSystem2D","tween","Vec3","SelectionManager","GameGlobal","constructor","row","col","node","type","m_isEmpty","isMatched","particle","spriteNode","on","EventType","TOUCH_START","onTouch","getComponentInChildren","getChildByName","init","setPosition","isEmpty","console","log","getInstance","eventTarget","emit","_row","_col","PIECE_CONTENT_SIZE","PIECE_OFFSET","piecePostion","updatePosition","to","position","start","matched","resetSystem","playOnLoad","Promise","resolve","scale","call","clearPiece","Shake","shakeAmount","duration","originalPosition","getPosition","by","setSelection","Highlight","cancelSelection","ResetScale","easing","moveToPosition","newPos","startPos","clone","targetPos","x","y","z","onUpdate","target","ratio","currentPos","lerp","assingPiece","off"],"mappings":"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","sourcesContent":["import {\r\n  easing,\r\n  Node,\r\n  ParticleSystem2D,\r\n  removeProperty,\r\n  SpriteRenderer,\r\n  tween,\r\n  Vec3,\r\n} from \"cc\";\r\nimport { IPiece } from \"./IPiece\";\r\nimport { PieceTypes } from \"./PieceTypes\";\r\nimport { SelectionManager } from \"../Interaction/SelectionManager\";\r\nimport { GameGlobal } from \"../Game/GameGlobal\";\r\n\r\nexport class Piece implements IPiece {\r\n  public row: number = -1!;\r\n  public col: number = -1!;\r\n  public node: Node;\r\n  public type: PieceTypes = null;\r\n\r\n  private m_isEmpty = false;\r\n  public isMatched: boolean = false;\r\n  private particle: ParticleSystem2D = null;\r\n  private spriteNode: Node = null;\r\n  public constructor(row: number, col: number, node: Node, type: PieceTypes) {\r\n    this.row = row;\r\n    this.col = col;\r\n    this.node = node;\r\n    this.type = type;\r\n    this.node.on(Node.EventType.TOUCH_START, this.onTouch, this);\r\n    this.m_isEmpty = false;\r\n    this.particle = this.node.getComponentInChildren(ParticleSystem2D);\r\n    this.spriteNode = this.node.getChildByName(\"Sprite\");\r\n  }\r\n\r\n  init() {\r\n    this.setPosition(this.row, this.col);\r\n  }\r\n\r\n  onTouch() {\r\n    if (this.isEmpty) return;\r\n    console.log(this.row, this.col);\r\n\r\n    SelectionManager.getInstance().eventTarget.emit(\"piece-selected\", this);\r\n  }\r\n\r\n  public get isEmpty(): boolean {\r\n    const m_isEmpty = this.node ? false : true;\r\n    return m_isEmpty;\r\n  }\r\n\r\n  setPosition(_row: number, _col: number) {\r\n    const row =\r\n      _row * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET);\r\n    const col =\r\n      _col * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET);\r\n    const piecePostion = new Vec3(col, row);\r\n    this.node.setPosition(piecePostion);\r\n  }\r\n\r\n  updatePosition(_row = this.row, _col = this.col) {\r\n    // const newX = row //* GameGlobal.PIECE_CONTENT_SIZE;\r\n    // const newY = col //* GameGlobal.PIECE_CONTENT_SIZE;\r\n    // this.setPosition(newX,newY);\r\n    const row =\r\n      _row * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET);\r\n    const col =\r\n      _col * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET);\r\n    const piecePostion = new Vec3(col, row);\r\n\r\n    tween(this.node).to(0.2, { position: piecePostion }).start();\r\n  }\r\n\r\n  async matched(): Promise<void> {\r\n    this.isMatched = true;\r\n    if (this.particle) {\r\n      this.particle.resetSystem();\r\n      this.particle.playOnLoad = true;\r\n    }\r\n    if (this.spriteNode) {\r\n      await new Promise<void>((resolve) => {\r\n        tween(this.spriteNode)\r\n          .to(0.2, { scale: new Vec3(0, 0, 0) })\r\n          .call(resolve)\r\n          .start();\r\n      });\r\n    }\r\n    this.clearPiece();\r\n  }\r\n\r\n  public async Shake(shakeAmount: number = 10, duration: number = 0.3) {\r\n    if (this.isEmpty) return;\r\n    const originalPosition = this.node?.getPosition();\r\n\r\n    return new Promise<void>((resolve) => {\r\n      if (this.node) {\r\n        tween(this.node)\r\n          .by(duration / 4, { position: new Vec3(shakeAmount, 0, 0) })\r\n          .by(duration / 4, { position: new Vec3(-shakeAmount * 2, 0, 0) })\r\n          .by(duration / 4, { position: new Vec3(shakeAmount * 2, 0, 0) })\r\n          .by(duration / 4, { position: new Vec3(-shakeAmount, 0, 0) })\r\n          .call(() => {\r\n            this.node?.setPosition(originalPosition);\r\n            resolve();\r\n          })\r\n          .start();\r\n      }\r\n    });\r\n  }\r\n\r\n  public setSelection(): Piece {\r\n    this.Highlight();\r\n    return this;\r\n  }\r\n\r\n  public cancelSelection() {\r\n    this.ResetScale();\r\n    return null;\r\n  }\r\n\r\n  public Highlight(\r\n    duration: number = 0.1,\r\n    scale: Vec3 = new Vec3(1.1, 1.1, 1.1)\r\n  ) {\r\n    tween(this.node)\r\n      .to(duration, { scale: scale }, { easing: \"expoOut\" })\r\n      .start();\r\n  }\r\n\r\n  public ResetScale(duration: number = 0.1) {\r\n    tween(this.node)\r\n      .to(duration, { scale: new Vec3(1, 1, 1) })\r\n      .start();\r\n  }\r\n\r\n  public moveToPosition(newPos: Vec3, duration: number = 0.2): Promise<void> {\r\n    return new Promise<void>((resolve) => {\r\n      const startPos = this.node.position.clone();\r\n      const targetPos = new Vec3(\r\n        newPos.x * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET),\r\n        newPos.y * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET),\r\n        newPos.z\r\n      );\r\n      tween(this.node)\r\n        .to(\r\n          duration,\r\n          { position: targetPos },\r\n          {\r\n            easing: \"quartOut\",\r\n            onUpdate: (target: Node, ratio: number) => {\r\n              const currentPos = new Vec3();\r\n              Vec3.lerp(currentPos, startPos, targetPos, ratio);\r\n              target.setPosition(currentPos);\r\n            },\r\n          }\r\n        )\r\n        .call(() => {\r\n          this.row = newPos.y;\r\n          this.col = newPos.x;\r\n          resolve();\r\n        })\r\n        .start();\r\n    });\r\n  }\r\n\r\n  public assingPiece(node: Node) {\r\n    this.node = node;\r\n    this.node.on(Node.EventType.TOUCH_START, this.onTouch, this);\r\n    this.particle = this.node.getComponentInChildren(ParticleSystem2D);\r\n    this.spriteNode = this.node.getChildByName(\"Sprite\");\r\n    this.isMatched = false;\r\n  }\r\n\r\n  public clearPiece() {\r\n    if (this.node) {\r\n      this.node.off(Node.EventType.TOUCH_START, this.onTouch, this);\r\n    }\r\n    this.node = null;\r\n    this.particle = null;\r\n    this.spriteNode = null;\r\n  }\r\n}\r\n"]}