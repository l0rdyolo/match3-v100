{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Node","Vec3","CCInteger","Piece","InteractionManager","PieceTypes","PiecePool","SelectionManager","ccclass","property","GridGenerator","grid","PIECE_OFFSET","PIECE_CONTENT_SIZE","interactionManager","start","Generate","row","width","col","pieceNode","createPiece","piece","Normal","node","on","EventType","TOUCH_START","Instance","onPieceSelected","height","getPiece","setParent","setPosition","getCenteredPosition","addChild","createsMatch","name","j","i","_j","_i"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, CCInteger } from \"cc\";\r\nimport { Piece } from \"../Piece/Piece\";\r\nimport { InteractionManager } from \"../Interaction/InteractionManager\";\r\nimport { PieceTypes } from \"../Piece/PieceTypes\";\r\nimport { PiecePool } from \"../Piece/PiecePool\";\r\nimport { SelectionManager } from \"../Interaction/SelectionManager\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"GridManager\")\r\nexport class GridGenerator extends Component {\r\n  public grid: Piece[][] = [];\r\n\r\n  private PIECE_OFFSET: number = 5;\r\n\r\n  @property(CCInteger)\r\n  private width: number = 0;\r\n\r\n  @property(CCInteger)\r\n  private height: number = 0;\r\n\r\n  private PIECE_CONTENT_SIZE: number = 100; //dinamikleştir\r\n\r\n  private interactionManager: InteractionManager = new InteractionManager();\r\n\r\n  protected start(): void {\r\n    //!TODO: grid yerleşmesini ve content size'ı responsive yapmalıyız\r\n    // this.node.setPosition(-7*50, -500);\r\n    this.Generate();\r\n  }\r\n\r\n  //! todo rowlari tweenleyebiliriz\r\n  public async Generate() {\r\n    for (let row = 0; row < this.width; row++) {\r\n      this.grid[row] = []\r\n      for (let col = 0; col < this.height; col++) {\r\n        const pieceNode = this.createPiece(row, col);\r\n        const piece = new Piece(row , col , pieceNode , PieceTypes.Normal);\r\n        piece.node.on(Node.EventType.TOUCH_START, () => {\r\n          SelectionManager.Instance.onPieceSelected(piece);\r\n        });\r\n        this.grid[row][col] = piece;\r\n      }\r\n    }\r\n  }\r\n\r\n  //bu fonksiyon init olurken match var mı diye kontrol edip piece üretiyor.\r\n  private createPiece(row: number, col: number): Node {\r\n    let piece: Node;\r\n    do {\r\n      piece = PiecePool.Instance.getPiece();\r\n      if(!piece) continue; \r\n      piece!.setParent(this.node);\r\n      piece!.setPosition(this.getCenteredPosition(col, row));\r\n      this.node.addChild(piece!);  \r\n    } while (this.createsMatch(piece!, row, col, this.grid));\r\n    return piece!;\r\n  }\r\n\r\n  private createsMatch(\r\n    piece: Node,\r\n    row: number,\r\n    col: number,\r\n    grid: Piece[][]\r\n  ): boolean {\r\n    return false;\r\n    if (\r\n      row >= 2 &&\r\n      grid[row - 1][col]?.node.name === piece.name &&\r\n      grid[row - 2][col]?.node.name === piece.name\r\n    ) {\r\n      // this.piecesPool.returnPieceToPool(piece);\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      col >= 2 &&\r\n      grid[row][col - 1]?.node.name === piece.name &&\r\n      grid[row][col - 2]?.node.name === piece.name\r\n    ) {\r\n      // this.piecesPool.returnPieceToPool(piece);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private getCenteredPosition(j: number, i: number): Vec3 {\r\n    //EVERY game board should be square matrix\r\n    const _j = j * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\r\n    const _i = i * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\r\n    return new Vec3(_j, _i);\r\n  }\r\n}\r\n"]}