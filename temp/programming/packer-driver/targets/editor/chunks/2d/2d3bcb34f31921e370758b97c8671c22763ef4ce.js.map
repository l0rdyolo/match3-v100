{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Color","Sprite","Vec3","SingletonComponent","GridGenerator","GameGlobal","SliderManager","MatchChecker","GravityHandler","PiecePool","ccclass","property","GridManager","_grid","gridGenerator","sliderManager","matchChecker","gravityHandler","gridWidth","gridHeight","gridOffset","colors","red","black","blue","yellow","grid","onLoad","init","getRandomColor","r","Math","random","g","b","highlightGridCorners","node","getComponentInChildren","color","start","getComponent","Generate","length","offsetDiff","PIECE_OFFSET","piecePositionsDiff","gridX","setPosition","deleteMatches","matches","matchedPiece","matched","handleSelection","pieceA","pieceB","SwapPieces","checkForMatches","sleep","applyGravity","fillEmptySpaces","checkForMatchesAfterGravity","ms","Promise","resolve","setTimeout","fillPromises","row","col","piece","isEmpty","newPieceNode","getInstance","getPiece","setParent","addChild","assingPiece","ResetScale","updatePosition","push","consoleGrid","emptyCounter","i","j","currentPiece","console","log"],"mappings":"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","sourcesContent":["import { _decorator, Color, Sprite, Vec3 } from \"cc\";\r\nimport { SingletonComponent } from \"../SingletonComponent\";\r\nimport { Piece } from \"../Piece/Piece\";\r\nimport { GridGenerator } from \"./GridGenerator\";\r\nimport { GameGlobal } from \"../Game/GameGlobal\";\r\nimport { SliderManager } from \"../Interaction/SliderManager\";\r\nimport { MatchChecker } from \"../Match/MatchChecker\";\r\nimport { GravityHandler } from \"./GravityHandler\";\r\nimport { PiecePool } from \"../Piece/PiecePool\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"GridManager\")\r\nexport class GridManager extends SingletonComponent<GridManager> {\r\n  private _grid: Piece[][];\r\n\r\n  private gridGenerator: GridGenerator = null;\r\n  private sliderManager: SliderManager = null;\r\n  private matchChecker: MatchChecker = null;\r\n  private gravityHandler: GravityHandler = null;\r\n\r\n  private gridWidth: number = 0;\r\n  public gridHeight: number = 0;\r\n  private gridOffset: number = 0;\r\n\r\n  private colors = {\r\n    red: new Color(255, 0, 0),\r\n    black: new Color(0, 0, 0),\r\n    blue: new Color(0, 0, 255),\r\n    yellow: new Color(255, 255, 0),\r\n  };\r\n\r\n  get grid() {\r\n    return this._grid;\r\n  }\r\n\r\n  protected onLoad(): void {\r\n    super.onLoad();\r\n    this.init();\r\n  }\r\n\r\n  protected init(): void {\r\n    this.sliderManager = new SliderManager();\r\n    this.matchChecker = new MatchChecker();\r\n    this.gravityHandler = new GravityHandler();\r\n  }\r\n\r\n  getRandomColor(): Color {\r\n    const r = Math.random();\r\n    const g = Math.random();\r\n    const b = Math.random();\r\n    return new Color(r, g, b, 1); \r\n}\r\n  highlightGridCorners() {\r\n    this._grid[0][0].node.getComponentInChildren(Sprite).color =\r\n      this.colors.black;\r\n    this._grid[this.gridHeight - 1][0].node.getComponentInChildren(\r\n      Sprite\r\n    ).color = this.colors.yellow;\r\n    this._grid[0][this.gridWidth - 1].node.getComponentInChildren(\r\n      Sprite\r\n    ).color = this.colors.blue;\r\n    this._grid[this.gridHeight - 1][\r\n      this.gridWidth - 1\r\n    ].node.getComponentInChildren(Sprite).color = this.colors.red;\r\n  }\r\n\r\n  start() {\r\n    this.gridGenerator = this.node.getComponent(GridGenerator);\r\n    this._grid = this.gridGenerator.Generate();\r\n    this.gridWidth = this._grid[0].length;\r\n    this.gridHeight = this._grid.length;\r\n\r\n    const offsetDiff = (GameGlobal.PIECE_OFFSET / 2) * this.gridWidth;\r\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\r\n\r\n    const gridX = piecePositionsDiff + offsetDiff;\r\n    this.node.setPosition(new Vec3(gridX, -200, 0));\r\n    // this.highlightGridCorners();\r\n  }\r\n\r\n\r\n  async deleteMatches(matches: Piece[]) {\r\n    for (const matchedPiece of matches) {\r\n      matchedPiece.matched();\r\n    }\r\n  }\r\n  async handleSelection(pieceA: Piece, pieceB: Piece) {\r\n    await this.sliderManager.SwapPieces(pieceA, pieceB);\r\n\r\n    let matches: Piece[] = await this.matchChecker.checkForMatches(\r\n      pieceA,\r\n      pieceB,\r\n      this._grid\r\n    );\r\n\r\n    if (matches.length === 0) {\r\n      await this.sliderManager.SwapPieces(pieceA, pieceB);\r\n      return;\r\n    }\r\n\r\n    while (matches.length > 0) {\r\n      await this.deleteMatches(matches);\r\n      await this.sleep(1000);\r\n      await this.gravityHandler.applyGravity(this._grid);\r\n      await this.sleep(1000);\r\n      await this.fillEmptySpaces();\r\n      await this.sleep(1000);\r\n      await this.matchChecker.checkForMatchesAfterGravity(this._grid);\r\n      await this.sleep(900);\r\n    }\r\n  }\r\n\r\n  //! şunu başka yere taşı ya da kaldır\r\n  sleep(ms: number) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  private async fillEmptySpaces() {\r\n    const grid = this.grid;\r\n    const fillPromises: Promise<void>[] = [];\r\n\r\n    for (let row = 0; row < this.gridHeight; row++) {\r\n      for (let col = 0; col < this.gridWidth; col++) {\r\n        const piece = grid[row][col];\r\n\r\n        if (piece.isEmpty) {\r\n          const newPieceNode = PiecePool.getInstance().getPiece();\r\n          newPieceNode.setParent(this.node);\r\n          this.node.addChild(newPieceNode);\r\n          newPieceNode.getComponentInChildren(Sprite).color = this.getRandomColor();\r\n\r\n          piece.assingPiece(newPieceNode);\r\n          piece.ResetScale();\r\n          piece.updatePosition(row, col);\r\n\r\n          fillPromises.push(\r\n            new Promise<void>((resolve) => {\r\n              resolve();\r\n            })\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  consoleGrid() {\r\n    let emptyCounter = 0;\r\n    let row = [];\r\n    for (let i = 0; i < this.gridWidth; i++) {\r\n      let col = [];\r\n      for (let j = 0; j < this.gridHeight; j++) {\r\n        const currentPiece = this.grid[i][j];\r\n        col.push(currentPiece);\r\n\r\n        if (currentPiece.isEmpty) {\r\n          emptyCounter++;\r\n        }\r\n      }\r\n      row.push(col);\r\n    }\r\n    console.log(row);\r\n\r\n    // emptyCounter === 0\r\n    //   ? console.log(\"boş piece yok\")\r\n    //   : console.log(`boş piece sayısı : ${emptyCounter}`);\r\n  }\r\n}\r\n"]}