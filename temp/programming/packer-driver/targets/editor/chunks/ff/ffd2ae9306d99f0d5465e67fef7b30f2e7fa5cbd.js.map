{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","tween","Vec3","GridManager","GameGlobal","ccclass","property","GravityHandler","applyGravity","grid","getInstance","rows","length","cols","y","x","piece","node","console","log","name","newX","row","movePiece","newRow","col","newY","PIECE_CONTENT_SIZE","PIECE_OFFSET","Promise","resolve","to","position","call","start"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,I,OAAAA,I;;AAEpCC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,U,iBAAAA,U;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;gCAGjBQ,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCP,SADpC,CAC8C;AAExB,cAAZQ,YAAY,GAAG;AACjB,gBAAMC,IAAI,GAAG;AAAA;AAAA,0CAAYC,WAAZ,GAA0BD,IAAvC;AACA,gBAAME,IAAI,GAAGF,IAAI,CAACG,MAAlB;AACA,gBAAMC,IAAI,GAAGJ,IAAI,CAAC,CAAD,CAAJ,CAAQG,MAArB,CAHiB,CAKjB;;AACA,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAApB,EAA0BC,CAAC,EAA3B,EAA+B;AAC3B,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,GAAG,CAA3B,EAA8BI,CAAC,EAA/B,EAAmC;AAAG;AAClC,kBAAIC,KAAK,GAAGP,IAAI,CAACM,CAAD,CAAJ,CAAQD,CAAR,CAAZ,CAD+B,CAG/B;;AACA,kBAAI,CAACE,KAAD,IAAUA,KAAK,CAACC,IAAN,KAAe,IAA7B,EAAmC;AACnCC,cAAAA,OAAO,CAACC,GAAR,CAAa,IAAGJ,CAAE,MAAKD,CAAE,OAAME,KAAK,CAACC,IAAN,CAAWG,IAAK,EAA/C;AAEA,kBAAIC,IAAI,GAAGN,CAAX,CAP+B,CAS/B;;AACA,qBAAOM,IAAI,GAAG,CAAP,GAAWV,IAAX,IAAmB,CAACF,IAAI,CAACY,IAAI,GAAG,CAAR,CAAJ,CAAeP,CAAf,EAAkBG,IAA7C,EAAmD;AAC/CI,gBAAAA,IAAI;AACP,eAZ8B,CAc/B;;;AACA,kBAAIA,IAAI,KAAKN,CAAb,EAAgB;AACZN,gBAAAA,IAAI,CAACY,IAAD,CAAJ,CAAWP,CAAX,IAAgBE,KAAhB,CADY,CACY;;AACxBP,gBAAAA,IAAI,CAACM,CAAD,CAAJ,CAAQD,CAAR,IAAa,IAAb,CAFY,CAEQ;;AAEpBE,gBAAAA,KAAK,CAACM,GAAN,GAAYD,IAAZ,CAJY,CAIO;;AACnB,sBAAM,KAAKE,SAAL,CAAeP,KAAf,EAAsBK,IAAtB,EAA4BP,CAA5B,CAAN,CALY,CAK2B;AAC1C;AACJ;AACJ;AACJ;;AAEDS,QAAAA,SAAS,CAACP,KAAD,EAAeQ,MAAf,EAA+BC,GAA/B,EAA2D;AAChE,gBAAMC,IAAI,GAAGF,MAAM,IAAI;AAAA;AAAA,wCAAWG,kBAAX,GAAgC;AAAA;AAAA,wCAAWC,YAA/C,CAAnB;AAEA,iBAAO,IAAIC,OAAJ,CAAmBC,OAAD,IAAa;AAClC7B,YAAAA,KAAK,CAACe,KAAK,CAACC,IAAP,CAAL,CACKc,EADL,CACQ,GADR,EACa;AAAEC,cAAAA,QAAQ,EAAE,IAAI9B,IAAJ,CAASc,KAAK,CAACC,IAAN,CAAWe,QAAX,CAAoBjB,CAA7B,EAAgCW,IAAhC,EAAsC,CAAtC;AAAZ,aADb,EAEKO,IAFL,CAEU,MAAMH,OAAO,EAFvB,EAGKI,KAHL;AAIH,WALM,CAAP;AAMH;;AA5CyC,O","sourcesContent":["import { _decorator, Component, Node, tween, Vec3 } from 'cc';\nimport { Piece } from '../Piece/Piece';\nimport { GridManager } from '../Grid/GridManager';\nimport { GameGlobal } from '../Game/GameGlobal';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GravityHandler')\nexport class GravityHandler extends Component {\n\n    async applyGravity() {\n        const grid = GridManager.getInstance().grid;\n        const rows = grid.length;\n        const cols = grid[0].length;\n\n        // Grid'i dolaş\n        for (let y = 0; y < cols; y++) {\n            for (let x = 1; x < rows - 1; x++) {  // En alt satırdan bir üstünden başlayarak yukarı doğru git\n                let piece = grid[x][y];\n\n                // Eğer hücre boşsa devam et\n                if (!piece || piece.node === null) continue;\n                console.log(`[${x} , ${y}] , ${piece.node.name}`);\n                \n                let newX = x;\n\n                // Altındaki hücre boş olduğu sürece bu işlemi yap\n                while (newX + 1 < rows && !grid[newX + 1][y].node) {\n                    newX++;\n                }\n\n                // Eğer yeni bir pozisyon bulduysak, taşı\n                if (newX !== x) {\n                    grid[newX][y] = piece;  // Yeni pozisyona taşı\n                    grid[x][y] = null;  // Eski pozisyonu boşalt\n\n                    piece.row = newX;  // Yeni satırı güncelle\n                    await this.movePiece(piece, newX, y);  // Parçayı hareket ettir\n                }\n            }\n        }\n    }\n\n    movePiece(piece: Piece, newRow: number, col: number): Promise<void> {\n        const newY = newRow * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET);\n\n        return new Promise<void>((resolve) => {\n            tween(piece.node)\n                .to(0.3, { position: new Vec3(piece.node.position.x, newY, 0) })\n                .call(() => resolve())\n                .start();\n        });\n    }\n}\n"]}