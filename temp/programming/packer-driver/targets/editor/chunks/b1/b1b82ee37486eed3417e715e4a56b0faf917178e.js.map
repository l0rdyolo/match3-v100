{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/DetectorAPI/Detector.ts"],"names":["Detector","constructor","userAgent"],"mappings":";;;iBAOsBA,Q;;;;;;;;;;;;;AAPtB;AACA;AACA;AACA;AACA;AACA;AACA;0BACsBA,Q,GAAf,MAAeA,QAAf,CAA2B;AAC9B;AACJ;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACIC,QAAAA,WAAW,CAACC,SAAD,EAAoB;AAAA,eAPrBA,SAOqB;AAC3B,eAAKA,SAAL,GAAiBA,SAAjB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AAnBkC,O","sourcesContent":["/**\n * The `Detector` class serves as a base for all detection classes.\n * It provides a structure for detecting various properties based on a user\n * agent string.\n *\n * @typeparam T - The type of the detection result.\n */\nexport abstract class Detector<T> {\n    /**\n     * The user agent string used for detection.\n     */\n    protected userAgent: string;\n\n    /**\n     * Constructs a new `Detector` instance.\n     *\n     * @param userAgent - The user agent string to be used for detection.\n     */\n    constructor(userAgent: string) {\n        this.userAgent = userAgent;\n    }\n\n    /**\n     * Abstract method to be implemented by subclasses for specific detection logic.\n     *\n     * @returns The detection result of type `T`.\n     */\n    abstract detect(): T;\n}\n"]}