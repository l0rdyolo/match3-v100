{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Match/MatchStrategies/VerticalMatchStrategy.ts"],"names":["VerticalMatchStrategy","directions","dx","dy","checkMatch","pieceA","pieceB","grid","firstCheck","checkSinglePieceMatch","secondCheck","concat","piece","matches","row","col","i","currentPiece","isEmpty","node","name","push","length"],"mappings":";;;8BAIaA,qB;;;;;;;;;;;;;;;;;;;;;;;uCAAAA,qB,GAAN,MAAMA,qBAAN,CAAqD;AAAA;AAAA,eACjDC,UADiD,GACpC,CAChB;AAAEC,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,EAAE,EAAE;AAAb,WADgB,EACE;AAClB;AAAED,YAAAA,EAAE,EAAE,CAAC,CAAP;AAAUC,YAAAA,EAAE,EAAE;AAAd,WAFgB,CAEE;AAFF,WADoC;AAAA;;AAMjDC,QAAAA,UAAU,CAACC,MAAD,EAAiBC,MAAjB,EAAkCC,IAAlC,EAAoD;AACjE,gBAAMC,UAAU,GAAG,KAAKC,qBAAL,CAA2BJ,MAA3B,EAAoCE,IAApC,CAAnB;AACA,cAAIG,WAAW,GAAG,KAAKD,qBAAL,CAA2BH,MAA3B,EAAoCC,IAApC,CAAlB;AACAG,UAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBH,UAAnB,CAAd;AACA,iBAAOE,WAAP;AAAmB;AACtB;;AAEMD,QAAAA,qBAAqB,CAACG,KAAD,EAAeL,IAAf,EAA+B;AACvD;AACA,gBAAMM,OAAgB,GAAG,CAACD,KAAD,CAAzB;AACA,gBAAME,GAAG,GAAGF,KAAK,CAACE,GAAlB;AACA,gBAAMC,GAAG,GAAGH,KAAK,CAACG,GAAlB;;AAEA,eAAK,IAAIC,CAAC,GAAGF,GAAG,GAAG,CAAnB,EAAsBE,CAAC,IAAI,CAA3B,EAA8BA,CAAC,EAA/B,EAAmC;AAC/B,kBAAMC,YAAY,GAAGV,IAAI,CAACS,CAAD,CAAJ,CAAQD,GAAR,CAArB;AACA,gBAAGE,YAAY,CAACC,OAAb,IAAwBN,KAAK,CAACM,OAAjC,EAA0C;;AAC1C,gBAAIX,IAAI,CAACS,CAAD,CAAJ,CAAQD,GAAR,EAAaI,IAAb,CAAkBC,IAAlB,KAA2BR,KAAK,CAACO,IAAN,CAAWC,IAA1C,EAAgD;AAC5CP,cAAAA,OAAO,CAACQ,IAAR,CAAaJ,YAAb;AACH,aAFD,MAEO;AACH;AACH;AACJ;;AAED,eAAK,IAAID,CAAC,GAAGF,GAAG,GAAG,CAAnB,EAAsBE,CAAC,GAAGT,IAAI,CAACe,MAA/B,EAAuCN,CAAC,EAAxC,EAA4C;AACxC,kBAAMC,YAAY,GAAGV,IAAI,CAACS,CAAD,CAAJ,CAAQD,GAAR,CAArB;AACA,gBAAGE,YAAY,CAACC,OAAb,IAAwBN,KAAK,CAACM,OAAjC,EAA0C;;AAE1C,gBAAID,YAAY,CAACE,IAAb,CAAkBC,IAAlB,KAA2BR,KAAK,CAACO,IAAN,CAAWC,IAA1C,EAAgD;AAC5CP,cAAAA,OAAO,CAACQ,IAAR,CAAaJ,YAAb;AACH,aAFD,MAEO;AACH;AACH;AACJ;;AACD,iBAAOJ,OAAO,CAACS,MAAR,IAAkB,CAAlB,GAAsBT,OAAtB,GAAgC,EAAvC;AACH;;AAxCuD,O","sourcesContent":["import { GridManager } from \"../../Grid/GridManager\";\r\nimport { Piece } from \"../../Piece/Piece\";\r\nimport { MatchStrategy } from \"./IMatchStrategy\";\r\n\r\nexport class VerticalMatchStrategy implements MatchStrategy {\r\n    public directions = [\r\n        { dx: 1, dy: 0 }, // Down\r\n        { dx: -1, dy: 0 } // Up\r\n    ];\r\n\r\n    public checkMatch(pieceA: Piece , pieceB : Piece , grid: Piece[][])  {\r\n        const firstCheck = this.checkSinglePieceMatch(pieceA , grid);\r\n        let secondCheck = this.checkSinglePieceMatch(pieceB , grid)\r\n        secondCheck = secondCheck.concat(firstCheck)\r\n        return secondCheck;;\r\n    }\r\n\r\n    public checkSinglePieceMatch(piece: Piece, grid: Piece[][]){\r\n        // VerticalMatchStrategy.ts\r\n        const matches: Piece[] = [piece];\r\n        const row = piece.row;\r\n        const col = piece.col;\r\n\r\n        for (let i = row - 1; i >= 0; i--) {\r\n            const currentPiece = grid[i][col]\r\n            if(currentPiece.isEmpty || piece.isEmpty) break;\r\n            if (grid[i][col].node.name === piece.node.name) {\r\n                matches.push(currentPiece);\r\n            } else {\r\n                break; \r\n            }\r\n        }\r\n\r\n        for (let i = row + 1; i < grid.length; i++) {\r\n            const currentPiece = grid[i][col]\r\n            if(currentPiece.isEmpty || piece.isEmpty) break;\r\n\r\n            if (currentPiece.node.name === piece.node.name) {\r\n                matches.push(currentPiece);\r\n            } else {\r\n                break; \r\n            }\r\n        }\r\n        return matches.length >= 3 ? matches : [];\r\n    }\r\n}"]}