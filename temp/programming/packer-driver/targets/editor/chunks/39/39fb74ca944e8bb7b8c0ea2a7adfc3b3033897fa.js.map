{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/DetectorAPI/Deviceutils.ts"],"names":["DeviceUtils","isMobile","userAgent","test","getScreenSize","width","window","innerWidth","height","innerHeight","getOrientation","isTouchSupported","navigator","maxTouchPoints","getLanguage","language","getOnlineStatus","onLine"],"mappings":";;;8BAMaA,W;;;;;;;;;;;;;;;;;;;;;;;AAHb;AACA;AACA;6BACaA,W,GAAN,MAAMA,WAAN,CAAkB;AACrB;AACJ;AACA;AACA;AACA;AACmB,eAARC,QAAQ,CAACC,SAAD,EAA6B;AACxC,iBAAO,iEAAiEC,IAAjE,CAAsED,SAAtE,CAAP;AACH;AAED;AACJ;AACA;AACA;;;AACwB,eAAbE,aAAa,GAAe;AAC/B,iBAAO;AACHC,YAAAA,KAAK,EAAEC,MAAM,CAACC,UADX;AAEHC,YAAAA,MAAM,EAAEF,MAAM,CAACG;AAFZ,WAAP;AAIH;AAED;AACJ;AACA;AACA;;;AACyB,eAAdC,cAAc,GAAgB;AACjC,iBAAOJ,MAAM,CAACG,WAAP,GAAqBH,MAAM,CAACC,UAA5B,GAAyC,UAAzC,GAAsD,WAA7D;AACH;AAED;AACJ;AACA;AACA;;;AAC2B,eAAhBI,gBAAgB,GAAY;AAC/B,iBAAO,kBAAkBL,MAAlB,IAA4BM,SAAS,CAACC,cAAV,GAA2B,CAA9D;AACH;AAED;AACJ;AACA;AACA;;;AACsB,eAAXC,WAAW,GAAW;AACzB,iBAAOF,SAAS,CAACG,QAAjB;AACH;AAED;AACJ;AACA;AACA;;;AAC0B,eAAfC,eAAe,GAAY;AAC9B,iBAAOJ,SAAS,CAACK,MAAjB;AACH;;AAnDoB,O","sourcesContent":["import { ScreenSize } from \"./ScreenSize\";\nimport { Orientation } from \"./types\";\n\n/**\n * `DeviceUtils` provides utility methods for device information.\n */\nexport class DeviceUtils {\n    /**\n     * Checks if the device is mobile.\n     * @param userAgent - The user agent string.\n     * @returns `true` if mobile, otherwise `false`.\n     */\n    static isMobile(userAgent: string): boolean {\n        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);\n    }\n\n    /**\n     * Gets the screen size.\n     * @returns The screen size.\n     */\n    static getScreenSize(): ScreenSize {\n        return {\n            width: window.innerWidth,\n            height: window.innerHeight,\n        };\n    }\n\n    /**\n     * Gets the device orientation.\n     * @returns The device orientation.\n     */\n    static getOrientation(): Orientation {\n        return window.innerHeight > window.innerWidth ? 'portrait' : 'landscape';\n    }\n\n    /**\n     * Checks if touch is supported.\n     * @returns `true` if touch is supported, otherwise `false`.\n     */\n    static isTouchSupported(): boolean {\n        return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n    }\n\n    /**\n     * Gets the device language.\n     * @returns The device language.\n     */\n    static getLanguage(): string {\n        return navigator.language;\n    }\n\n    /**\n     * Checks the online status.\n     * @returns `true` if online, otherwise `false`.\n     */\n    static getOnlineStatus(): boolean {\n        return navigator.onLine;\n    }\n}\n"]}