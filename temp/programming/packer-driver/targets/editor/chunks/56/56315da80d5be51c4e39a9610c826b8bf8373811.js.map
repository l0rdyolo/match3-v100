{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Runtime/Observer.ts"],"names":["Observer","Observable","Subject","ReplaySubject","BehaviorSubject","AsyncSubject","ThrottleOperator","makeSubscription","observable","onNext","onComplete","onError","observer","subscribe","constructor","onNextCallback","onCompleteCallback","onErrorCallback","value","error","observers","Set","add","next","forEach","complete","clear","map","transform","mappedObservable","filter","predicate","filteredObservable","debounce","interval","debouncedObservable","lastEmitTime","timeoutId","clearTimeout","setTimeout","now","Date","throttle","throttledObservable","flatMap","flatMappedObservable","innerObservable","innerValue","values","push","undefined","source"],"mappings":"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","sourcesContent":["type ObserverCallback<T> = (value: T) => void;\ntype CompleteCallback = () => void;\ntype ErrorCallback = (error: Error) => void;\n\ninterface IObserver<T> {\n    onNext(value: T): void;\n    onComplete(): void;\n    onError(error: Error): void;\n}\n\ninterface IObservable<T> {\n    subscribe(observer: IObserver<T>): void;\n    next(value: T): void;\n    complete(): void;\n    error(error: Error): void;\n}\n\nclass Observer<T> implements IObserver<T> {\n    constructor(\n        private onNextCallback: ObserverCallback<T>,\n        private onCompleteCallback: CompleteCallback = () => { },\n        private onErrorCallback: ErrorCallback = () => { }\n    ) { }\n\n    onNext(value: T): void {\n        this.onNextCallback(value);\n    }\n\n    onComplete(): void {\n        this.onCompleteCallback();\n    }\n\n    onError(error: Error): void {\n        this.onErrorCallback(error);\n    }\n}\n\nclass Observable<T> implements IObservable<T> {\n    private observers: Set<IObserver<T>> = new Set();\n\n    subscribe(observer: IObserver<T>): void {\n        this.observers.add(observer);\n    }\n\n    next(value: T): void {\n        this.observers.forEach(observer => observer.onNext(value));\n    }\n\n    complete(): void {\n        this.observers.forEach(observer => observer.onComplete());\n        this.observers.clear();\n    }\n\n    error(error: Error): void {\n        this.observers.forEach(observer => observer.onError(error));\n        this.observers.clear();\n    }\n\n    map<U>(transform: (value: T) => U): Observable<U> {\n        const mappedObservable = new Observable<U>();\n        this.subscribe(new Observer<T>(\n            value => mappedObservable.next(transform(value)),\n            () => mappedObservable.complete(),\n            error => mappedObservable.error(error)\n        ));\n        return mappedObservable;\n    }\n\n    filter(predicate: (value: T) => boolean): Observable<T> {\n        const filteredObservable = new Observable<T>();\n        this.subscribe(new Observer<T>(\n            value => predicate(value) && filteredObservable.next(value),\n            () => filteredObservable.complete(),\n            error => filteredObservable.error(error)\n        ));\n        return filteredObservable;\n    }\n\n    debounce(interval: number): Observable<T> {\n        const debouncedObservable = new Observable<T>();\n        let lastEmitTime = 0;\n        let timeoutId: any = null;\n\n        this.subscribe(new Observer<T>(\n            value => {\n                clearTimeout(timeoutId);\n                timeoutId = setTimeout(() => {\n                    const now = Date.now();\n                    if (now - lastEmitTime >= interval) {\n                        lastEmitTime = now;\n                        debouncedObservable.next(value);\n                    }\n                }, interval);\n            },\n            () => debouncedObservable.complete(),\n            error => debouncedObservable.error(error)\n        ));\n\n        return debouncedObservable;\n    }\n\n    throttle(interval: number): Observable<T> {\n        const throttledObservable = new Observable<T>();\n        let lastEmitTime = 0;\n\n        this.subscribe(new Observer<T>(\n            value => {\n                const now = Date.now();\n                if (now - lastEmitTime >= interval) {\n                    lastEmitTime = now;\n                    throttledObservable.next(value);\n                }\n            },\n            () => throttledObservable.complete(),\n            error => throttledObservable.error(error)\n        ));\n\n        return throttledObservable;\n    }\n\n    flatMap<U>(transform: (value: T) => Observable<U>): Observable<U> {\n        const flatMappedObservable = new Observable<U>();\n\n        this.subscribe(new Observer<T>(\n            value => {\n                const innerObservable = transform(value);\n                innerObservable.subscribe(new Observer<U>(\n                    innerValue => flatMappedObservable.next(innerValue),\n                    () => flatMappedObservable.complete(),\n                    error => flatMappedObservable.error(error)\n                ));\n            },\n            () => flatMappedObservable.complete(),\n            error => flatMappedObservable.error(error)\n        ));\n\n        return flatMappedObservable;\n    }\n}\n\nclass Subject<T> extends Observable<T> implements IObserver<T> {\n    onNext(value: T): void {\n        this.next(value);\n    }\n\n    onComplete(): void {\n        this.complete();\n    }\n\n    onError(error: Error): void {\n        this.error(error);\n    }\n}\n\nclass ReplaySubject<T> extends Subject<T> {\n    private values: T[] = [];\n\n    onNext(value: T): void {\n        this.values.push(value);\n        super.onNext(value);\n    }\n\n    subscribe(observer: IObserver<T>): void {\n        this.values.forEach(value => observer.onNext(value));\n        super.subscribe(observer);\n    }\n}\n\nclass BehaviorSubject<T> extends Subject<T> {\n    constructor(private value: T) {\n        super();\n    }\n\n    onNext(value: T): void {\n        this.value = value;\n        super.onNext(value);\n    }\n\n    subscribe(observer: IObserver<T>): void {\n        observer.onNext(this.value);\n        super.subscribe(observer);\n    }\n}\n\nclass AsyncSubject<T> extends Subject<T> {\n    private value?: T;\n\n    onNext(value: T): void {\n        this.value = value;\n    }\n\n    onComplete(): void {\n        if (this.value !== undefined) {\n            super.onNext(this.value);\n        }\n        super.onComplete();\n    }\n}\n\nclass ThrottleOperator<T> extends Observable<T> {\n    private lastEmitTime = Date.now();\n\n    constructor(source: Observable<T>, private interval: number) {\n        super();\n        source.subscribe(new Observer<T>(\n            value => {\n                const now = Date.now();\n                if (now - this.lastEmitTime >= this.interval) {\n                    this.lastEmitTime = now;\n                    this.next(value);\n                }\n            },\n            () => this.complete(),\n            error => this.error(error)\n        ));\n    }\n}\n\nfunction makeSubscription<T>(observable: Observable<T>, onNext: ObserverCallback<T>, onComplete: CompleteCallback = () => { }, onError: ErrorCallback = () => { }): Observer<T> {\n    const observer = new Observer(onNext, onComplete, onError);\n    observable.subscribe(observer);\n    return observer;\n}\n\nexport { Observer, Observable, Subject, ReplaySubject, BehaviorSubject, AsyncSubject, ThrottleOperator, makeSubscription };\nexport type { IObserver, IObservable };\n"]}