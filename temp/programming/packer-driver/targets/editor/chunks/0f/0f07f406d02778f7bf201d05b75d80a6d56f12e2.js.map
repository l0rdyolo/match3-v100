{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Match/MatchStrategies/VerticalMatchStrategy.ts"],"names":["VerticalMatchStrategy","directions","dx","dy","checkMatch","piece","grid","matchedPieces","row","col","direction","currentRow","currentCol","length","currentPiece","type","push"],"mappings":";;;8BAGaA,qB;;;;;;;;;;;;;;;;;;;;;;;uCAAAA,qB,GAAN,MAAMA,qBAAN,CAAqD;AAAA;AAAA,eACjDC,UADiD,GACpC,CAChB;AAAEC,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,EAAE,EAAE;AAAb,WADgB,EACE;AAClB;AAAED,YAAAA,EAAE,EAAE,CAAC,CAAP;AAAUC,YAAAA,EAAE,EAAE;AAAd,WAFgB,CAEE;AAFF,WADoC;AAAA;;AAMjDC,QAAAA,UAAU,CAACC,KAAD,EAAeC,IAAf,EAAyC;AACtD,gBAAMC,aAAsB,GAAG,EAA/B;AACA,gBAAM;AAAEC,YAAAA,GAAF;AAAOC,YAAAA;AAAP,cAAeJ,KAArB;;AAEA,eAAK,MAAMK,SAAX,IAAwB,KAAKT,UAA7B,EAAyC;AACrC,gBAAIU,UAAU,GAAGH,GAAG,GAAGE,SAAS,CAACR,EAAjC;AACA,gBAAIU,UAAU,GAAGH,GAAjB;;AAEA,mBAAOE,UAAU,IAAI,CAAd,IAAmBA,UAAU,GAAGL,IAAI,CAACO,MAA5C,EAAoD;AAChD,oBAAMC,YAAY,GAAGR,IAAI,CAACK,UAAD,CAAJ,CAAiBC,UAAjB,CAArB;;AACA,kBAAIE,YAAY,IAAIA,YAAY,CAACC,IAAb,KAAsBV,KAAK,CAACU,IAAhD,EAAsD;AAClDR,gBAAAA,aAAa,CAACS,IAAd,CAAmBF,YAAnB;AACH,eAFD,MAEO;AACH;AACH;;AACDH,cAAAA,UAAU,IAAID,SAAS,CAACR,EAAxB;AACH;AACJ;;AAED,cAAIK,aAAa,CAACM,MAAd,IAAwB,CAA5B,EAA+B;AAC3BN,YAAAA,aAAa,CAACS,IAAd,CAAmBX,KAAnB;AACH;;AAED,iBAAOE,aAAP;AACH;;AA9BuD,O","sourcesContent":["import { Piece } from \"../../Piece/Piece\";\nimport { MatchStrategy } from \"./IMatchStrategy\";\n\nexport class VerticalMatchStrategy implements MatchStrategy {\n    public directions = [\n        { dx: 1, dy: 0 }, // Down\n        { dx: -1, dy: 0 } // Up\n    ];\n\n    public checkMatch(piece: Piece, grid: Piece[][]): Piece[] {\n        const matchedPieces: Piece[] = [];\n        const { row, col } = piece;\n\n        for (const direction of this.directions) {\n            let currentRow = row + direction.dx;\n            let currentCol = col;\n\n            while (currentRow >= 0 && currentRow < grid.length) {\n                const currentPiece = grid[currentRow][currentCol];\n                if (currentPiece && currentPiece.type === piece.type) {\n                    matchedPieces.push(currentPiece);\n                } else {\n                    break;\n                }\n                currentRow += direction.dx;\n            }\n        }\n\n        if (matchedPieces.length >= 2) {\n            matchedPieces.push(piece);\n        }\n\n        return matchedPieces;\n    }\n}"]}