{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SingletonComponent.ts"],"names":["_decorator","Component","director","ccclass","property","disallowMultiple","SingletonComponent","onLoad","instance","instances","get","constructor","set","addPersistRootNode","node","console","warn","name","getInstance","Map"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Q,OAAAA,Q;;;;;;;;;OAC1B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA;AAArB,O,GAA0CL,U;;oCAG1BM,kB,GADrBD,gB,qBAAD,MACsBC,kBADtB,SACkFL,SADlF,CAC4F;AAG9EM,QAAAA,MAAM,GAAS;AACrB,gBAAMC,QAAQ,GAAGF,kBAAkB,CAACG,SAAnB,CAA6BC,GAA7B,CAAiC,KAAKC,WAAtC,CAAjB;;AACA,cAAI,CAACH,QAAL,EAAe;AACXF,YAAAA,kBAAkB,CAACG,SAAnB,CAA6BG,GAA7B,CAAiC,KAAKD,WAAtC,EAAwF,IAAxF;AACAT,YAAAA,QAAQ,CAACW,kBAAT,CAA4B,KAAKC,IAAjC;AACH,WAHD,MAGO,IAAIN,QAAQ,KAAK,IAAjB,EAAuB;AAC1B;AACAO,YAAAA,OAAO,CAACC,IAAR,CAAc,uBAAsB,KAAKL,WAAL,CAAiBM,IAAK,iDAA1D;AACA;AACH;AACJ;;AAEwB,eAAXC,WAAW,GAAwD;AAC7E,cAAIV,QAAQ,GAAGF,kBAAkB,CAACG,SAAnB,CAA6BC,GAA7B,CAAiC,IAAjC,CAAf;;AACA,cAAI,CAACF,QAAL,EAAe;AACXA,YAAAA,QAAQ,GAAG,IAAI,IAAJ,EAAX;AACAF,YAAAA,kBAAkB,CAACG,SAAnB,CAA6BG,GAA7B,CAAiC,IAAjC,EAAuCJ,QAAvC;AACH;;AACD,iBAAOA,QAAP;AACH;;AAtBuF,O,UACzEC,S,GAA6E,IAAIU,GAAJ,E","sourcesContent":["import { _decorator, Component, director, Node } from 'cc';\nconst { ccclass, property, disallowMultiple } = _decorator;\n\n@disallowMultiple\nexport abstract class SingletonComponent<T extends SingletonComponent<T>> extends Component {\n    private static instances: Map<new () => SingletonComponent<any>, SingletonComponent<any>> = new Map();\n\n    protected onLoad(): void {\n        const instance = SingletonComponent.instances.get(this.constructor as new () => SingletonComponent<any>);\n        if (!instance) {\n            SingletonComponent.instances.set(this.constructor as new () => SingletonComponent<any>, this);\n            director.addPersistRootNode(this.node);\n        } else if (instance !== this) {\n            // this.destroy();\n            console.warn(`Another instance of ${this.constructor.name} was attempted to be created and was destroyed.`);\n            return;\n        }\n    }\n\n    public static getInstance<T extends SingletonComponent<T>>(this: new () => T): T {\n        let instance = SingletonComponent.instances.get(this);\n        if (!instance) {\n            instance = new this();\n            SingletonComponent.instances.set(this, instance);\n        }\n        return instance as T;\n    }\n}\n"]}