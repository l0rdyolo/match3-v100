{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/DetectorAPI/OSDetector.ts"],"names":["OSDetector","Detector","osRules","regex","os","additionalCheck","window","MSStream","detect","rule","test","userAgent","undefined"],"mappings":";;;wCA+BaA,U;;;;;;;;;;;;;;;;;;AA/BJC,MAAAA,Q,iBAAAA,Q;;;;;;;AAoBT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;4BACaD,U,GAAN,MAAMA,UAAN;AAAA;AAAA,gCAAsC;AAAA;AAAA;AAAA,eAKjCE,OALiC,GAKb,CACxB;AAAEC,YAAAA,KAAK,EAAE,eAAT;AAA0BC,YAAAA,EAAE,EAAE;AAA9B,WADwB,EAExB;AAAED,YAAAA,KAAK,EAAE,UAAT;AAAqBC,YAAAA,EAAE,EAAE;AAAzB,WAFwB,EAGxB;AAAED,YAAAA,KAAK,EAAE,OAAT;AAAkBC,YAAAA,EAAE,EAAE;AAAtB,WAHwB,EAIxB;AAAED,YAAAA,KAAK,EAAE,kBAAT;AAA6BC,YAAAA,EAAE,EAAE,KAAjC;AAAwCC,YAAAA,eAAe,EAAE,MAAM,CAAEC,MAAD,CAAgBC;AAAhF,WAJwB,EAKxB;AAAEJ,YAAAA,KAAK,EAAE,UAAT;AAAqBC,YAAAA,EAAE,EAAE;AAAzB,WALwB,CALa;AAAA;;AAazC;AACJ;AACA;AACA;AACA;AACA;AACII,QAAAA,MAAM,GAAO;AACT,eAAK,MAAMC,IAAX,IAAmB,KAAKP,OAAxB,EAAiC;AAC7B,gBAAIO,IAAI,CAACN,KAAL,CAAWO,IAAX,CAAgB,KAAKC,SAArB,CAAJ,EAAqC;AACjC,kBAAIF,IAAI,CAACJ,eAAL,KAAyBO,SAAzB,IAAsCH,IAAI,CAACJ,eAAL,EAA1C,EAAkE;AAC9D,uBAAOI,IAAI,CAACL,EAAZ;AACH;AACJ;AACJ;;AACD,iBAAO,SAAP;AACH;;AA5BwC,O","sourcesContent":["import { Detector } from './Detector';\nimport { OS } from './types';\n\n/**\n * Defines an operating system (OS) detection rule with a regular expression and\n * an optional additional check.\n * @property {RegExp} regex - The regular expression used to match the user\n * agent string for OS identification.\n * @property {OS} os - The OS type identified by the regex. Must be a valid `OS`\n * type.\n * @property {() => boolean} [additionalCheck] - An optional function providing\n * an additional verification layer, mainly used for edge cases. Returns `true`\n * if the additional condition for OS detection is met.\n */\ninterface OSRule {\n    regex: RegExp;\n    os: OS;\n    additionalCheck?: () => boolean;\n}\n\n/**\n * Extends the `Detector` class to implement OS detection based on user agent\n * strings. Utilizes a set of predefined rules (`osRules`) to identify the OS\n * from the browser's user agent.\n *\n * Example usage:\n * ```\n * const osDetector = new OSDetector();\n * console.log(osDetector.detect()); // Outputs detected OS\n * ```\n */\nexport class OSDetector extends Detector<OS> {\n    /**\n     * A collection of `OSRule` objects, each defining a rule for detecting a\n     * specific OS from the user agent string.\n     */\n    private osRules: OSRule[] = [\n        { regex: /Win(dows )?NT/, os: 'Windows' },\n        { regex: /Mac OS X/, os: 'macOS' },\n        { regex: /Linux/, os: 'Linux' },\n        { regex: /iPad|iPhone|iPod/, os: 'IOS', additionalCheck: () => !(window as any).MSStream },\n        { regex: /android/i, os: 'Android' }\n    ];\n\n    /**\n     * Iterates through `osRules` to find a matching rule for the current\n     * browser's user agent. If an `additionalCheck` is defined for a rule, it\n     * must also pass for the OS to be considered detected.\n     * @returns {OS} The detected OS or 'Unknown' if no match is found.\n     */\n    detect(): OS {\n        for (const rule of this.osRules) {\n            if (rule.regex.test(this.userAgent)) {\n                if (rule.additionalCheck === undefined || rule.additionalCheck()) {\n                    return rule.os;\n                }\n            }\n        }\n        return 'Unknown';\n    }\n}\n"]}