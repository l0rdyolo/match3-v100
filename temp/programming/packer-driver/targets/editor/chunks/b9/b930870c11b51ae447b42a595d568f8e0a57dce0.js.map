{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","EffectManager","ccclass","Direction","MatchChecker","SwapPiecePositions","pieceA","pieceB","posA","posB","gridMap","movePiece","posAData","get","posBData","set","matchedPieces","CheckSwappedPieces","length","console","log","removeMatches","piece","row","col","dx","dy","directions","matchNodes","getMatchedNodes","name","push","matchNode","matchRow","matchCol","checkContinuation","pieceName","matchedNodes","i","j","isWithinBounds","isSamePiece","matchedNode","Array","from","entries","find","_","pos","values","some","forEach","node","delete","destroy"],"mappings":"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","sourcesContent":["import { _decorator, Node, Vec3 } from \"cc\";\nimport { EffectManager } from \"../Effects/EffectManager\";\nconst { ccclass } = _decorator;\n\nenum Direction {\n  Horizontal,\n  Vertical,\n}\n\n@ccclass(\"MatchChecker\")\nexport class MatchChecker {\n\n  private static directions = [\n    { dx: 0, dy: 1 },   // Right\n    { dx: 0, dy: -1 },  // Left\n    { dx: 1, dy: 0 },   // Down\n    { dx: -1, dy: 0 }   // Up\n  ];\n\n  public static async SwapPiecePositions(\n    pieceA: Node,\n    pieceB: Node,\n    posA: Vec3,\n    posB: Vec3,\n    gridMap: Map<Node, { row: number, col: number }>\n  ) {\n    EffectManager.movePiece(pieceA, posB, 0.1);\n    EffectManager.movePiece(pieceB, posA, 0.1);\n\n    // Update the gridMap\n    const posAData = gridMap.get(pieceA);\n    const posBData = gridMap.get(pieceB);\n    gridMap.set(pieceA, posBData);\n    gridMap.set(pieceB, posAData);\n\n    const matchedPieces = [];\n    this.CheckSwappedPieces(pieceA, gridMap, matchedPieces);\n    this.CheckSwappedPieces(pieceB, gridMap, matchedPieces);\n\n    // Handle matched pieces\n    if (matchedPieces.length > 0) {\n      console.log(\"Matched pieces:\", matchedPieces);\n      this.removeMatches(matchedPieces, gridMap);\n    }\n  }\n\n  public static CheckSwappedPieces(\n    piece: Node,\n    gridMap: Map<Node, { row: number, col: number }>,\n    matchedPieces: Node[]\n) {\n    const { row, col } = gridMap.get(piece);\n\n    // Check in all directions\n    for (const { dx, dy } of this.directions) {\n        const matchNodes = this.getMatchedNodes(gridMap, piece.name, row, col, dx, dy);\n        if (matchNodes.length >= 2) {\n            matchedPieces.push(piece, ...matchNodes);\n            // Continue checking in the same direction for the matched nodes\n            for (const matchNode of matchNodes) {\n                const { row: matchRow, col: matchCol } = gridMap.get(matchNode);\n                this.checkContinuation(matchNode, gridMap, matchedPieces, dx, dy);\n            }\n        }\n    }\n}\n\nprivate static checkContinuation(\n    piece: Node,\n    gridMap: Map<Node, { row: number, col: number }>,\n    matchedPieces: Node[],\n    dx: number,\n    dy: number\n) {\n    const { row, col } = gridMap.get(piece);\n    const matchNodes = this.getMatchedNodes(gridMap, piece.name, row, col, dx, dy);\n    if (matchNodes.length >= 2) {\n        matchedPieces.push(...matchNodes);\n        // Continue checking in the same direction for the new matched nodes\n        for (const matchNode of matchNodes) {\n            const { row: matchRow, col: matchCol } = gridMap.get(matchNode);\n            this.checkContinuation(matchNode, gridMap, matchedPieces, dx, dy);\n        }\n    }\n}\n\n  private static getMatchedNodes(\n    gridMap: Map<Node, { row: number, col: number }>,\n    pieceName: string,\n    row: number,\n    col: number,\n    dx: number,\n    dy: number\n  ): Node[] {\n    const matchedNodes: Node[] = [];\n    let [i, j] = [row + dx, col + dy];\n\n    while (this.isWithinBounds(i, j, gridMap) && this.isSamePiece(gridMap, pieceName, i, j)) {\n      const matchedNode = Array.from(gridMap.entries()).find(([_, pos]) => pos.row === i && pos.col === j)?.[0];\n      if (matchedNode) {\n        matchedNodes.push(matchedNode);\n      }\n      i += dx;\n      j += dy;\n    }\n\n    return matchedNodes;\n  }\n\n  private static isWithinBounds(\n    row: number,\n    col: number,\n    gridMap: Map<Node, { row: number, col: number }>\n  ): boolean {\n    return row >= 0 && col >= 0 && Array.from(gridMap.values()).some(pos => pos.row === row && pos.col === col);\n  }\n\n  private static isSamePiece(\n    gridMap: Map<Node, { row: number, col: number }>,\n    pieceName: string,\n    row: number,\n    col: number\n  ): boolean {\n    const piece = Array.from(gridMap.entries()).find(([_, pos]) => pos.row === row && pos.col === col)?.[0];\n    return piece?.name === pieceName;\n  }\n\n  public static removeMatches(\n    matchedPieces: Node[],\n    gridMap: Map<Node, { row: number, col: number }>\n  ) {\n    matchedPieces.forEach((node) => {\n      gridMap.delete(node);\n      node.destroy(); // Or return it to the pool\n    });\n  }\n}\n"]}