{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/User/UUIDGenerator.ts"],"names":["UUIDGenerator","createSingleton","padStart","str","targetLength","padString","length","generate","window","crypto","randomUUID","formatUUID","getRandomValues","Uint8Array","randomBytes","reduceUUID","join","bytes","start","end","slice","reduce","acc","byte","index","formatUUIDPart","hex","toString","getInstance","uuid"],"mappings":";;;+CAeMA,a;;;;;;;;;;;;AAfGC,MAAAA,e,iBAAAA,e;;;;;;;AAQHC,MAAAA,Q,GAAW,CAACC,GAAD,EAAcC,YAAd,EAAoCC,SAApC,KAAkE;AAC/E,eAAOF,GAAG,CAACG,MAAJ,GAAaF,YAApB,EAAkC;AAC9BD,UAAAA,GAAG,GAAGE,SAAS,GAAGF,GAAlB;AACH;;AACD,eAAOA,GAAP;AACH,O;;AAEKH,MAAAA,a,GAAN,MAAMA,aAAN,CAA8C;AAGrCO,QAAAA,QAAQ,GAAW;AACpB,cAAIC,MAAM,CAACC,MAAP,CAAcC,UAAlB,EAA8B,OAAOF,MAAM,CAACC,MAAP,CAAcC,UAAd,EAAP;AAC9B,iBAAO,KAAKC,UAAL,CAAgBH,MAAM,CAACC,MAAP,CAAcG,eAAd,CAA8B,IAAIC,UAAJ,CAAe,EAAf,CAA9B,CAAhB,CAAP;AACH;;AAEOF,QAAAA,UAAU,CAACG,WAAD,EAAkC;AAChD,iBAAO,CACH,KAAKC,UAAL,CAAgBD,WAAhB,EAA6B,CAA7B,EAAgC,CAAhC,CADG,EAEH,KAAKC,UAAL,CAAgBD,WAAhB,EAA6B,CAA7B,EAAgC,CAAhC,CAFG,EAGH,KAAKC,UAAL,CAAgBD,WAAhB,EAA6B,CAA7B,EAAgC,CAAhC,CAHG,EAIH,KAAKC,UAAL,CAAgBD,WAAhB,EAA6B,CAA7B,EAAgC,EAAhC,CAJG,EAKH,KAAKC,UAAL,CAAgBD,WAAhB,EAA6B,EAA7B,EAAiC,EAAjC,CALG,EAMLE,IANK,CAMA,GANA,CAAP;AAOH;;AAEOD,QAAAA,UAAU,CAACE,KAAD,EAAoBC,KAApB,EAAmCC,GAAnC,EAAwD;AACtE,iBAAOF,KAAK,CAACG,KAAN,CAAYF,KAAZ,EAAmBC,GAAnB,EAAwBE,MAAxB,CACH,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,KAAsBF,GAAG,GAAG,KAAKG,cAAL,CAAoBF,IAApB,EAA0BL,KAAK,GAAGM,KAAlC,CADzB,EAEH,EAFG,CAAP;AAIH;;AAEOC,QAAAA,cAAc,CAACF,IAAD,EAAeC,KAAf,EAAsC;AACxD,gBAAME,GAAG,GAAGxB,QAAQ,CAACqB,IAAI,CAACI,QAAL,CAAc,EAAd,CAAD,EAAoB,CAApB,EAAuB,GAAvB,CAApB;;AACA,kBAAQH,KAAR;AACE,iBAAK,CAAL;AACI,qBAAOtB,QAAQ,CAAC,CAAC,KAAK,CAAL,GAASqB,IAAI,GAAG,IAAjB,EAAuBI,QAAvB,CAAgC,EAAhC,CAAD,EAAsC,CAAtC,EAAyC,GAAzC,CAAf;;AACJ,iBAAK,CAAL;AACI,qBAAOzB,QAAQ,CAAC,CAAC,OAAOqB,IAAI,GAAG,IAAf,EAAqBI,QAArB,CAA8B,EAA9B,CAAD,EAAoC,CAApC,EAAuC,GAAvC,CAAf;;AACJ;AACI,qBAAOD,GAAP;AANN;AAQH;;AAnCyC,O;AAAxC1B,MAAAA,a,CACG4B,W,GAAc;AAAA;AAAA,8CAAgB5B,aAAhB,C;;sBAqCV6B,I,GAAO,MAAc7B,aAAa,CAAC4B,WAAd,GAA4BrB,QAA5B,E","sourcesContent":["import { createSingleton } from \"./Singleton\";\n\nexport type UUID = string;\n\nexport interface IUUIDGenerator<T = string> {\n    generate(): T;\n}\n\nconst padStart = (str: string, targetLength: number, padString: string): string => {\n    while (str.length < targetLength) {\n        str = padString + str;\n    }\n    return str;\n};\n\nclass UUIDGenerator implements IUUIDGenerator {\n  static getInstance = createSingleton(UUIDGenerator);\n\n  public generate(): string {\n        if (window.crypto.randomUUID) return window.crypto.randomUUID();\n        return this.formatUUID(window.crypto.getRandomValues(new Uint8Array(16)));\n    }\n\n    private formatUUID(randomBytes: Uint8Array): string {\n        return [\n            this.reduceUUID(randomBytes, 0, 4),\n            this.reduceUUID(randomBytes, 4, 6),\n            this.reduceUUID(randomBytes, 6, 8),\n            this.reduceUUID(randomBytes, 8, 10),\n            this.reduceUUID(randomBytes, 10, 16),\n        ].join('-');\n    }\n\n    private reduceUUID(bytes: Uint8Array, start: number, end: number): string {\n        return bytes.slice(start, end).reduce(\n            (acc, byte, index) => acc + this.formatUUIDPart(byte, start + index),\n            ''\n        );\n    }\n\n    private formatUUIDPart(byte: number, index: number): string {\n        const hex = padStart(byte.toString(16), 2, '0');\n        switch (index) {\n          case 6:\n              return padStart((4 << 4 | byte & 0x0f).toString(16), 2, '0');\n          case 8:\n              return padStart((0x80 | byte & 0x3f).toString(16), 2, '0');\n          default:\n              return hex;\n        }\n    }\n}\n\nexport const uuid = (): string => UUIDGenerator.getInstance().generate();"]}