{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Color","Sprite","Vec3","SingletonComponent","GridGenerator","GameGlobal","SliderManager","MatchChecker","GravityHandler","PiecePool","ccclass","property","GridManager","_grid","gridGenerator","sliderManager","matchChecker","gravityHandler","gridWidth","gridHeight","gridOffset","colors","red","black","blue","yellow","grid","onLoad","init","start","node","getComponent","Generate","length","offsetDiff","PIECE_OFFSET","piecePositionsDiff","gridX","setPosition","SwapPieces","pieceA","pieceB","Slide","pa_row","row","pa_col","col","pb_row","pb_col","tempA","tempB","deleteMatches","matches","matchedPiece","delete","highlightGridCorners","getComponentInChildren","color","handleSelection","checkForMatches","applyGravity","fillEmptySpaces","checkForMatchesAfterGravity","piece","console","log","newPieceNode","getInstance","getPiece","setParent","addChild","canSelect","ResetScale","updatePosition"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Color,\n  Component,\n  Node,\n  Sprite,\n  SpriteFrame,\n  SpriteRenderer,\n  Vec2,\n  Vec3,\n} from \"cc\";\nimport { SingletonComponent } from \"../SingletonComponent\";\nimport { Piece } from \"../Piece/Piece\";\nimport { GridGenerator } from \"./GridGenerator\";\nimport { GameGlobal } from \"../Game/GameGlobal\";\nimport { SliderManager } from \"../Interaction/SliderManager\";\nimport { MatchChecker } from \"../Match/MatchChecker\";\nimport { GravityHandler } from \"./GravityHandler\";\nimport { PiecePool } from \"../Piece/PiecePool\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridManager\")\nexport class GridManager extends SingletonComponent<GridManager> {\n  private _grid: Piece[][];\n\n  private gridGenerator: GridGenerator = null;\n  private sliderManager: SliderManager = null;\n  private matchChecker: MatchChecker = null;\n  private gravityHandler: GravityHandler = null;\n\n  private gridWidth: number = 0;\n  public gridHeight: number = 0;\n  private gridOffset: number = 0;\n\n  private colors = {\n    red: new Color(255, 0, 0),\n    black: new Color(0, 0, 0),\n    blue: new Color(0, 0, 255),\n    yellow: new Color(255, 255, 0),\n  };\n\n  get grid() {\n    return this._grid;\n  }\n\n  protected onLoad(): void {\n    super.onLoad();\n    this.init();\n  }\n\n  protected init(): void {\n    this.sliderManager = new SliderManager();\n    this.matchChecker = new MatchChecker();\n    this.gravityHandler = new GravityHandler();\n  }\n\n  start() {\n    this.gridGenerator = this.node.getComponent(GridGenerator);\n    this._grid = this.gridGenerator.Generate();\n    this.gridWidth = this._grid[0].length;\n    this.gridHeight = this._grid.length;\n    //! dinamik olmalı\n    const offsetDiff = (GameGlobal.PIECE_OFFSET / 2) * this.gridWidth;\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\n\n    const gridX = piecePositionsDiff + offsetDiff;\n    this.node.setPosition(new Vec3(gridX, -200, 0));\n    // this.highlightGridCorners();\n  }\n\n  async SwapPieces(pieceA: Piece, pieceB: Piece) {\n    await this.sliderManager.Slide(pieceA, pieceB);\n    const pa_row = pieceA.row;\n    const pa_col = pieceA.col;\n\n    const pb_row = pieceB.row;\n    const pb_col = pieceB.col;\n\n    pieceA.row = pb_row;\n    pieceA.col = pb_col;\n\n    pieceB.row = pa_row;\n    pieceB.col = pa_col;\n\n    const tempA = this.grid[pa_row][pa_col];\n    const tempB = this.grid[pb_row][pb_col];\n\n    this.grid[pa_row][pa_col] = tempB;\n    this.grid[pb_row][pb_col] = tempA;\n  }\n\n  deleteMatches(matches: Piece[]) {\n    for (const matchedPiece of matches) {\n      matchedPiece.delete();\n    }\n  }\n\n  highlightGridCorners() {\n    this._grid[0][0].node.getComponentInChildren(Sprite).color =\n      this.colors.black;\n    this._grid[this.gridHeight - 1][0].node.getComponentInChildren(\n      Sprite\n    ).color = this.colors.yellow;\n    this._grid[0][this.gridWidth - 1].node.getComponentInChildren(\n      Sprite\n    ).color = this.colors.blue;\n    this._grid[this.gridHeight - 1][\n      this.gridWidth - 1\n    ].node.getComponentInChildren(Sprite).color = this.colors.red;\n  }\n\n  async handleSelection(pieceA: Piece, pieceB: Piece) {\n    await this.SwapPieces(pieceA, pieceB);\n    let matches: Piece[] = await this.matchChecker.checkForMatches(\n      pieceA,\n      pieceB\n    );\n\n    if (matches.length > 0) {\n      this.deleteMatches(matches);\n      await this.gravityHandler.applyGravity(); // Gravity işleminin tamamlanmasını bekle\n      // // Gravity sonrası yeni eşleşmeleri kontrol et\n      this.fillEmptySpaces();\n\n      do {\n          matches = await this.matchChecker.checkForMatchesAfterGravity();\n          if (matches.length > 0) {\n              this.deleteMatches(matches);\n              await this.gravityHandler.applyGravity(); // Yeni gravity işlemini uygula ve bekle\n          }\n      } while (matches.length > 0);\n    } else {\n      await this.SwapPieces(pieceA, pieceB);\n    }\n  }\n\n  private fillEmptySpaces() {\n    //! bunlar için tüm gridi gezmeye gerek yok\n    const grid = this.grid;\n    for (let row = 0; row < this.gridWidth; row++) {\n      for (let col = 0; col < this.gridHeight; col++) {\n        const piece = grid[row][col];\n\n        if (piece.node === null) {\n          console.log(piece.row, piece.col);\n          const newPieceNode = PiecePool.getInstance().getPiece();\n          newPieceNode.setParent(this.node);\n          this.node.addChild(newPieceNode);\n\n          //! burayı piece sınıf içinde yapabiliriz\n          piece.node = newPieceNode;\n          piece.canSelect = true;\n          piece.ResetScale();\n          piece.updatePosition(row, col);\n        }\n      }\n    }\n  }\n}\n"]}