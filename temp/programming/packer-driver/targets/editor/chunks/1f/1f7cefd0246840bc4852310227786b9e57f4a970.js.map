{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Vec3","CCInteger","PiecesPool","InteractionManager","ccclass","property","GridGenerator","grid","PIECE_CONTENT_SIZE","interactionManager","start","node","setPosition","generateGrid","createPiece","row","col","piece","piecesPool","getPieceFromPool","setParent","createsMatch","getCenteredPosition","addChild","name","returnPieceToPool","j","i","_j","PIECE_OFFSET","_i"],"mappings":"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","sourcesContent":["import {\r\n  _decorator,\r\n  Component,\r\n  Node,\r\n  Vec3,\r\n  EventTouch,\r\n  Vec2,\r\n  CCInteger,\r\n} from \"cc\";\r\nimport { PiecesPool } from \"../Poolable/PiecesPool\";\r\nimport { EffectManager } from \"../Effects/EffectManager\";\r\nimport { InteractionManager } from \"../Interaction/InteractionManager\";\r\nconst { ccclass, property } = _decorator;\r\n\r\ntype PieceProps = {\r\n  piece: Node;\r\n  targetPosition: Vec3;\r\n};\r\n\r\n@ccclass(\"GridGenerator\")\r\nexport class GridGenerator extends Component {\r\n  private grid: Node[][] = [];\r\n\r\n  @property(PiecesPool)\r\n  private piecesPool: PiecesPool = null;\r\n\r\n  @property(CCInteger)\r\n  private PIECE_OFFSET: number = 5;\r\n\r\n  @property(CCInteger)\r\n  GRID_ROW: number = 0;\r\n\r\n  private PIECE_CONTENT_SIZE: number = 100; //dinamikleştir\r\n\r\n  private interactionManager: InteractionManager = new InteractionManager();\r\n\r\n  protected start(): void {\r\n    //!TODO: grid yerleşmesini ve content size'ı responsive yapmalıyız\r\n    this.node.setPosition(-7*50, -500);\r\n    this.generateGrid();\r\n  }\r\n\r\n  private async generateGrid() {\r\n    // for (let row = 0; row < this.GRID_ROW; row++) {\r\n    //   this.grid[row] = [];\r\n    //   const piecesInRow: PieceProps[] = [];\r\n    //   for (let col = 0; col < this.GRID_ROW; col++) {\r\n    //     const piece: Node = this.createPiece(row, col);\r\n    //     this.grid[row][col] = piece;\r\n    //     const pieceLastPosition = this.getCenteredPosition(col, row);\r\n    //     const pieceFirstPosition = new Vec3(\r\n    //       pieceLastPosition.x,\r\n    //       this.GRID_ROW * this.PIECE_CONTENT_SIZE\r\n    //     );\r\n    //     piece.setPosition(pieceFirstPosition);\r\n    //     //piecelere event listener ekliyoruz\r\n    //     // piece.on(Node.EventType.TOUCH_START, this.onPieceClicked, this);\r\n    //     piece.on(Node.EventType.TOUCH_START, (event: EventTouch) => {\r\n    //       this.interactionManager.onPieceClicked(event, piece , this.gridMap);\r\n    //     });\r\n    //     this.grid[row][col] = piece;\r\n\r\n    //     const pieceProps: PieceProps = {\r\n    //       piece: piece,\r\n    //       targetPosition: pieceLastPosition,\r\n    //     };\r\n    //     piecesInRow.push(pieceProps);\r\n    //   }\r\n    //   await EffectManager.animateRowFall(piecesInRow, 0.1);\r\n    // }\r\n  }\r\n\r\n  //bu fonksiyon init olurken match var mı diye kontrol edip piece üretiyor.\r\n  private createPiece(row: number, col: number): Node {\r\n    let piece: Node;\r\n    do {\r\n      piece = this.piecesPool.getPieceFromPool();\r\n      piece.setParent(this.node);\r\n    } while (this.createsMatch(piece, row, col, this.grid));\r\n    piece.setPosition(this.getCenteredPosition(col, row));\r\n    this.node.addChild(piece);\r\n    return piece;\r\n  }\r\n\r\n  private createsMatch(\r\n    piece: Node,\r\n    row: number,\r\n    col: number,\r\n    grid: Node[][]\r\n  ): boolean {\r\n    if (\r\n      row >= 2 &&\r\n      grid[row - 1][col]?.name === piece.name &&\r\n      grid[row - 2][col]?.name === piece.name\r\n    ) {\r\n      this.piecesPool.returnPieceToPool(piece);\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      col >= 2 &&\r\n      grid[row][col - 1]?.name === piece.name &&\r\n      grid[row][col - 2]?.name === piece.name\r\n    ) {\r\n      this.piecesPool.returnPieceToPool(piece);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private getCenteredPosition(j: number, i: number): Vec3 {\r\n    //EVERY game board should be square matrix\r\n    const _j = j * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\r\n    const _i = i * (this.PIECE_CONTENT_SIZE + this.PIECE_OFFSET); //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\r\n    return new Vec3(_j, _i);\r\n  }\r\n}\r\n"]}