{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Util/PriorityQueue.ts"],"names":["HeapManager","PriorityQueue","defaultComparer","a","b","constructor","comparer","_heap","count","length","items","addItem","item","push","bubbleUp","removeRoot","Error","rootItem","swap","pop","bubbleDown","peekRoot","index","parentIndex","priority","lastIndex","leftChild","rightChild","smallest","index1","index2","temp","Symbol","iterator","heapManager","comparerFunction","clear","enqueue","element","dequeue","dequeuedItem","peek","trimExcess","Math","ceil","ensureCapacity","capacity","enqueueRange","elements","forEach","enqueueDequeue","dequeuedElement","tryDequeue","tryPeek","contains","some","containsWithPriority","unorderedItems","trimToSize","isEmpty","shallowCopy","newQueue","setCapacity","toArray","map","next","value","done","undefined","from","iterable","queue","fromArray","array"],"mappings":"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","sourcesContent":["export type PriorityQueueItem<TElement, TPriority> = { element: TElement; priority: TPriority };\n\nexport interface IPriorityQueue<TElement, TPriority> extends Iterable<[TElement, TPriority]> {\n    comparer: (a: TPriority, b: TPriority) => number;\n    count: number;\n    clear(): void;\n    enqueue(element: TElement, priority: TPriority): void;\n    dequeue(): [TElement, TPriority];\n    peek(): [TElement, TPriority];\n    trimExcess(): void;\n    ensureCapacity(capacity: number): void;\n    enqueueRange(elements: TElement[], priority: TPriority): void;\n    enqueueDequeue(element: TElement, priority: TPriority): TElement;\n    tryDequeue(): [TElement, TPriority] | null;\n    tryPeek(): [TElement, TPriority] | null;\n    contains(element: TElement): boolean;\n    containsWithPriority(element: TElement, priority: TPriority): boolean;\n    unorderedItems: PriorityQueueItem<TElement, TPriority>[];\n    trimToSize(): void;\n    isEmpty(): boolean;\n    shallowCopy(): IPriorityQueue<TElement, TPriority>;\n    setCapacity(capacity: number): void;\n    toArray(): [TElement, TPriority][];\n}\n\nfunction defaultComparer<TPriority>(a: TPriority, b: TPriority): number {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nclass HeapManager<TElement, TPriority> {\n    private _heap: PriorityQueueItem<TElement, TPriority>[] = [];\n\n    constructor(private comparer: (a: TPriority, b: TPriority) => number) { }\n\n    get count(): number {\n        return this._heap.length;\n    }\n\n    get items(): PriorityQueueItem<TElement, TPriority>[] {\n        return this._heap;\n    }\n\n    addItem(item: PriorityQueueItem<TElement, TPriority>): void {\n        this._heap.push(item);\n        this.bubbleUp(this._heap.length - 1);\n    }\n\n    removeRoot(): PriorityQueueItem<TElement, TPriority> {\n        if (this.count === 0) throw new Error(\"The queue is empty.\");\n        const rootItem = this._heap[0];\n        this.swap(0, this.count - 1);\n        this._heap.pop();\n        this.bubbleDown(0);\n        return rootItem;\n    }\n\n    peekRoot(): PriorityQueueItem<TElement, TPriority> {\n        if (this.count === 0) throw new Error(\"The queue is empty.\");\n        return this._heap[0];\n    }\n\n    private bubbleUp(index: number): void {\n        while (index > 0) {\n            const parentIndex = ((index - 1) / 2) | 0;\n            if (this.comparer(this._heap[index].priority, this._heap[parentIndex].priority) < 0) {\n                this.swap(index, parentIndex);\n                index = parentIndex;\n            } else {\n                break;\n            }\n        }\n    }\n\n    private bubbleDown(index: number): void {\n        const lastIndex = this.count - 1;\n        while (index < lastIndex) {\n            const leftChild = (2 * index + 1) | 0;\n            const rightChild = (2 * index + 2) | 0;\n            let smallest = index;\n            if (leftChild <= lastIndex && this.comparer(this._heap[leftChild].priority, this._heap[smallest].priority) < 0) {\n                smallest = leftChild;\n            }\n            if (rightChild <= lastIndex && this.comparer(this._heap[rightChild].priority, this._heap[smallest].priority) < 0) {\n                smallest = rightChild;\n            }\n            if (smallest !== index) {\n                this.swap(index, smallest);\n                index = smallest;\n            } else {\n                break;\n            }\n        }\n    }\n\n    private swap(index1: number, index2: number): void {\n        const temp = this._heap[index1];\n        this._heap[index1] = this._heap[index2];\n        this._heap[index2] = temp;\n    }\n}\n\nexport class PriorityQueue<TElement, TPriority> implements IPriorityQueue<TElement, TPriority> {\n    private heapManager: HeapManager<TElement, TPriority>;\n\n    constructor(public comparer: (a: TPriority, b: TPriority) => number = defaultComparer) {\n        this.heapManager = new HeapManager(comparer);\n    }\n\n    get count(): number {\n        return this.heapManager.count;\n    }\n\n    get comparerFunction(): (a: TPriority, b: TPriority) => number {\n        return this.comparer;\n    }\n\n    clear(): void {\n        this.heapManager = new HeapManager(this.comparer);\n    }\n\n    enqueue(element: TElement, priority: TPriority): void {\n        const item: PriorityQueueItem<TElement, TPriority> = { element, priority };\n        this.heapManager.addItem(item);\n    }\n\n    dequeue(): [TElement, TPriority] {\n        const dequeuedItem = this.heapManager.removeRoot();\n        return [dequeuedItem.element, dequeuedItem.priority];\n    }\n\n    peek(): [TElement, TPriority] {\n        const item = this.heapManager.peekRoot();\n        return [item.element, item.priority];\n    }\n\n    trimExcess(): void {\n        this.heapManager.items.length = Math.ceil(this.heapManager.items.length * 0.9);\n    }\n\n    ensureCapacity(capacity: number): void {\n        if (capacity > this.heapManager.count) {\n            this.heapManager.items.length = capacity;\n        }\n    }\n\n    enqueueRange(elements: TElement[], priority: TPriority): void {\n        elements.forEach(element => this.enqueue(element, priority));\n    }\n\n    enqueueDequeue(element: TElement, priority: TPriority): TElement {\n        if (this.count === 0 || this.comparer(priority, this.peek()[1]) < 0) {\n            return element;\n        }\n        const dequeuedElement = this.dequeue()[0];\n        this.enqueue(element, priority);\n        return dequeuedElement;\n    }\n\n    tryDequeue(): [TElement, TPriority] | null {\n        return this.count === 0 ? null : this.dequeue();\n    }\n\n    tryPeek(): [TElement, TPriority] | null {\n        return this.count === 0 ? null : this.peek();\n    }\n\n    contains(element: TElement): boolean {\n        return this.heapManager.items.some(item => item.element === element);\n    }\n\n    containsWithPriority(element: TElement, priority: TPriority): boolean {\n        return this.heapManager.items.some(item => item.element === element && this.comparer(item.priority, priority) === 0);\n    }\n\n    get unorderedItems(): PriorityQueueItem<TElement, TPriority>[] {\n        return this.heapManager.items;\n    }\n\n    trimToSize(): void {\n        this.heapManager.items.length = this.count;\n    }\n\n    isEmpty(): boolean {\n        return this.count === 0;\n    }\n\n    shallowCopy(): IPriorityQueue<TElement, TPriority> {\n        const newQueue = new PriorityQueue<TElement, TPriority>(this.comparer);\n        newQueue.heapManager = new HeapManager<TElement, TPriority>(this.comparer);\n        newQueue.heapManager.items.push(...this.heapManager.items);\n        return newQueue;\n    }\n\n    setCapacity(capacity: number): void {\n        if (capacity < this.count) {\n            throw new Error(\"Capacity cannot be set to a value less than the current count.\");\n        }\n        this.heapManager.items.length = capacity;\n    }\n\n    toArray(): [TElement, TPriority][] {\n        return this.heapManager.items.map(item => [item.element, item.priority]);\n    }\n\n    [Symbol.iterator](): Iterator<[TElement, TPriority]> {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.heapManager.items.length) {\n                    return { value: [this.heapManager.items[index].element, this.heapManager.items[index++].priority], done: false };\n                } else {\n                    return { done: true, value: undefined as any };\n                }\n            }\n        };\n    }\n\n    static from<TElement, TPriority>(iterable: Iterable<[TElement, TPriority]>, comparer?: (a: TPriority, b: TPriority) => number): PriorityQueue<TElement, TPriority> {\n        const queue = new PriorityQueue<TElement, TPriority>(comparer);\n        for (const [element, priority] of iterable) {\n            queue.enqueue(element, priority);\n        }\n        return queue;\n    }\n\n    static fromArray<TElement, TPriority>(array: [TElement, TPriority][], comparer?: (a: TPriority, b: TPriority) => number): PriorityQueue<TElement, TPriority> {\n        return PriorityQueue.from(array, comparer);\n    }\n}\n"]}