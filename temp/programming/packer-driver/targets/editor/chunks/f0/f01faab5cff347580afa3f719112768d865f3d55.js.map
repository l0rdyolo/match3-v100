{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Match/MatchStrategies/HorizontalMatchStrategy.ts"],"names":["HorizontalMatchStrategy","GridManager","directions","dx","dy","checkMatch","pieceA","pieceB","grid","getInstance","firstCheck","checkSinglePieceMatch","secondCheck","concat","piece","matchedPieces","row","col","direction","currentRow","currentCol","length","currentPiece","canSelect","node","name","push"],"mappings":";;;2CAKaA,uB;;;;;;;;;;;;;;;;;;;;;;AALJC,MAAAA,W,iBAAAA,W;;;;;;;yCAKID,uB,GAAN,MAAMA,uBAAN,CAAuD;AAAA;AAAA,eACnDE,UADmD,GACtC,CAChB;AAAEC,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,EAAE,EAAE;AAAb,WADgB,EACE;AAClB;AAAED,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,EAAE,EAAE,CAAC;AAAd,WAFgB,CAEE;AAFF,WADsC;AAAA;;AAMnDC,QAAAA,UAAU,CAACC,MAAD,EAAiBC,MAAjB,EAAoC;AACjD,gBAAMC,IAAI,GAAG;AAAA;AAAA,0CAAYC,WAAZ,GAA0BD,IAAvC;AACA,gBAAME,UAAU,GAAG,KAAKC,qBAAL,CAA2BL,MAA3B,EAAoCE,IAApC,CAAnB;AACA,cAAII,WAAW,GAAG,KAAKD,qBAAL,CAA2BJ,MAA3B,EAAoCC,IAApC,CAAlB;AACAI,UAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBH,UAAnB,CAAd;AACA,iBAAOE,WAAP;AAAmB;AACtB;;AAIMD,QAAAA,qBAAqB,CAACG,KAAD,EAAeN,IAAf,EAA+B;AACvD,cAAIO,aAAsB,GAAG,EAA7B;AACA,gBAAM;AAAEC,YAAAA,GAAF;AAAOC,YAAAA;AAAP,cAAeH,KAArB;;AACA,eAAK,MAAMI,SAAX,IAAwB,KAAKhB,UAA7B,EAAyC;AACrC,gBAAIiB,UAAU,GAAGH,GAAjB;AACA,gBAAII,UAAU,GAAGH,GAAG,GAAGC,SAAS,CAACd,EAAjC;;AAEA,mBAAOgB,UAAU,IAAI,CAAd,IAAmBA,UAAU,GAAGZ,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAA/C,EAAuD;AACnD,oBAAMC,YAAY,GAAGd,IAAI,CAACW,UAAD,CAAJ,CAAiBC,UAAjB,CAArB;;AACA,kBAAIE,YAAY,CAACC,SAAb,IAA0BD,YAAY,CAACE,IAAb,CAAkBC,IAAlB,KAA2BX,KAAK,CAACU,IAAN,CAAWC,IAApE,EAA0E;AACtEV,gBAAAA,aAAa,CAACW,IAAd,CAAmBJ,YAAnB;AACH,eAFD,MAEO;AACH;AACH;;AACDF,cAAAA,UAAU,IAAIF,SAAS,CAACd,EAAxB;AACH;AACJ;;AAED,cAAIW,aAAa,CAACM,MAAd,IAAwB,CAA5B,EAA+B;AAC3BN,YAAAA,aAAa,CAACW,IAAd,CAAmBZ,KAAnB;AACH,WAFD,MAGI;AACAC,YAAAA,aAAa,GAAG,EAAhB;AACH;;AAED,iBAAOA,aAAP;AACH;;AA1CyD,O","sourcesContent":["import { GridManager } from \"../../Grid/GridManager\";\nimport { Piece } from \"../../Piece/Piece\";\nimport { MatchChecker } from \"../MatchChecker\";\nimport { MatchStrategy } from \"./IMatchStrategy\";\n\nexport class HorizontalMatchStrategy implements MatchStrategy {\n    public directions = [\n        { dx: 0, dy: 1 }, // Right\n        { dx: 0, dy: -1 } // Left\n    ];\n\n    public checkMatch(pieceA: Piece , pieceB : Piece  )  {\n        const grid = GridManager.getInstance().grid;\n        const firstCheck = this.checkSinglePieceMatch(pieceA , grid);\n        let secondCheck = this.checkSinglePieceMatch(pieceB , grid);\n        secondCheck = secondCheck.concat(firstCheck)\n        return secondCheck;;\n    }\n\n\n\n    public checkSinglePieceMatch(piece: Piece, grid: Piece[][]){\n        let matchedPieces: Piece[] = [];\n        const { row, col } = piece;\n        for (const direction of this.directions) {\n            let currentRow = row;\n            let currentCol = col + direction.dy;\n\n            while (currentCol >= 0 && currentCol < grid[0].length) {\n                const currentPiece = grid[currentRow][currentCol];\n                if (currentPiece.canSelect && currentPiece.node.name === piece.node.name) {\n                    matchedPieces.push(currentPiece);\n                } else {\n                    break;\n                }\n                currentCol += direction.dy;\n            }\n        }\n\n        if (matchedPieces.length >= 2) {\n            matchedPieces.push(piece);\n        }\n        else{\n            matchedPieces = [];\n        }\n\n        return matchedPieces;\n    }\n}"]}