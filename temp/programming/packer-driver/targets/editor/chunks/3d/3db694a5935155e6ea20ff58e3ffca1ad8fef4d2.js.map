{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","Color","Sprite","EffectManager","ccclass","Direction","MatchChecker","SwapPiecePositions","pieceA","pieceB","posA","posB","gridMap","movePiece","posAData","get","posBData","set","horizontalVisited","Set","verticalVisited","highlightNeighbors","console","log","Array","from","getPieceAtPosition","position","entries","find","_","pos","row","col","visitNeighborWithDirection","currentPiece","direction","visited","depth","maxDepth","currentPiecePosition","neighborPiecePosition","dx","dy","neighbor","has","name","sprite","getChildByName","getComponent","color","add","horizontalDirections","verticalDirections"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,K,OAAAA,K;AAAaC,MAAAA,M,OAAAA,M;;AACzBC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA;AAAF,O,GAAcJ,U;;iBAEfK,S;AAAAA,QAAAA,S,CAAAA,S;AAAAA,QAAAA,S,CAAAA,S;SAAAA,S,KAAAA,S;;8BAMQC,Y,WADZF,OAAO,CAAC,cAAD,C,2BAAR,MACaE,YADb,CAC0B;AAWc,qBAAlBC,kBAAkB,CACpCC,MADoC,EAEpCC,MAFoC,EAGpCC,IAHoC,EAIpCC,IAJoC,EAKpCC,OALoC,EAMpC;AACA;AAAA;AAAA,8CAAcC,SAAd,CAAwBL,MAAxB,EAAgCG,IAAhC,EAAsC,GAAtC;AACA,gBAAM;AAAA;AAAA,8CAAcE,SAAd,CAAwBJ,MAAxB,EAAgCC,IAAhC,EAAsC,GAAtC,CAAN,CAFA,CAIA;;AACA,gBAAMI,QAAQ,GAAGF,OAAO,CAACG,GAAR,CAAYP,MAAZ,CAAjB;AACA,gBAAMQ,QAAQ,GAAGJ,OAAO,CAACG,GAAR,CAAYN,MAAZ,CAAjB;AACAG,UAAAA,OAAO,CAACK,GAAR,CAAYT,MAAZ,EAAoBQ,QAApB;AACAJ,UAAAA,OAAO,CAACK,GAAR,CAAYR,MAAZ,EAAoBK,QAApB;AAEA,gBAAMI,iBAAiB,GAAG,IAAIC,GAAJ,EAA1B;AACA,gBAAMC,eAAe,GAAG,IAAID,GAAJ,EAAxB;AAEA,eAAKE,kBAAL,CAAwBZ,MAAxB,EAAgCG,OAAhC,EAAyCM,iBAAzC,EAA4DE,eAA5D;AAEAE,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,KAAK,CAACC,IAAN,CAAWP,iBAAX,CAAnC;AACAI,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,KAAK,CAACC,IAAN,CAAWL,eAAX,CAAjC;AACD;;AAEgC,eAAlBM,kBAAkB,CAC/BC,QAD+B,EAE/Bf,OAF+B,EAGb;AAAA;;AAClB,qCAAOY,KAAK,CAACC,IAAN,CAAWb,OAAO,CAACgB,OAAR,EAAX,EAA8BC,IAA9B,CACL,CAAC,CAACC,CAAD,EAAIC,GAAJ,CAAD,KAAcA,GAAG,CAACC,GAAJ,KAAYL,QAAQ,CAACK,GAArB,IAA4BD,GAAG,CAACE,GAAJ,KAAYN,QAAQ,CAACM,GAD1D,CAAP,qBAAO,iBAEH,CAFG,CAAP;AAGD;;AAEwC,eAA1BC,0BAA0B,CACvCC,YADuC,EAEvCvB,OAFuC,EAGvCwB,SAHuC,EAIvCC,OAJuC,EAKvCC,KALuC,EAMvCC,QANuC,EAOjC;AACN,cAAID,KAAK,GAAGC,QAAZ,EAAsB;AAEtB,gBAAMC,oBAAoB,GAAG5B,OAAO,CAACG,GAAR,CAAYoB,YAAZ,CAA7B;AACA,gBAAMM,qBAAqB,GAAG;AAC5BT,YAAAA,GAAG,EAAEQ,oBAAoB,CAACR,GAArB,GAA2BI,SAAS,CAACM,EADd;AAE5BT,YAAAA,GAAG,EAAEO,oBAAoB,CAACP,GAArB,GAA2BG,SAAS,CAACO;AAFd,WAA9B;AAKA,gBAAMC,QAAQ,GAAG,KAAKlB,kBAAL,CAAwBe,qBAAxB,EAA+C7B,OAA/C,CAAjB;;AACA,cAAIgC,QAAQ,IAAI,CAACP,OAAO,CAACQ,GAAR,CAAYD,QAAZ,CAAb,IAAsCA,QAAQ,CAACE,IAAT,KAAkBX,YAAY,CAACW,IAAzE,EAA+E;AAC7E,kBAAMC,MAAM,GAAGH,QAAQ,CAACI,cAAT,CAAwB,QAAxB,EAAkCC,YAAlC,CAA+C/C,MAA/C,CAAf;;AACA,gBAAI6C,MAAJ,EAAY;AACVA,cAAAA,MAAM,CAACG,KAAP,GAAe,IAAIjD,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,CAAf,CADU,CAC+B;AAC1C;;AACDoC,YAAAA,OAAO,CAACc,GAAR,CAAYP,QAAZ;AACA,iBAAKV,0BAAL,CAAgCU,QAAhC,EAA0ChC,OAA1C,EAAmDwB,SAAnD,EAA8DC,OAA9D,EAAuEC,KAAK,GAAG,CAA/E,EAAkFC,QAAlF;AACD;AACF;;AAEgC,eAAlBlB,kBAAkB,CAC/Bc,YAD+B,EAE/BvB,OAF+B,EAG/BM,iBAH+B,EAI/BE,eAJ+B,EAK/BkB,KAAa,GAAG,CALe,EAM/BC,QAAgB,GAAG,CANY,EAOzB;AACNrB,UAAAA,iBAAiB,CAACiC,GAAlB,CAAsBhB,YAAtB;AACAf,UAAAA,eAAe,CAAC+B,GAAhB,CAAoBhB,YAApB;;AAEA,eAAK,MAAMC,SAAX,IAAwB,KAAKgB,oBAA7B,EAAmD;AACjD,iBAAKlB,0BAAL,CAAgCC,YAAhC,EAA8CvB,OAA9C,EAAuDwB,SAAvD,EAAkElB,iBAAlE,EAAqFoB,KAArF,EAA4FC,QAA5F;AACD;;AACD,eAAK,MAAMH,SAAX,IAAwB,KAAKiB,kBAA7B,EAAiD;AAC/C,iBAAKnB,0BAAL,CAAgCC,YAAhC,EAA8CvB,OAA9C,EAAuDwB,SAAvD,EAAkEhB,eAAlE,EAAmFkB,KAAnF,EAA0FC,QAA1F;AACD;AACF;;AAzFuB,O,UACTa,oB,GAAuB,CACpC;AAAEV,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE;AAAb,OADoC,EAClB;AAClB;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE,CAAC;AAAd,OAFoC,CAEjB;AAFiB,O,UAKvBU,kB,GAAqB,CAClC;AAAEX,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE;AAAb,OADkC,EAChB;AAClB;AAAED,QAAAA,EAAE,EAAE,CAAC,CAAP;AAAUC,QAAAA,EAAE,EAAE;AAAd,OAFkC,CAEf;AAFe,O","sourcesContent":["import { _decorator, Color, Node, Sprite, Vec3 } from \"cc\";\nimport { EffectManager } from \"../Effects/EffectManager\";\nconst { ccclass } = _decorator;\n\nenum Direction {\n  Horizontal,\n  Vertical,\n}\n\n@ccclass(\"MatchChecker\")\nexport class MatchChecker {\n  private static horizontalDirections = [\n    { dx: 0, dy: 1 }, // Right\n    { dx: 0, dy: -1 }, // Left\n  ];\n\n  private static verticalDirections = [\n    { dx: 1, dy: 0 }, // Down\n    { dx: -1, dy: 0 }, // Up\n  ];\n\n  public static async SwapPiecePositions(\n    pieceA: Node,\n    pieceB: Node,\n    posA: Vec3,\n    posB: Vec3,\n    gridMap: Map<Node, { row: number; col: number }>\n  ) {\n    EffectManager.movePiece(pieceA, posB, 0.1);\n    await EffectManager.movePiece(pieceB, posA, 0.1);\n    \n    // Update the gridMap\n    const posAData = gridMap.get(pieceA);\n    const posBData = gridMap.get(pieceB);\n    gridMap.set(pieceA, posBData);\n    gridMap.set(pieceB, posAData);\n    \n    const horizontalVisited = new Set<Node>();\n    const verticalVisited = new Set<Node>();\n    \n    this.highlightNeighbors(pieceB, gridMap, horizontalVisited, verticalVisited);\n    \n    console.log(\"Horizontal Matches:\", Array.from(horizontalVisited));\n    console.log(\"Vertical Matches:\", Array.from(verticalVisited));\n  }\n\n  private static getPieceAtPosition(\n    position: { row: number; col: number },\n    gridMap: Map<Node, { row: number; col: number }>\n  ): Node | undefined {\n    return Array.from(gridMap.entries()).find(\n      ([_, pos]) => pos.row === position.row && pos.col === position.col\n    )?.[0];\n  }\n\n  private static visitNeighborWithDirection(\n    currentPiece: Node,\n    gridMap: Map<Node, { row: number; col: number }>,\n    direction: { dx: number; dy: number },\n    visited: Set<Node>,\n    depth: number,\n    maxDepth: number\n  ): void {\n    if (depth > maxDepth) return;\n\n    const currentPiecePosition = gridMap.get(currentPiece);\n    const neighborPiecePosition = {\n      row: currentPiecePosition.row + direction.dx,\n      col: currentPiecePosition.col + direction.dy,\n    };\n\n    const neighbor = this.getPieceAtPosition(neighborPiecePosition, gridMap);\n    if (neighbor && !visited.has(neighbor) && neighbor.name === currentPiece.name) {\n      const sprite = neighbor.getChildByName(\"Sprite\").getComponent(Sprite);\n      if (sprite) {\n        sprite.color = new Color(150, 150, 255); // Change color\n      }\n      visited.add(neighbor);\n      this.visitNeighborWithDirection(neighbor, gridMap, direction, visited, depth + 1, maxDepth);\n    }\n  }\n\n  private static highlightNeighbors(\n    currentPiece: Node,\n    gridMap: Map<Node, { row: number; col: number }>,\n    horizontalVisited: Set<Node>,\n    verticalVisited: Set<Node>,\n    depth: number = 0,\n    maxDepth: number = 3\n  ): void {\n    horizontalVisited.add(currentPiece);\n    verticalVisited.add(currentPiece);\n\n    for (const direction of this.horizontalDirections) {\n      this.visitNeighborWithDirection(currentPiece, gridMap, direction, horizontalVisited, depth, maxDepth);\n    }\n    for (const direction of this.verticalDirections) {\n      this.visitNeighborWithDirection(currentPiece, gridMap, direction, verticalVisited, depth, maxDepth);\n    }\n  }\n}\n"]}