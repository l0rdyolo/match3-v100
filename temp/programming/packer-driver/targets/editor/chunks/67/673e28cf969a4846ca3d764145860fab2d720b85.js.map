{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Color","Sprite","Vec3","SingletonComponent","GridGenerator","GameGlobal","SliderManager","MatchChecker","GravityHandler","PiecePool","ccclass","property","GridManager","_grid","gridGenerator","sliderManager","matchChecker","gravityHandler","gridWidth","gridHeight","gridOffset","colors","red","black","blue","yellow","grid","onLoad","init","highlightGridCorners","node","getComponentInChildren","color","start","getComponent","Generate","length","offsetDiff","PIECE_OFFSET","piecePositionsDiff","gridX","setPosition","SwapPieces","pieceA","pieceB","Slide","pa_row","row","pa_col","col","pb_row","pb_col","tempA","tempB","deleteMatches","matches","fillPromises","matchedPiece","delete","push","Promise","resolve","all","handleSelection","checkForMatches","applyGravity","fillEmptySpaces","piece","newPieceNode","getInstance","getPiece","setParent","addChild","canSelect","ResetScale","updatePosition","console","log"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Color,\n  Component,\n  Node,\n  Sprite,\n  SpriteFrame,\n  SpriteRenderer,\n  Vec2,\n  Vec3,\n} from \"cc\";\nimport { SingletonComponent } from \"../SingletonComponent\";\nimport { Piece } from \"../Piece/Piece\";\nimport { GridGenerator } from \"./GridGenerator\";\nimport { GameGlobal } from \"../Game/GameGlobal\";\nimport { SliderManager } from \"../Interaction/SliderManager\";\nimport { MatchChecker } from \"../Match/MatchChecker\";\nimport { GravityHandler } from \"./GravityHandler\";\nimport { PiecePool } from \"../Piece/PiecePool\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridManager\")\nexport class GridManager extends SingletonComponent<GridManager> {\n  private _grid: Piece[][];\n\n  private gridGenerator: GridGenerator = null;\n  private sliderManager: SliderManager = null;\n  private matchChecker: MatchChecker = null;\n  private gravityHandler: GravityHandler = null;\n\n  private gridWidth: number = 0;\n  public gridHeight: number = 0;\n  private gridOffset: number = 0;\n\n  private colors = {\n    red: new Color(255, 0, 0),\n    black: new Color(0, 0, 0),\n    blue: new Color(0, 0, 255),\n    yellow: new Color(255, 255, 0),\n  };\n\n  get grid() {\n    return this._grid;\n  }\n\n  protected onLoad(): void {\n    super.onLoad();\n    this.init();\n  }\n\n  protected init(): void {\n    this.sliderManager = new SliderManager();\n    this.matchChecker = new MatchChecker();\n    this.gravityHandler = new GravityHandler();\n  }\n\n  highlightGridCorners(){\n    this._grid[0][0].node.getComponentInChildren(Sprite).color = this.colors.black;\n    this._grid[this.gridHeight - 1][0].node.getComponentInChildren(Sprite).color = this.colors.yellow;\n    this._grid[0][this.gridWidth - 1].node.getComponentInChildren(Sprite).color = this.colors.blue;\n    this._grid[this.gridHeight - 1][this.gridWidth - 1].node.getComponentInChildren(Sprite).color = this.colors.red;\n  }\n\n  start() {\n    this.gridGenerator = this.node.getComponent(GridGenerator);\n    this._grid = this.gridGenerator.Generate();\n    this.gridWidth = this._grid[0].length;\n    this.gridHeight = this._grid.length;\n\n    const offsetDiff = (GameGlobal.PIECE_OFFSET / 2) * this.gridWidth;\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\n\n    const gridX = piecePositionsDiff + offsetDiff;\n    this.node.setPosition(new Vec3(gridX, -200, 0));\n    this.highlightGridCorners();\n  }\n\n  async SwapPieces(pieceA: Piece, pieceB: Piece) {\n    await this.sliderManager.Slide(pieceA, pieceB);\n    const pa_row = pieceA.row;\n    const pa_col = pieceA.col;\n\n    const pb_row = pieceB.row;\n    const pb_col = pieceB.col;\n\n    pieceA.row = pb_row;\n    pieceA.col = pb_col;\n\n    pieceB.row = pa_row;\n    pieceB.col = pa_col;\n\n    const tempA = this.grid[pa_row][pa_col];\n    const tempB = this.grid[pb_row][pb_col];\n\n    this.grid[pa_row][pa_col] = tempB;\n    this.grid[pb_row][pb_col] = tempA;\n  }\n\n  async deleteMatches(matches: Piece[]) {\n    const fillPromises: Promise<void>[] = [];\n\n    for (const matchedPiece of matches) {\n      matchedPiece.delete();\n      fillPromises.push(new Promise<void>((resolve) => {\n        resolve();\n      }));\n    }\n    await Promise.all(fillPromises); \n\n  }\n  async handleSelection(pieceA: Piece, pieceB: Piece) {\n    //! IDEA - 1: swap piece grid dönebilir.\n    //! IDEA - 2: selectionManager>applySelection() buraya taşınmalı\n    await this.SwapPieces(pieceA, pieceB);\n    let matches: Piece[] = await this.matchChecker.checkForMatches(pieceA,pieceB);\n    if (matches.length > 0) {\n      await this.deleteMatches(matches);\n      await this.gravityHandler.applyGravity(this._grid); \n      // await this.fillEmptySpaces(); \n    } else {\n      await this.SwapPieces(pieceA, pieceB);\n    }\n  }\n\n  private async fillEmptySpaces() {\n    const grid = this.grid;\n    const fillPromises: Promise<void>[] = [];\n\n    for (let row = 0; row < this.gridHeight; row++) {\n      for (let col = 0; col < this.gridWidth; col++) {\n        const piece = grid[row][col];\n\n        if (piece.node === null) {\n          const newPieceNode = PiecePool.getInstance().getPiece();\n          newPieceNode.setParent(this.node);\n          this.node.addChild(newPieceNode);\n\n          piece.node = newPieceNode;\n          piece.canSelect = true;\n          piece.ResetScale();\n          piece.updatePosition(row, col);\n\n          fillPromises.push(new Promise<void>((resolve) => {\n            resolve();\n          }));\n        }\n      }\n    }\n\n    await Promise.all(fillPromises); \n    console.log(\"empty cells filled\");\n    \n  }\n}\n"]}