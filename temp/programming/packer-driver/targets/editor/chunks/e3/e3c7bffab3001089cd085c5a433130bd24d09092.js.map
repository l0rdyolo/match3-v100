{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Piece/PiecePool.ts"],"names":["_decorator","Prefab","instantiate","SingletonComponent","ccclass","property","PiecePool","pool","Instance","getRandomPrefab","randomIndex","Math","floor","random","piecesPrefabs","length","getPiece","piece","pop","active","prefab","returnPiece","push","clearAll","forEach","destroy","onLoad"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;;AACpBC,MAAAA,kB,iBAAAA,kB;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;AAC9B;AACA;AACA;AACA;AACA;;2BAEaM,S,WADZF,OAAO,CAAC,WAAD,C,UAEHC,QAAQ,CAAC,CAACJ,MAAD,CAAD,C,2BAFb,MACaK,SADb;AAAA;AAAA,oDACkD;AAAA;AAAA;;AAAA;;AAAA,eAItCC,IAJsC,GAIvB,EAJuB;AAAA;;AAMpB,mBAARC,QAAQ,GAAc;AACpC,iBAAO,MAAMA,QAAb;AACH;;AAEOC,QAAAA,eAAe,GAAW;AAC9B,gBAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKC,aAAL,CAAmBC,MAA9C,CAApB;AACA,iBAAO,KAAKD,aAAL,CAAmBJ,WAAnB,CAAP;AACH;;AAGMM,QAAAA,QAAQ,GAAS;AACpB,cAAI,KAAKT,IAAL,CAAUQ,MAAV,GAAmB,CAAvB,EAA0B;AACtB,kBAAME,KAAK,GAAG,KAAKV,IAAL,CAAUW,GAAV,EAAd;AACAD,YAAAA,KAAK,CAAEE,MAAP,GAAgB,IAAhB;AACA,mBAAOF,KAAP;AACH,WAJD,MAIO;AACH,kBAAMG,MAAM,GAAG,KAAKX,eAAL,EAAf;AACA,mBAAOP,WAAW,CAACkB,MAAD,CAAlB;AACH;AACJ;;AAGMC,QAAAA,WAAW,CAACJ,KAAD,EAAc;AAC5BA,UAAAA,KAAK,CAACE,MAAN,GAAe,KAAf;AACA,eAAKZ,IAAL,CAAUe,IAAV,CAAeL,KAAf;AACH;;AAEMM,QAAAA,QAAQ,GAAG;AACd,eAAKhB,IAAL,CAAUiB,OAAV,CAAkBP,KAAK,IAAIA,KAAK,CAACQ,OAAN,EAA3B;AACA,eAAKlB,IAAL,GAAY,EAAZ;AACH;;AAESmB,QAAAA,MAAM,GAAS;AACrB,gBAAMA,MAAN;AACH;;AAxC6C,O;;;;;iBAEpB,E","sourcesContent":["import { _decorator, Prefab, instantiate, Node } from 'cc';\nimport { SingletonComponent } from '../SingeltonComponent';\nconst { ccclass, property } = _decorator;\n/**\n //! todo\n *  bu s覺n覺f覺 singelton yapal覺m.\n * \n */\n@ccclass('PiecePool')\nexport class PiecePool extends SingletonComponent {\n    @property([Prefab])\n    piecesPrefabs: Prefab[] = [];\n\n    private pool: Node[] = [];\n\n    public static get Instance(): PiecePool {\n        return super.Instance as PiecePool;\n    }\n\n    private getRandomPrefab(): Prefab {\n        const randomIndex = Math.floor(Math.random() * this.piecesPrefabs.length);\n        return this.piecesPrefabs[randomIndex];\n    }\n\n \n    public getPiece(): Node {\n        if (this.pool.length > 0) {\n            const piece = this.pool.pop();\n            piece!.active = true; \n            return piece!;\n        } else {\n            const prefab = this.getRandomPrefab();\n            return instantiate(prefab);\n        }\n    }\n\n\n    public returnPiece(piece: Node) {\n        piece.active = false; \n        this.pool.push(piece);\n    }\n\n    public clearAll() {\n        this.pool.forEach(piece => piece.destroy());\n        this.pool = [];\n    }\n\n    protected onLoad(): void {\n        super.onLoad();\n    }\n}\n"]}