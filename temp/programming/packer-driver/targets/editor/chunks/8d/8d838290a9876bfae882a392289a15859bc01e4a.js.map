{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Runtime/Transformation/ObjectRepository.ts"],"names":["ObjectRepository","constructor","maxItems","items","Map","getId","item","uuid","add","size","Error","id","has","set","get","getAll","Array","from","values","update","remove","delete","find","predicate","filter","count","exists","clear","insertMany","length","popLast","lastEntry","entries","pop","lastKey","lastValue"],"mappings":"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","sourcesContent":["import { Component, Node } from 'cc';\n\n/**\n * Represents an object repository that stores and manages objects of type T.\n *\n * @template T - The type of objects stored in the repository.\n */\nexport interface IObjectRepository<T extends Component | Node> {\n    /**\n     * Adds an item to the repository.\n     *\n     * @param item - The item to be added.\n     */\n    add(item: T): void;\n\n    /**\n     * Retrieves an item from the repository based on its ID.\n     *\n     * @param id - The ID of the item to retrieve.\n     * @returns The item with the specified ID, or null if not found.\n     */\n    get(id: string): T | null;\n\n    /**\n     * Retrieves all items from the repository.\n     *\n     * @returns An array of all items in the repository.\n     */\n    getAll(): T[];\n\n    /**\n     * Updates an item in the repository.\n     *\n     * @param item - The item to be updated.\n     */\n    update(item: T): void;\n\n    /**\n     * Removes an item from the repository based on its ID.\n     *\n     * @param id - The ID of the item to remove.\n     */\n    remove(id: string): void;\n\n    /**\n     * Finds items in the repository that match the specified predicate.\n     *\n     * @param predicate - A function that determines whether an item matches the\n     * search criteria.\n     *\n     * @returns An array of items that match the predicate.\n     */\n    find(predicate: (item: T) => boolean): T[];\n\n    /**\n     * Returns the number of items in the repository.\n     *\n     * @returns The number of items in the repository.\n     */\n    count(): number;\n\n    /**\n     * Checks if an item with the specified ID exists in the repository.\n     *\n     * @param id - The ID to check.\n     * @returns True if an item with the specified ID exists, false otherwise.\n     */\n    exists(id: string): boolean;\n\n    /**\n     * Clears all items from the repository.\n     */\n    clear(): void;\n\n    /**\n     * Inserts multiple items into the repository.\n     *\n     * @param items - An array of items to insert.\n     */\n    insertMany(items: T[]): void;\n}\n\n// export class ObjectRepository<T extends Component | Node> implements IObjectRepository<T> {\n//     private items: Map<string, T> = new Map();\n\n//     private getId(item: T): string {\n//         return item.uuid;\n//     }\n\n//     add(item: T): void {\n//         const id = this.getId(item);\n//         if (this.items.has(id)) {\n//             throw new Error(`Item with id ${id} already exists.`);\n//         }\n//         this.items.set(id, item);\n//     }\n\n//     get(id: string): T | null {\n//         return this.items.get(id) ?? null;\n//     }\n\n//     getAll(): T[] {\n//         return Array.from(this.items.values());\n//     }\n\n//     update(item: T): void {\n//         const id = this.getId(item);\n//         if (!this.items.has(id)) {\n//             throw new Error(`Item with id ${id} does not exist.`);\n//         }\n//         this.items.set(id, item);\n//     }\n\n//     remove(id: string): void {\n//         if (!this.items.delete(id)) {\n//             throw new Error(`Item with id ${id} does not exist.`);\n//         }\n//     }\n\n//     find(predicate: (item: T) => boolean): T[] {\n//         return Array.from(this.items.values()).filter(predicate);\n//     }\n\n//     count(): number {\n//         return this.items.size;\n//     }\n\n//     exists(id: string): boolean {\n//         return this.items.has(id);\n//     }\n\n//     clear(): void {\n//         this.items.clear();\n//     }\n\n//     insertMany(items: T[]): void {\n//         for (const item of items) {\n//             this.add(item);\n//         }\n//     }\n\n//     popLast(): T | null {\n//         if (this.items.size === 0) {\n//             return null;\n//         }\n//         const lastEntry = Array.from(this.items.entries()).pop();\n//         if (!lastEntry) {\n//             return null;\n//         }\n//         const [lastKey, lastValue] = lastEntry;\n//         this.items.delete(lastKey);\n//         return lastValue;\n//     }\n// }\n\nexport class ObjectRepository<T extends Component | Node> implements IObjectRepository<T> {\n    private items: Map<string, T> = new Map();\n    private maxItems: number;\n\n    constructor(maxItems: number) {\n        this.maxItems = maxItems;\n    }\n\n    private getId(item: T): string {\n        return item.uuid;\n    }\n\n    add(item: T): void {\n        if (this.items.size >= this.maxItems) {\n            throw new Error(`Cannot add item: repository has reached its maximum limit of ${this.maxItems} items.`);\n        }\n        const id = this.getId(item);\n        if (this.items.has(id)) {\n            throw new Error(`Item with id ${id} already exists.`);\n        }\n        this.items.set(id, item);\n    }\n\n    get(id: string): T | null {\n        return this.items.get(id) ?? null;\n    }\n\n    getAll(): T[] {\n        return Array.from(this.items.values());\n    }\n\n    update(item: T): void {\n        const id = this.getId(item);\n        if (!this.items.has(id)) {\n            throw new Error(`Item with id ${id} does not exist.`);\n        }\n        this.items.set(id, item);\n    }\n\n    remove(id: string): void {\n        if (!this.items.delete(id)) {\n            throw new Error(`Item with id ${id} does not exist.`);\n        }\n    }\n\n    find(predicate: (item: T) => boolean): T[] {\n        return Array.from(this.items.values()).filter(predicate);\n    }\n\n    count(): number {\n        return this.items.size;\n    }\n\n    exists(id: string): boolean {\n        return this.items.has(id);\n    }\n\n    clear(): void {\n        this.items.clear();\n    }\n\n    insertMany(items: T[]): void {\n        if (this.items.size + items.length > this.maxItems) {\n            throw new Error(`Cannot insert items: repository will exceed its maximum limit of ${this.maxItems} items.`);\n        }\n        for (const item of items) {\n            this.add(item);\n        }\n    }\n\n    popLast(): T | null {\n        if (this.items.size === 0) {\n            return null;\n        }\n        const lastEntry = Array.from(this.items.entries()).pop();\n        if (!lastEntry) {\n            return null;\n        }\n        const [lastKey, lastValue] = lastEntry;\n        this.items.delete(lastKey);\n        return lastValue;\n    }\n}"]}