{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","ccclass","Direction","MatchChecker","checkMatch","grid","piece","row","col","checkMatchInDirection","Horizontal","Vertical","direction","pieceName","name","matchCount","countMatches","step","i","j","isWithinBounds","length"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;;;;;;;;OACH;AAAEC,QAAAA;AAAF,O,GAAcD,U;;iBAEfE,S;AAAAA,QAAAA,S,CAAAA,S;AAAAA,QAAAA,S,CAAAA,S;SAAAA,S,KAAAA,S;;8BAMQC,Y,WADZF,OAAO,CAAC,cAAD,C,gBAAR,MACaE,YADb,CAC0B;AACE,eAAVC,UAAU,CAACC,IAAD,EAAiBC,KAAjB,EAA8BC,GAA9B,EAA2CC,GAA3C,EAAiE;AACrF,iBACI,KAAKC,qBAAL,CAA2BJ,IAA3B,EAAiCC,KAAjC,EAAwCC,GAAxC,EAA6CC,GAA7C,EAAkDN,SAAS,CAACQ,UAA5D,KACA,KAAKD,qBAAL,CAA2BJ,IAA3B,EAAiCC,KAAjC,EAAwCC,GAAxC,EAA6CC,GAA7C,EAAkDN,SAAS,CAACS,QAA5D,CAFJ;AAIH;;AAEmC,eAArBF,qBAAqB,CAACJ,IAAD,EAAiBC,KAAjB,EAA8BC,GAA9B,EAA2CC,GAA3C,EAAwDI,SAAxD,EAAuF;AACvH,gBAAMC,SAAS,GAAGP,KAAK,CAACQ,IAAxB;AACA,gBAAMC,UAAU,GAAG,IACf,KAAKC,YAAL,CAAkBX,IAAlB,EAAwBQ,SAAxB,EAAmCN,GAAnC,EAAwCC,GAAxC,EAA6CI,SAA7C,EAAwD,CAAC,CAAzD,CADe,GAC+C;AAC9D,eAAKI,YAAL,CAAkBX,IAAlB,EAAwBQ,SAAxB,EAAmCN,GAAnC,EAAwCC,GAAxC,EAA6CI,SAA7C,EAAwD,CAAxD,CAFJ,CAFuH,CAIrD;;AAElE,iBAAOG,UAAU,IAAI,CAArB;AACH;;AAE0B,eAAZC,YAAY,CAACX,IAAD,EAAiBQ,SAAjB,EAAoCN,GAApC,EAAiDC,GAAjD,EAA8DI,SAA9D,EAAoFK,IAApF,EAA0G;AACjI,cAAIF,UAAU,GAAG,CAAjB;AAEA,cAAI,CAACG,CAAD,EAAIC,CAAJ,IAASP,SAAS,KAAKV,SAAS,CAACQ,UAAxB,GACP,CAACH,GAAD,EAAMC,GAAG,GAAGS,IAAZ,CADO,GAEP,CAACV,GAAG,GAAGU,IAAP,EAAaT,GAAb,CAFN;;AAIA,iBAAO,KAAKY,cAAL,CAAoBf,IAApB,EAA0Ba,CAA1B,EAA6BC,CAA7B,KAAmCd,IAAI,CAACa,CAAD,CAAJ,CAAQC,CAAR,EAAWL,IAAX,KAAoBD,SAA9D,EAAyE;AACrEE,YAAAA,UAAU;AACVH,YAAAA,SAAS,KAAKV,SAAS,CAACQ,UAAxB,GAAqCS,CAAC,IAAIF,IAA1C,GAAiDC,CAAC,IAAID,IAAtD;AACH;;AAED,iBAAOF,UAAP;AACH;;AAE4B,eAAdK,cAAc,CAACf,IAAD,EAAiBE,GAAjB,EAA8BC,GAA9B,EAAoD;AAC7E,iBAAOD,GAAG,IAAI,CAAP,IAAYA,GAAG,GAAGF,IAAI,CAACgB,MAAvB,IAAiCb,GAAG,IAAI,CAAxC,IAA6CA,GAAG,GAAGH,IAAI,CAACE,GAAD,CAAJ,CAAUc,MAApE;AACH;;AAlCqB,O","sourcesContent":["import { _decorator, Node } from 'cc';\nconst { ccclass } = _decorator;\n\nenum Direction {\n    Horizontal,\n    Vertical,\n}\n\n@ccclass('MatchChecker')\nexport class MatchChecker {\n    public static checkMatch(grid: Node[][], piece: Node, row: number, col: number): boolean {\n        return (\n            this.checkMatchInDirection(grid, piece, row, col, Direction.Horizontal) ||\n            this.checkMatchInDirection(grid, piece, row, col, Direction.Vertical)\n        );\n    }\n\n    private static checkMatchInDirection(grid: Node[][], piece: Node, row: number, col: number, direction: Direction): boolean {\n        const pieceName = piece.name;\n        const matchCount = 1 + \n            this.countMatches(grid, pieceName, row, col, direction, -1) + // Count matches in the negative direction\n            this.countMatches(grid, pieceName, row, col, direction, 1);   // Count matches in the positive direction\n\n        return matchCount >= 3;\n    }\n\n    private static countMatches(grid: Node[][], pieceName: string, row: number, col: number, direction: Direction, step: number): number {\n        let matchCount = 0;\n\n        let [i, j] = direction === Direction.Horizontal\n            ? [row, col + step]\n            : [row + step, col];\n\n        while (this.isWithinBounds(grid, i, j) && grid[i][j].name === pieceName) {\n            matchCount++;\n            direction === Direction.Horizontal ? j += step : i += step;\n        }\n\n        return matchCount;\n    }\n\n    private static isWithinBounds(grid: Node[][], row: number, col: number): boolean {\n        return row >= 0 && row < grid.length && col >= 0 && col < grid[row].length;\n    }\n}\n"]}