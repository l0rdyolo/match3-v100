{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Match/MatchStrategies/VerticalMatchStrategy.ts"],"names":["VerticalMatchStrategy","directions","dx","dy","checkMatch","pieceA","pieceB","grid","firstCheck","checkSinglePieceMatch","secondCheck","concat","piece","matchedPieces","row","col","direction","currentRow","currentCol","length","currentPiece","isEmpty","node","name","push"],"mappings":";;;8BAIaA,qB;;;;;;;;;;;;;;;;;;;;;;;uCAAAA,qB,GAAN,MAAMA,qBAAN,CAAqD;AAAA;AAAA,eACjDC,UADiD,GACpC,CAChB;AAAEC,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,EAAE,EAAE;AAAb,WADgB,EACE;AAClB;AAAED,YAAAA,EAAE,EAAE,CAAC,CAAP;AAAUC,YAAAA,EAAE,EAAE;AAAd,WAFgB,CAEE;AAFF,WADoC;AAAA;;AAMjDC,QAAAA,UAAU,CAACC,MAAD,EAAiBC,MAAjB,EAAkCC,IAAlC,EAAoD;AACjE,gBAAMC,UAAU,GAAG,KAAKC,qBAAL,CAA2BJ,MAA3B,EAAoCE,IAApC,CAAnB;AACA,cAAIG,WAAW,GAAG,KAAKD,qBAAL,CAA2BH,MAA3B,EAAoCC,IAApC,CAAlB;AACAG,UAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBH,UAAnB,CAAd;AACA,iBAAOE,WAAP;AAAmB;AACtB;;AAEMD,QAAAA,qBAAqB,CAACG,KAAD,EAAeL,IAAf,EAA+B;AACvD,cAAIM,aAAsB,GAAG,EAA7B;AACA,gBAAM;AAAEC,YAAAA,GAAF;AAAOC,YAAAA;AAAP,cAAeH,KAArB;;AAEA,eAAK,MAAMI,SAAX,IAAwB,KAAKf,UAA7B,EAAyC;AACrC,gBAAIgB,UAAU,GAAGH,GAAG,GAAGE,SAAS,CAACd,EAAjC;AACA,gBAAIgB,UAAU,GAAGH,GAAjB;;AAEA,mBAAOE,UAAU,IAAI,CAAd,IAAmBA,UAAU,GAAGV,IAAI,CAACY,MAA5C,EAAoD;AAChD,oBAAMC,YAAY,GAAGb,IAAI,CAACU,UAAD,CAAJ,CAAiBC,UAAjB,CAArB;AACA,kBAAG,CAACE,YAAY,CAACC,OAAd,IAAyB,CAACT,KAAK,CAACS,OAAnC,EAA4C;;AAC5C,kBAAKD,YAAY,CAACE,IAAb,CAAkBC,IAAlB,KAA2BX,KAAK,CAACU,IAAN,CAAWC,IAA3C,EAAiD;AAC7CV,gBAAAA,aAAa,CAACW,IAAd,CAAmBJ,YAAnB;AACH,eAFD,MAEO;AACH;AACH;;AACDH,cAAAA,UAAU,IAAID,SAAS,CAACd,EAAxB;AACH;AACJ;;AAED,cAAIW,aAAa,CAACM,MAAd,IAAwB,CAA5B,EAA+B;AAC3BN,YAAAA,aAAa,CAACW,IAAd,CAAmBZ,KAAnB;AACH,WAFD,MAGI;AACAC,YAAAA,aAAa,GAAG,EAAhB;AACH;;AAED,iBAAOA,aAAP;AACH;;AAzCuD,O","sourcesContent":["import { GridManager } from \"../../Grid/GridManager\";\nimport { Piece } from \"../../Piece/Piece\";\nimport { MatchStrategy } from \"./IMatchStrategy\";\n\nexport class VerticalMatchStrategy implements MatchStrategy {\n    public directions = [\n        { dx: 1, dy: 0 }, // Down\n        { dx: -1, dy: 0 } // Up\n    ];\n\n    public checkMatch(pieceA: Piece , pieceB : Piece , grid: Piece[][])  {\n        const firstCheck = this.checkSinglePieceMatch(pieceA , grid);\n        let secondCheck = this.checkSinglePieceMatch(pieceB , grid)\n        secondCheck = secondCheck.concat(firstCheck)\n        return secondCheck;;\n    }\n\n    public checkSinglePieceMatch(piece: Piece, grid: Piece[][]){\n        let matchedPieces: Piece[] = [];\n        const { row, col } = piece;\n\n        for (const direction of this.directions) {\n            let currentRow = row + direction.dx;\n            let currentCol = col;\n\n            while (currentRow >= 0 && currentRow < grid.length) {\n                const currentPiece = grid[currentRow][currentCol];\n                if(!currentPiece.isEmpty || !piece.isEmpty) continue; \n                if ( currentPiece.node.name === piece.node.name) {\n                    matchedPieces.push(currentPiece);\n                } else {\n                    break;\n                }\n                currentRow += direction.dx;\n            }\n        }\n\n        if (matchedPieces.length >= 2) {\n            matchedPieces.push(piece);\n        }\n        else{\n            matchedPieces = [];\n        }\n\n        return matchedPieces;\n    }\n}"]}