{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","GridManager","ccclass","property","GravityHandler","applyGravity","matches","columnPieceCount","Map","piece","col","has","set","get","applyGravityToCol","emptySpaces","applyGravityForSingleColumn","grid","getInstance","row","length","undefined","newRow","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AAEZC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;gCAGjBK,c,WADZF,OAAO,CAAC,gBAAD,C,UAGHC,QAAQ;AAAA;AAAA,qC,2BAHb,MACaC,cADb,SACoCJ,SADpC,CAC8C;AAAA;AAAA;;AAAA;AAAA;;AAK1CK,QAAAA,YAAY,CAACC,OAAD,EAAmB;AAC3B,gBAAMC,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB,CAD2B,CAG3B;;AACA,eAAK,MAAMC,KAAX,IAAoBH,OAApB,EAA6B;AACzB,kBAAMI,GAAG,GAAGD,KAAK,CAACC,GAAlB;;AACA,gBAAIH,gBAAgB,CAACI,GAAjB,CAAqBD,GAArB,CAAJ,EAA+B;AAC3BH,cAAAA,gBAAgB,CAACK,GAAjB,CAAqBF,GAArB,EAA0BH,gBAAgB,CAACM,GAAjB,CAAqBH,GAArB,IAA4B,CAAtD;AACH,aAFD,MAEO;AACHH,cAAAA,gBAAgB,CAACK,GAAjB,CAAqBF,GAArB,EAA0B,CAA1B;AACH;AACJ;;AAED,eAAKI,iBAAL,CAAuBP,gBAAvB;AACH;;AAEDO,QAAAA,iBAAiB,CAACP,gBAAD,EAAwC;AACrD,eAAK,MAAM,CAACG,GAAD,EAAMK,WAAN,CAAX,IAAiCR,gBAAjC,EAAmD;AAC/C,iBAAKS,2BAAL,CAAiCN,GAAjC,EAAsCK,WAAtC;AACH;AACJ;;AAEDC,QAAAA,2BAA2B,CAACN,GAAD,EAAcK,WAAd,EAAmC;AAC1D,gBAAME,IAAI,GAAG;AAAA;AAAA,0CAAYC,WAAZ,GAA0BD,IAAvC;;AAEA,eAAK,IAAIE,GAAG,GAAGF,IAAI,CAACG,MAAL,GAAc,CAA7B,EAAgCD,GAAG,IAAI,CAAvC,EAA0CA,GAAG,EAA7C,EAAiD;AAC7C,kBAAMV,KAAK,GAAGQ,IAAI,CAACE,GAAD,CAAJ,CAAUT,GAAV,CAAd;;AAEA,gBAAID,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKY,SAAhC,EAA2C;AACvC,oBAAMC,MAAM,GAAGH,GAAG,GAAGJ,WAArB;;AAEA,kBAAIO,MAAM,GAAGL,IAAI,CAACG,MAAlB,EAA0B;AACtBG,gBAAAA,OAAO,CAACC,GAAR,CAAa,yBAAwBL,GAAI,UAAST,GAAI,cAAaY,MAAO,UAASZ,GAAI,GAAvF,EADsB,CAGtB;;AACAO,gBAAAA,IAAI,CAACK,MAAD,CAAJ,CAAaZ,GAAb,IAAoBD,KAApB;AACAA,gBAAAA,KAAK,CAACU,GAAN,GAAYG,MAAZ;AACAL,gBAAAA,IAAI,CAACE,GAAD,CAAJ,CAAUT,GAAV,IAAiB,IAAjB;AACH;AACJ;AACJ,WAlByD,CAoB1D;AACA;AACA;AACA;AACA;AACA;;AACH;;AArDyC,O;;;;;iBAGP,I","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nimport { Piece } from '../Piece/Piece';\nimport { GridManager } from '../Grid/GridManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GravityHandler')\nexport class GravityHandler extends Component {\n\n    @property(GridManager)\n    private gridManager: GridManager = null;\n\n    applyGravity(matches: Piece[]) {\n        const columnPieceCount = new Map<number, number>();\n        \n        // Sütunlarda kaç adet boşluk oluştuğunu hesapla\n        for (const piece of matches) {\n            const col = piece.col;\n            if (columnPieceCount.has(col)) {\n                columnPieceCount.set(col, columnPieceCount.get(col) + 1);\n            } else {\n                columnPieceCount.set(col, 1);\n            }\n        }\n\n        this.applyGravityToCol(columnPieceCount);\n    }\n\n    applyGravityToCol(columnPieceCount: Map<number, number>) {\n        for (const [col, emptySpaces] of columnPieceCount) {\n            this.applyGravityForSingleColumn(col, emptySpaces);\n        }\n    }\n\n    applyGravityForSingleColumn(col: number, emptySpaces: number) {\n        const grid = GridManager.getInstance().grid;\n\n        for (let row = grid.length - 1; row >= 0; row--) {\n            const piece = grid[row][col];\n\n            if (piece !== null && piece !== undefined) {\n                const newRow = row + emptySpaces;\n\n                if (newRow < grid.length) {\n                    console.log(`Moving piece at (row: ${row}, col: ${col}) to (row: ${newRow}, col: ${col})`);\n\n                    // Parçayı yeni yerine taşı\n                    grid[newRow][col] = piece;\n                    piece.row = newRow;\n                    grid[row][col] = null;\n                }\n            }\n        }\n\n        // Yeni parçalara yer açılması için boş kalan üst alanları doldur\n        // for (let i = 0; i < emptySpaces; i++) {\n        //     const newPiece = this.gridManager.createPiece(0, col);\n        //     grid[i][col] = newPiece;\n        //     console.log(`New piece created at (row: ${i}, col: ${col})`);\n        // }\n    }\n}\n"]}