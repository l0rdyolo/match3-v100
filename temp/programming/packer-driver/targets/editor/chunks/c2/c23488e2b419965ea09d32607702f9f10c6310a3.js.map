{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Color","Sprite","Vec3","SingletonComponent","GridGenerator","GameGlobal","SliderManager","MatchChecker","GravityHandler","PiecePool","ccclass","property","GridManager","_grid","gridGenerator","sliderManager","matchChecker","gravityHandler","gridWidth","gridHeight","gridOffset","colors","red","black","blue","yellow","grid","onLoad","init","highlightGridCorners","node","getComponentInChildren","color","start","getComponent","Generate","length","offsetDiff","PIECE_OFFSET","piecePositionsDiff","gridX","setPosition","SwapPieces","pieceA","pieceB","Slide","pa_row","row","pa_col","col","pb_row","pb_col","tempA","tempB","deleteMatches","matches","fillPromises","matchedPiece","delete","push","Promise","resolve","all","handleSelection","checkForMatches","applyGravity","console","log","sleep","fillEmptySpaces","ms","setTimeout","emptyPieces","piece","isEmpty","newPieceNode","getInstance","getPiece","setParent","addChild","updatePosition","consoleGrid","emptyCounter","i","j","currentPiece"],"mappings":"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","sourcesContent":["import { _decorator, Color, Sprite, Vec3 } from \"cc\";\nimport { SingletonComponent } from \"../SingletonComponent\";\nimport { Piece } from \"../Piece/Piece\";\nimport { GridGenerator } from \"./GridGenerator\";\nimport { GameGlobal } from \"../Game/GameGlobal\";\nimport { SliderManager } from \"../Interaction/SliderManager\";\nimport { MatchChecker } from \"../Match/MatchChecker\";\nimport { GravityHandler } from \"./GravityHandler\";\nimport { PiecePool } from \"../Piece/PiecePool\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridManager\")\nexport class GridManager extends SingletonComponent<GridManager> {\n  private _grid: Piece[][];\n\n  private gridGenerator: GridGenerator = null;\n  private sliderManager: SliderManager = null;\n  private matchChecker: MatchChecker = null;\n  private gravityHandler: GravityHandler = null;\n\n  private gridWidth: number = 0;\n  public gridHeight: number = 0;\n  private gridOffset: number = 0;\n\n  private colors = {\n    red: new Color(255, 0, 0),\n    black: new Color(0, 0, 0),\n    blue: new Color(0, 0, 255),\n    yellow: new Color(255, 255, 0),\n  };\n\n  get grid() {\n    return this._grid;\n  }\n\n  protected onLoad(): void {\n    super.onLoad();\n    this.init();\n  }\n\n  protected init(): void {\n    this.sliderManager = new SliderManager();\n    this.matchChecker = new MatchChecker();\n    this.gravityHandler = new GravityHandler();\n  }\n\n  highlightGridCorners() {\n    this._grid[0][0].node.getComponentInChildren(Sprite).color =\n      this.colors.black;\n    this._grid[this.gridHeight - 1][0].node.getComponentInChildren(\n      Sprite\n    ).color = this.colors.yellow;\n    this._grid[0][this.gridWidth - 1].node.getComponentInChildren(\n      Sprite\n    ).color = this.colors.blue;\n    this._grid[this.gridHeight - 1][\n      this.gridWidth - 1\n    ].node.getComponentInChildren(Sprite).color = this.colors.red;\n  }\n\n  start() {\n    this.gridGenerator = this.node.getComponent(GridGenerator);\n    this._grid = this.gridGenerator.Generate();\n    this.gridWidth = this._grid[0].length;\n    this.gridHeight = this._grid.length;\n\n    const offsetDiff = (GameGlobal.PIECE_OFFSET / 2) * this.gridWidth;\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\n\n    const gridX = piecePositionsDiff + offsetDiff;\n    this.node.setPosition(new Vec3(gridX, -200, 0));\n    // this.highlightGridCorners();\n  }\n\n  async SwapPieces(pieceA: Piece, pieceB: Piece) {\n    await this.sliderManager.Slide(pieceA, pieceB);\n\n    const pa_row = pieceA.row;\n    const pa_col = pieceA.col;\n\n    const pb_row = pieceB.row;\n    const pb_col = pieceB.col;\n\n    pieceA.row = pb_row;\n    pieceA.col = pb_col;\n\n    pieceB.row = pa_row;\n    pieceB.col = pa_col;\n\n    const tempA = this.grid[pa_row][pa_col];\n    const tempB = this.grid[pb_row][pb_col];\n\n    this.grid[pa_row][pa_col] = tempB;\n    this.grid[pb_row][pb_col] = tempA;\n  }\n\n  async deleteMatches(matches: Piece[]) {\n    const fillPromises: Promise<void>[] = [];\n\n    for (const matchedPiece of matches) {\n      matchedPiece.delete();\n      fillPromises.push(\n        new Promise<void>((resolve) => {\n          resolve();\n        })\n      );\n    }\n    await Promise.all(fillPromises);\n  }\n  async handleSelection(pieceA: Piece, pieceB: Piece) {\n    await this.SwapPieces(pieceA, pieceB);\n    let matches: Piece[] = await this.matchChecker.checkForMatches(\n      pieceA,\n      pieceB,\n      this.grid\n    );\n    if (matches.length > 0) {\n      await this.deleteMatches(matches);\n       await this.gravityHandler.applyGravity(this.grid);\n      console.log(matches);\n      await this.sleep(1000);\n      await this.fillEmptySpaces(matches);\n      await this.sleep(900);\n\n      //buraya bir sleep patlar\n      /*\n      let newMatches: Piece[] = await this.matchChecker.checkForMatchesAfterGravity(this.grid);\n\n      while (newMatches.length > 0) { \n          await this.deleteMatches(newMatches);\n          await this.gravityHandler.applyGravity(this.grid);\n          await this.sleep(3000);\n          await this.fillEmptySpaces();\n          await this.sleep(1900);\n\n          newMatches = await this.matchChecker.checkForMatchesAfterGravity(this.grid);\n      }\n\n      */\n    } else {\n      await this.SwapPieces(pieceA, pieceB);\n    }\n  }\n\n  sleep(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  private async fillEmptySpaces(emptyPieces: Piece[]) {\n    for (const piece of emptyPieces) {\n      if (!piece.isEmpty) continue;\n      const newPieceNode = PiecePool.getInstance().getPiece();\n      piece.node = newPieceNode;\n      piece.node.setParent(this.node);\n      this.node.addChild(piece.node);\n      piece.updatePosition();\n    }\n  }\n\n  consoleGrid() {\n    let emptyCounter = 0;\n    let row = [];\n    for (let i = 0; i < this.gridWidth; i++) {\n      let col = [];\n      for (let j = 0; j < this.gridHeight; j++) {\n        const currentPiece = this.grid[i][j];\n        col.push(currentPiece);\n\n        if (currentPiece.isEmpty) {\n          emptyCounter++;\n        }\n      }\n      row.push(col);\n    }\n    console.log(row);\n\n    // emptyCounter === 0\n    //   ? console.log(\"boş piece yok\")\n    //   : console.log(`boş piece sayısı : ${emptyCounter}`);\n  }\n}\n"]}