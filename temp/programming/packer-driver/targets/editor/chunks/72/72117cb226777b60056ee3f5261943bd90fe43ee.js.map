{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Serialization/BinarySerialization.ts"],"names":["BooleanSerializer","serialize","value","buffer","ArrayBuffer","DataView","setUint8","deserialize","getUint8","NumberSerializer","setFloat64","getFloat64","StringSerializer","encoder","TextEncoder","encoded","encode","byteLength","view","setUint32","Uint8Array","set","length","getUint32","decoder","TextDecoder","decode","ArraySerializer","constructor","itemSerializer","buffers","forEach","item","itemBuffer","lengthBuffer","push","totalLength","reduce","acc","buf","result","offset","slice","ObjectSerializer","schema","key","hasOwnProperty","keyBuffer","keyLengthBuffer","keyLength","serializer","valueBufferLength","valueBuffer","MapSerializer","keySerializer","valueSerializer","v","k","valueLengthBuffer","Map","valueLength","SetSerializer","Set","add","DateSerializer","getTime","Date","TypedArraySerializer","TypedArrayConstructor","byteOffset","TupleSerializer","serializers","map","index","EnumSerializer","enumValues","indexOf","Error","Serializers","boolean","number","string","array","object","date","typedArray","tuple","enum","createSchema","inferSchema","Array","isArray","serializeWithSchema","deserializeWithSchema","Schema","BinarySerialization"],"mappings":"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","sourcesContent":["export namespace BinarySerialization {\n    type Serializable = boolean | number | string | Serializable[] | { [key: string]: Serializable };\n\n    interface Serializer<T> {\n        serialize(value: T): ArrayBuffer;\n        deserialize(buffer: ArrayBuffer): T;\n    }\n\n    class BooleanSerializer implements Serializer<boolean> {\n        serialize(value: boolean): ArrayBuffer {\n            const buffer = new ArrayBuffer(1);\n            new DataView(buffer).setUint8(0, value ? 1 : 0);\n            return buffer;\n        }\n\n        deserialize(buffer: ArrayBuffer): boolean {\n            return new DataView(buffer).getUint8(0) === 1;\n        }\n    }\n\n    class NumberSerializer implements Serializer<number> {\n        serialize(value: number): ArrayBuffer {\n            const buffer = new ArrayBuffer(8);\n            new DataView(buffer).setFloat64(0, value);\n            return buffer;\n        }\n\n        deserialize(buffer: ArrayBuffer): number {\n            return new DataView(buffer).getFloat64(0);\n        }\n    }\n\n    class StringSerializer implements Serializer<string> {\n        serialize(value: string): ArrayBuffer {\n            const encoder = new TextEncoder();\n            const encoded = encoder.encode(value);\n            const buffer = new ArrayBuffer(encoded.byteLength + 4);\n            const view = new DataView(buffer);\n            view.setUint32(0, encoded.byteLength, true);\n            new Uint8Array(buffer, 4).set(encoded);\n            return buffer;\n        }\n\n        deserialize(buffer: ArrayBuffer): string {\n            const view = new DataView(buffer);\n            const length = view.getUint32(0, true);\n            const decoder = new TextDecoder();\n            return decoder.decode(new Uint8Array(buffer, 4, length));\n        }\n    }\n\n    class ArraySerializer<T> implements Serializer<T[]> {\n        constructor(private itemSerializer: Serializer<T>) { }\n\n        serialize(value: T[]): ArrayBuffer {\n            const buffers: ArrayBuffer[] = [];\n            value.forEach(item => {\n                const itemBuffer = this.itemSerializer.serialize(item);\n                const lengthBuffer = new ArrayBuffer(4);\n                new DataView(lengthBuffer).setUint32(0, itemBuffer.byteLength, true);\n                buffers.push(lengthBuffer);\n                buffers.push(itemBuffer);\n            });\n            const totalLength = buffers.reduce((acc, buf) => acc + buf.byteLength, 0);\n            const result = new Uint8Array(totalLength);\n            let offset = 0;\n            buffers.forEach(buf => {\n                result.set(new Uint8Array(buf), offset);\n                offset += buf.byteLength;\n            });\n            return result.buffer;\n        }\n\n        deserialize(buffer: ArrayBuffer): T[] {\n            const result: T[] = [];\n            let offset = 0;\n            while (offset < buffer.byteLength) {\n                const length = new DataView(buffer, offset, 4).getUint32(0, true);\n                offset += 4;\n                const itemBuffer = buffer.slice(offset, offset + length);\n                result.push(this.itemSerializer.deserialize(itemBuffer));\n                offset += length;\n            }\n            return result;\n        }\n    }\n\n    class ObjectSerializer<T extends { [key: string]: Serializable }> implements Serializer<T> {\n        constructor(private schema: { [K in keyof T]: Serializer<T[K]> }) { }\n\n        serialize(value: T): ArrayBuffer {\n            const buffers: ArrayBuffer[] = [];\n            for (const key in this.schema) {\n                if (value.hasOwnProperty(key)) {\n                    const keyBuffer = new TextEncoder().encode(key);\n                    const keyLengthBuffer = new ArrayBuffer(4);\n                    new DataView(keyLengthBuffer).setUint32(0, keyBuffer.length, true);\n                    buffers.push(keyLengthBuffer);\n                    buffers.push(keyBuffer.buffer);\n                    buffers.push(this.schema[key].serialize(value[key]));\n                }\n            }\n            const totalLength = buffers.reduce((acc, buf) => acc + buf.byteLength, 0);\n            const result = new Uint8Array(totalLength);\n            let offset = 0;\n            buffers.forEach(buf => {\n                result.set(new Uint8Array(buf), offset);\n                offset += buf.byteLength;\n            });\n            return result.buffer;\n        }\n\n        deserialize(buffer: ArrayBuffer): T {\n            const result = {} as T;\n            let offset = 0;\n            while (offset < buffer.byteLength) {\n                const keyLength = new DataView(buffer, offset, 4).getUint32(0, true);\n                offset += 4;\n                const key = new TextDecoder().decode(new Uint8Array(buffer, offset, keyLength));\n                offset += keyLength;\n                const serializer = this.schema[key];\n                const valueBufferLength = serializer instanceof BooleanSerializer ? 1 :\n                    serializer instanceof NumberSerializer ? 8 :\n                        serializer instanceof StringSerializer ? new DataView(buffer, offset, 4).getUint32(0, true) + 4 : 0;\n                const valueBuffer = buffer.slice(offset, offset + valueBufferLength);\n                const value = serializer.deserialize(valueBuffer);\n                result[key as keyof T] = value;\n                offset += valueBufferLength;\n            }\n            return result;\n        }\n    }\n\n    class MapSerializer<K extends Serializable, V extends Serializable> implements Serializer<Map<K, V>> {\n        constructor(private keySerializer: Serializer<K>, private valueSerializer: Serializer<V>) { }\n\n        serialize(value: Map<K, V>): ArrayBuffer {\n            const buffers: ArrayBuffer[] = [];\n            value.forEach((v, k) => {\n                const keyBuffer = this.keySerializer.serialize(k);\n                const keyLengthBuffer = new ArrayBuffer(4);\n                new DataView(keyLengthBuffer).setUint32(0, keyBuffer.byteLength, true);\n                buffers.push(keyLengthBuffer);\n                buffers.push(keyBuffer);\n                const valueBuffer = this.valueSerializer.serialize(v);\n                const valueLengthBuffer = new ArrayBuffer(4);\n                new DataView(valueLengthBuffer).setUint32(0, valueBuffer.byteLength, true);\n                buffers.push(valueLengthBuffer);\n                buffers.push(valueBuffer);\n            });\n            const totalLength = buffers.reduce((acc, buf) => acc + buf.byteLength, 0);\n            const result = new Uint8Array(totalLength);\n            let offset = 0;\n            buffers.forEach(buf => {\n                result.set(new Uint8Array(buf), offset);\n                offset += buf.byteLength;\n            });\n            return result.buffer;\n        }\n\n        deserialize(buffer: ArrayBuffer): Map<K, V> {\n            const result = new Map<K, V>();\n            let offset = 0;\n            while (offset < buffer.byteLength) {\n                const keyLength = new DataView(buffer, offset, 4).getUint32(0, true);\n                offset += 4;\n                const keyBuffer = buffer.slice(offset, offset + keyLength);\n                const key = this.keySerializer.deserialize(keyBuffer);\n                offset += keyLength;\n                const valueLength = new DataView(buffer, offset, 4).getUint32(0, true);\n                offset += 4;\n                const valueBuffer = buffer.slice(offset, offset + valueLength);\n                const value = this.valueSerializer.deserialize(valueBuffer);\n                offset += valueLength;\n                result.set(key, value);\n            }\n            return result;\n        }\n    }\n\n    class SetSerializer<T extends Serializable> implements Serializer<Set<T>> {\n        constructor(private itemSerializer: Serializer<T>) { }\n\n        serialize(value: Set<T>): ArrayBuffer {\n            const buffers: ArrayBuffer[] = [];\n            value.forEach(item => {\n                const itemBuffer = this.itemSerializer.serialize(item);\n                const lengthBuffer = new ArrayBuffer(4);\n                new DataView(lengthBuffer).setUint32(0, itemBuffer.byteLength, true);\n                buffers.push(lengthBuffer);\n                buffers.push(itemBuffer);\n            });\n            const totalLength = buffers.reduce((acc, buf) => acc + buf.byteLength, 0);\n            const result = new Uint8Array(totalLength);\n            let offset = 0;\n            buffers.forEach(buf => {\n                result.set(new Uint8Array(buf), offset);\n                offset += buf.byteLength;\n            });\n            return result.buffer;\n        }\n\n        deserialize(buffer: ArrayBuffer): Set<T> {\n            const result = new Set<T>();\n            let offset = 0;\n            while (offset < buffer.byteLength) {\n                const length = new DataView(buffer, offset, 4).getUint32(0, true);\n                offset += 4;\n                const itemBuffer = buffer.slice(offset, offset + length);\n                result.add(this.itemSerializer.deserialize(itemBuffer));\n                offset += length;\n            }\n            return result;\n        }\n    }\n\n    class DateSerializer implements Serializer<Date> {\n        serialize(value: Date): ArrayBuffer {\n            const buffer = new ArrayBuffer(8);\n            new DataView(buffer).setFloat64(0, value.getTime());\n            return buffer;\n        }\n\n        deserialize(buffer: ArrayBuffer): Date {\n            return new Date(new DataView(buffer).getFloat64(0));\n        }\n    }\n\n    class TypedArraySerializer<T extends ArrayBufferView> implements Serializer<T> {\n        constructor(private TypedArrayConstructor: new (buffer: ArrayBuffer) => T) { }\n\n        serialize(value: T): ArrayBuffer {\n            return value.buffer.slice(value.byteOffset, value.byteOffset + value.byteLength);\n        }\n\n        deserialize(buffer: ArrayBuffer): T {\n            return new this.TypedArrayConstructor(buffer);\n        }\n    }\n\n    class TupleSerializer<T extends Serializable[]> implements Serializer<T> {\n        constructor(private serializers: { [K in keyof T]: Serializer<T[K]> }) { }\n\n        serialize(value: T): ArrayBuffer {\n            const buffers: ArrayBuffer[] = value.map((item, index) => this.serializers[index].serialize(item));\n            const totalLength = buffers.reduce((acc, buf) => acc + buf.byteLength, 0);\n            const result = new Uint8Array(totalLength);\n            let offset = 0;\n            buffers.forEach(buf => {\n                result.set(new Uint8Array(buf), offset);\n                offset += buf.byteLength;\n            });\n            return result.buffer;\n        }\n\n        deserialize(buffer: ArrayBuffer): T {\n            const result = [] as unknown as T;\n            let offset = 0;\n            this.serializers.forEach((serializer, index) => {\n                const length = serializer instanceof BooleanSerializer ? 1 :\n                    serializer instanceof NumberSerializer ? 8 :\n                        serializer instanceof StringSerializer ? new DataView(buffer, offset, 4).getUint32(0, true) + 4 : 0;\n                const itemBuffer = buffer.slice(offset, offset + length);\n                result[index] = serializer.deserialize(itemBuffer);\n                offset += length;\n            });\n            return result;\n        }\n    }\n\n    class EnumSerializer<T extends Serializable> implements Serializer<T> {\n        constructor(private enumValues: T[]) { }\n\n        serialize(value: T): ArrayBuffer {\n            const index = this.enumValues.indexOf(value);\n            if (index === -1) {\n                throw new Error('Invalid enum value');\n            }\n            const buffer = new ArrayBuffer(4);\n            new DataView(buffer).setUint32(0, index, true);\n            return buffer;\n        }\n\n        deserialize(buffer: ArrayBuffer): T {\n            const index = new DataView(buffer).getUint32(0, true);\n            return this.enumValues[index];\n        }\n    }\n\n    export const Serializers = {\n        boolean: new BooleanSerializer(),\n        number: new NumberSerializer(),\n        string: new StringSerializer(),\n        array: <T>(itemSerializer: Serializer<T>) => new ArraySerializer<T>(itemSerializer),\n        object: <T extends { [key: string]: Serializable }>(schema: { [K in keyof T]: Serializer<T[K]> }) => new ObjectSerializer<T>(schema),\n        map: <K extends Serializable, V extends Serializable>(keySerializer: Serializer<K>, valueSerializer: Serializer<V>) => new MapSerializer<K, V>(keySerializer, valueSerializer),\n        set: <T extends Serializable>(itemSerializer: Serializer<T>) => new SetSerializer<T>(itemSerializer),\n        date: new DateSerializer(),\n        typedArray: <T extends ArrayBufferView>(TypedArrayConstructor: new (buffer: ArrayBuffer) => T) => new TypedArraySerializer<T>(TypedArrayConstructor),\n        tuple: <T extends Serializable[]>(...serializers: { [K in keyof T]: Serializer<T[K]> }) => new TupleSerializer<T>(serializers),\n        enum: <T extends Serializable>(enumValues: T[]) => new EnumSerializer<T>(enumValues)\n    };\n\n    function createSchema<T extends { [key: string]: Serializable }>(schema: { [K in keyof T]: Serializer<T[K]> }): Serializer<T> {\n        return new ObjectSerializer<T>(schema);\n    }\n\n    function inferSchema(value: any): Serializer<any> {\n        if (typeof value === 'boolean') return Serializers.boolean;\n        if (typeof value === 'number') return Serializers.number;\n        if (typeof value === 'string') return Serializers.string;\n        if (value instanceof Date) return Serializers.date;\n        if (Array.isArray(value)) return Serializers.array(inferSchema(value[0]));\n        if (value && typeof value === 'object') {\n            const schema: { [key: string]: Serializer<any> } = {};\n            for (const key in value) {\n                schema[key] = inferSchema(value[key]);\n            }\n            return new ObjectSerializer(schema);\n        }\n        throw new Error('Unsupported type');\n    }\n\n    function serializeWithSchema<T>(value: T): ArrayBuffer {\n        const schema = inferSchema(value);\n        return schema.serialize(value);\n    }\n\n    function deserializeWithSchema<T>(buffer: ArrayBuffer, value: T): T {\n        const schema = inferSchema(value);\n        return schema.deserialize(buffer);\n    }\n\n    export const Schema = {\n        createSchema,\n        inferSchema,\n        serializeWithSchema,\n        deserializeWithSchema\n    };\n}\n"]}