{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Optimization/Lazy.ts"],"names":["Lazy","constructor","factory","errorHandler","maxRetries","instance","isInitialized","retryCount","initializeHooks","errorHooks","disposeHooks","getValue","args","tryInitialize","triggerHooks","error","shouldRetry","hooks","forEach","hook","onInitialize","push","onError","onDispose","dispose"],"mappings":";;;iBA8BaA,I;;;;;;;;;;;;;AATb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;sBACaA,I,GAAN,MAAMA,IAAN,CAA0C;AAW7C;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,QAAAA,WAAW,CAACC,OAAD,EAAoCC,YAApC,EAAgEC,UAAkB,GAAG,CAArF,EAAwF;AAAA,eAjB3FC,QAiB2F,GAjBtE,IAiBsE;AAAA,eAhB3FH,OAgB2F;AAAA,eAf3FC,YAe2F;AAAA,eAd3FG,aAc2F,GAdlE,KAckE;AAAA,eAb3FC,UAa2F,GAbtE,CAasE;AAAA,eAZ3FH,UAY2F;AAAA,eAX3FI,eAW2F,GAXtD,EAWsD;AAAA,eAV3FC,UAU2F,GAVjD,EAUiD;AAAA,eAT3FC,YAS2F,GATzD,EASyD;AAC/F,eAAKR,OAAL,GAAeA,OAAf;AACA,eAAKC,YAAL,GAAoBA,YAApB;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACyB,cAARO,QAAQ,CAAC,GAAGC,IAAJ,EAA4B;AAC7C,cAAI,CAAC,KAAKN,aAAV,EAAyB;AACrB,kBAAM,KAAKO,aAAL,CAAmBD,IAAnB,CAAN;AACH;;AACD,iBAAO,KAAKP,QAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;;;AAC+B,cAAbQ,aAAa,CAACD,IAAD,EAA4B;AACnD,cAAI;AACA,iBAAKP,QAAL,GAAgB,MAAM,KAAKH,OAAL,CAAa,GAAGU,IAAhB,CAAtB;AACA,iBAAKN,aAAL,GAAqB,IAArB;AACA,iBAAKQ,YAAL,CAAkB,KAAKN,eAAvB;AACH,WAJD,CAIE,OAAOO,KAAP,EAAc;AACZ,iBAAKD,YAAL,CAAkB,KAAKL,UAAvB,EAAmCM,KAAnC;AACA,kBAAMC,WAAW,GAAG,MAAM,KAAKb,YAAL,CAAkBY,KAAlB,EAAyB,KAAKR,UAA9B,CAA1B;;AACA,gBAAIS,WAAW,IAAI,KAAKT,UAAL,GAAkB,KAAKH,UAA1C,EAAsD;AAClD,mBAAKG,UAAL;AACA,oBAAM,KAAKM,aAAL,CAAmBD,IAAnB,CAAN;AACH,aAHD,MAGO;AACH,oBAAMG,KAAN;AACH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACYD,QAAAA,YAAY,CAACG,KAAD,EAAyB,GAAGL,IAA5B,EAA+C;AAC/DK,UAAAA,KAAK,CAACC,OAAN,CAAcC,IAAI,IAAIA,IAAI,CAAC,GAAGP,IAAJ,CAA1B;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWQ,QAAAA,YAAY,CAACD,IAAD,EAAyB;AACxC,eAAKX,eAAL,CAAqBa,IAArB,CAA0BF,IAA1B;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWG,QAAAA,OAAO,CAACH,IAAD,EAAmC;AAC7C,eAAKV,UAAL,CAAgBY,IAAhB,CAAqBF,IAArB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWI,QAAAA,SAAS,CAACJ,IAAD,EAAyB;AACrC,eAAKT,YAAL,CAAkBW,IAAlB,CAAuBF,IAAvB;AACH;AAED;AACJ;AACA;AACA;;;AACWK,QAAAA,OAAO,GAAS;AACnB,cAAI,KAAKnB,QAAL,IAAiB,OAAQ,KAAKA,QAAN,CAAuBmB,OAA9B,KAA0C,UAA/D,EAA2E;AACtE,iBAAKnB,QAAN,CAAuBmB,OAAvB;AACH;;AACD,eAAKnB,QAAL,GAAgB,IAAhB;AACA,eAAKC,aAAL,GAAqB,KAArB;AACA,eAAKQ,YAAL,CAAkB,KAAKJ,YAAvB;AACH;;AA5G4C,O","sourcesContent":["/**\n * Defines a factory function that asynchronously creates an instance of type `T`\n * using the provided arguments `Args`.\n * \n * @typeParam T - The type of object that the factory function produces.\n * @typeParam Args - A tuple type representing the arguments passed to the factory function.\n * @param args - An array of arguments of type `Args` used for creating an instance of `T`.\n * @returns A promise that resolves to an instance of type `T`.\n */\ntype FactoryFunction<T, Args extends any[]> = (...args: Args) => Promise<T>;\n\n/**\n * Defines an error handling function that decides whether an operation should retry\n * after encountering an error based on the error itself and the current retry count.\n * \n * @param error - The error encountered during the operation.\n * @param retryCount - The current count of retry attempts.\n * @returns A promise that resolves to a boolean indicating whether to retry the operation.\n */\ntype ErrorHandler = (error: any, retryCount: number) => Promise<boolean>;\n\n/**\n * Represents a lazy initialization and caching mechanism for objects of type `T`.\n * The object is initialized asynchronously using a factory function upon the first\n * request. It supports retry logic, lifecycle hooks, and error handling.\n * \n * @typeParam T - The type of the lazily initialized object.\n * @typeParam Args - A tuple type representing the arguments passed to the factory \n * function for initializing the object.\n */\nexport class Lazy<T, Args extends any[] = any[]> {\n    private instance: T | null = null;\n    private factory: FactoryFunction<T, Args>;\n    private errorHandler: ErrorHandler;\n    private isInitialized: boolean = false;\n    private retryCount: number = 0;\n    private maxRetries: number;\n    private initializeHooks: Array<() => void> = [];\n    private errorHooks: Array<(error: any) => void> = [];\n    private disposeHooks: Array<() => void> = [];\n\n    /**\n     * Constructs a Lazy object with specified factory, error handler, and maximum retry attempts.\n     * \n     * @param factory - A factory function used to asynchronously create an instance of `T`.\n     * @param errorHandler - A function called when the factory function throws an error, determining whether to retry.\n     * @param maxRetries - The maximum number of retries for initializing `T` upon failure. Defaults to 3.\n     */\n    constructor(factory: FactoryFunction<T, Args>, errorHandler: ErrorHandler, maxRetries: number = 3) {\n        this.factory = factory;\n        this.errorHandler = errorHandler;\n        this.maxRetries = maxRetries;\n    }\n\n    /**\n     * Asynchronously returns the instance of type `T`, initializing it if not already done.\n     * \n     * @param args - Arguments to pass to the factory function for creating the instance.\n     * @returns A promise that resolves to the instance of type `T`.\n     * @throws Throws an error if the object cannot be initialized after the maximum number of retries.\n     */\n    public async getValue(...args: Args): Promise<T> {\n        if (!this.isInitialized) {\n            await this.tryInitialize(args);\n        }\n        return this.instance!;\n    }\n\n    /**\n     * Attempts to initialize the instance using the provided arguments, with retry logic.\n     * \n     * @param args - Arguments to pass to the factory function for creating the instance.\n     */\n    private async tryInitialize(args: Args): Promise<void> {\n        try {\n            this.instance = await this.factory(...args);\n            this.isInitialized = true;\n            this.triggerHooks(this.initializeHooks);\n        } catch (error) {\n            this.triggerHooks(this.errorHooks, error);\n            const shouldRetry = await this.errorHandler(error, this.retryCount);\n            if (shouldRetry && this.retryCount < this.maxRetries) {\n                this.retryCount++;\n                await this.tryInitialize(args);\n            } else {\n                throw error;\n            }\n        }\n    }\n\n    /**\n     * Invokes the provided lifecycle hooks with the specified arguments.\n     * \n     * @param hooks - An array of hooks to be triggered.\n     * @param args - Arguments to pass to each hook function.\n     */\n    private triggerHooks(hooks: Array<Function>, ...args: any[]): void {\n        hooks.forEach(hook => hook(...args));\n    }\n\n    /**\n     * Registers a hook to be called upon successful initialization of the instance.\n     * \n     * @param hook - The hook function to register.\n     */\n    public onInitialize(hook: () => void): void {\n        this.initializeHooks.push(hook);\n    }\n\n    /**\n     * Registers a hook to be called when an error occurs during initialization.\n     * \n     * @param hook - The hook function to register, receiving the error as an argument.\n     */\n    public onError(hook: (error: any) => void): void {\n        this.errorHooks.push(hook);\n    }\n\n    /**\n     * Registers a hook to be called when the instance is disposed.\n     * \n     * @param hook - The hook function to register.\n     */\n    public onDispose(hook: () => void): void {\n        this.disposeHooks.push(hook);\n    }\n\n    /**\n     * Disposes the current instance, if any, and triggers disposal hooks.\n     * Resets the instance state to allow re-initialization.\n     */\n    public dispose(): void {\n        if (this.instance && typeof (this.instance as any).dispose === 'function') {\n            (this.instance as any).dispose();\n        }\n        this.instance = null;\n        this.isInitialized = false;\n        this.triggerHooks(this.disposeHooks);\n    }\n}\n"]}