{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-2d/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","instantiate","Vec3","view","EasyLevels","InGameAssets","ccclass","property","GridGenerator","start","generate","levels","update","deltaTime","level","rows","cols","gridData","grid","tileSize","gridWidth","gridHeight","canvasSize","getVisibleSize","startX","width","startY","height","row","col","currentClass","assetType","AssetClass","get","length","randomIndex","Math","floor","random","randomAsset","newNode","node","addChild","position","getTilePosition","setPosition","active","x","y"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;;AAChDC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,Y,iBAAAA,Y;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;+BAGjBS,a,WADZF,OAAO,CAAC,eAAD,C,gBAAR,MACaE,aADb,SACmCR,SADnC,CAC6C;AAE3CS,QAAAA,KAAK,GAAG;AACN,eAAKC,QAAL,CAAc;AAAA;AAAA,wCAAWC,MAAX,CAAkB,CAAlB,CAAd,EADM,CAC+B;AACtC;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAAE;;AAE5BH,QAAAA,QAAQ,CAACI,KAAD,EAAmB;AACzB,gBAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,gBAAMC,IAAI,GAAGF,KAAK,CAACE,IAAnB;AACA,gBAAMC,QAAQ,GAAGH,KAAK,CAACI,IAAvB;AACA,gBAAMC,QAAQ,GAAG,GAAjB,CAJyB,CAIH;AAEtB;;AACA,gBAAMC,SAAS,GAAGJ,IAAI,GAAGG,QAAzB;AACA,gBAAME,UAAU,GAAGN,IAAI,GAAGI,QAA1B,CARyB,CAUzB;;AACA,gBAAMG,UAAU,GAAGnB,IAAI,CAACoB,cAAL,EAAnB;AACA,gBAAMC,MAAM,GAAG,CAACF,UAAU,CAACG,KAAX,GAAmBL,SAApB,IAAiC,CAAhD;AACA,gBAAMM,MAAM,GAAG,CAACJ,UAAU,CAACK,MAAX,GAAoBN,UAArB,IAAmC,CAAlD;;AAEA,eAAK,IAAIO,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGb,IAAxB,EAA8Ba,GAAG,EAAjC,EAAqC;AACnC,iBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGb,IAAxB,EAA8Ba,GAAG,EAAjC,EAAqC;AACnC,oBAAMC,YAAY,GAAGb,QAAQ,CAACW,GAAD,CAAR,CAAcC,GAAd,CAArB;AACA,oBAAME,SAAS,GAAG;AAAA;AAAA,gDAAaC,UAAb,CAAwBC,GAAxB,CAA4BH,YAA5B,CAAlB;;AAEA,kBAAIC,SAAS,IAAIA,SAAS,CAACG,MAAV,GAAmB,CAApC,EAAuC;AACrC,sBAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,SAAS,CAACG,MAArC,CAApB;AACA,sBAAMK,WAAW,GAAGR,SAAS,CAACI,WAAD,CAA7B;;AAEA,oBAAII,WAAJ,EAAiB;AACf,wBAAMC,OAAO,GAAGvC,WAAW,CAACsC,WAAD,CAA3B;AACA,uBAAKE,IAAL,CAAUC,QAAV,CAAmBF,OAAnB,EAFe,CAIf;;AACA,wBAAMG,QAAQ,GAAG,KAAKC,eAAL,CAAqBhB,GAArB,EAA0BC,GAA1B,EAA+BV,QAA/B,EAAyCK,MAAzC,EAAiDE,MAAjD,CAAjB;AACAc,kBAAAA,OAAO,CAACK,WAAR,CAAoBF,QAApB;AACAH,kBAAAA,OAAO,CAACM,MAAR,GAAiB,IAAjB;AACD;AACF;AACF;AACF;AACF,SA5C0C,CA8C3C;;;AACQF,QAAAA,eAAe,CAAChB,GAAD,EAAcC,GAAd,EAA2BV,QAA3B,EAA6CK,MAA7C,EAA6DE,MAA7D,EAAmF;AACxG,gBAAMqB,CAAC,GAAGvB,MAAM,GAAGK,GAAG,GAAGV,QAAf,GAA0BA,QAAQ,GAAG,CAA/C;AACA,gBAAM6B,CAAC,GAAGtB,MAAM,GAAGE,GAAG,GAAGT,QAAf,GAA0BA,QAAQ,GAAG,CAA/C;AACA,iBAAO,IAAIjB,IAAJ,CAAS6C,CAAT,EAAYC,CAAZ,EAAe,CAAf,CAAP;AACD;;AAnD0C,O","sourcesContent":["import { _decorator, Component, Node, instantiate, Vec3, view, UITransform } from \"cc\";\nimport { EasyLevels } from \"../Levels/EasyLevels\";\nimport { InGameAssets } from \"../InGameAssets\";\nimport { LevelData } from \"../Levels/LevelData\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridGenerator\")\nexport class GridGenerator extends Component {\n\n  start() {\n    this.generate(EasyLevels.levels[1]); // Örnek olarak 1. seviyeyi yüklüyoruz\n  }\n\n  update(deltaTime: number) {}\n\n  generate(level: LevelData) {\n    const rows = level.rows;\n    const cols = level.cols;\n    const gridData = level.grid;\n    const tileSize = 100; // Örnek tile boyutu\n\n    // Grid'in toplam boyutlarını hesapla\n    const gridWidth = cols * tileSize;\n    const gridHeight = rows * tileSize;\n\n    // Sahnenin ortasına yerleştirmek için pozisyonu hesapla\n    const canvasSize = view.getVisibleSize();\n    const startX = (canvasSize.width - gridWidth) / 2;\n    const startY = (canvasSize.height - gridHeight) / 2;\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const currentClass = gridData[row][col];\n        const assetType = InGameAssets.AssetClass.get(currentClass);\n        \n        if (assetType && assetType.length > 0) {\n          const randomIndex = Math.floor(Math.random() * assetType.length);\n          const randomAsset = assetType[randomIndex];\n\n          if (randomAsset) {\n            const newNode = instantiate(randomAsset);\n            this.node.addChild(newNode);\n\n            // Pozisyonu hesapla\n            const position = this.getTilePosition(row, col, tileSize, startX, startY);\n            newNode.setPosition(position);\n            newNode.active = true;\n          }\n        }\n      }\n    }\n  }\n\n  // Griddeki her bir tile'ın pozisyonunu hesaplar\n  private getTilePosition(row: number, col: number, tileSize: number, startX: number, startY: number): Vec3 {\n    const x = startX + col * tileSize + tileSize / 2;\n    const y = startY + row * tileSize + tileSize / 2;\n    return new Vec3(x, y, 0);\n  }\n}\n"]}