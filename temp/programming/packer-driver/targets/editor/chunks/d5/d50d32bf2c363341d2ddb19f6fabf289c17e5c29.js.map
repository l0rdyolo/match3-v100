{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Match/MatchChecker.ts"],"names":["MatchChecker","HorizontalMatchStrategy","VerticalMatchStrategy","constructor","matchStrategies","push","checkForMatches","pieceA","pieceB","grid","matchedPieces","strategy","matches","checkMatch","length","concat","checkForMatchesAfterGravity","matchesAfterGravity","row","col","piece","isEmpty","isMatched","console","log","Promise","all","map","matched"],"mappings":";;;8EAMaA,Y;;;;;;;;;;;;;;;;;;;;;;;;;;AALJC,MAAAA,uB,iBAAAA,uB;;AAEAC,MAAAA,qB,iBAAAA,qB;;;;;;;8BAGIF,Y,GAAN,MAAMA,YAAN,CAAmB;AAGtBG,QAAAA,WAAW,GAAG;AAAA,eAFNC,eAEM,GAF6B,EAE7B;AACV,eAAKA,eAAL,CAAqBC,IAArB,CAA0B;AAAA;AAAA,mEAA1B;AACA,eAAKD,eAAL,CAAqBC,IAArB,CAA0B;AAAA;AAAA,+DAA1B;AACH,SANqB,CAOtB;;;AAE4B,cAAfC,eAAe,CAACC,MAAD,EAAgBC,MAAhB,EAA+BC,IAA/B,EAAiE;AACzF,cAAIC,aAAsB,GAAG,EAA7B;;AAEA,eAAK,MAAMC,QAAX,IAAuB,KAAKP,eAA5B,EAA6C;AACzC,kBAAMQ,OAAO,GAAGD,QAAQ,CAACE,UAAT,CAAoBN,MAApB,EAA4BC,MAA5B,EAAqCC,IAArC,CAAhB;;AACA,gBAAIG,OAAO,CAACE,MAAR,IAAkB,CAAtB,EAAyB;AACrBJ,cAAAA,aAAa,GAAGA,aAAa,CAACK,MAAd,CAAqBH,OAArB,CAAhB;AACH;AACJ;;AACD,iBAAOF,aAAP;AACH;;AAEuC,cAA3BM,2BAA2B,CAACP,IAAD,EAAmC;AACvE,cAAIC,aAAsB,GAAG,EAA7B;AACA,cAAIO,mBAA8B,GAAG,EAArC;;AAEA,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGT,IAAI,CAACK,MAA7B,EAAqCI,GAAG,EAAxC,EAA4C;AACxC,iBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGV,IAAI,CAACS,GAAD,CAAJ,CAAUJ,MAAlC,EAA0CK,GAAG,EAA7C,EAAiD;AAC7C,oBAAMC,KAAK,GAAGX,IAAI,CAACS,GAAD,CAAJ,CAAUC,GAAV,CAAd;;AACA,kBAAI,CAACC,KAAK,CAACC,OAAP,IAAkB,CAACD,KAAK,CAACE,SAA7B,EAAwC;AACpCC,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAEA,qBAAK,MAAMb,QAAX,IAAuB,KAAKP,eAA5B,EAA6C;AACzC,wBAAMQ,OAAO,GAAGD,QAAQ,CAACE,UAAT,CAAoBO,KAApB,EAA2BA,KAA3B,EAAmCX,IAAnC,CAAhB;;AACA,sBAAIG,OAAO,CAACE,MAAR,IAAkB,CAAtB,EAAyB;AACrBJ,oBAAAA,aAAa,GAAGA,aAAa,CAACK,MAAd,CAAqBH,OAArB,CAAhB;AACAK,oBAAAA,mBAAmB,CAACZ,IAApB,CAAyBO,OAAzB;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,cAAIF,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,kBAAMW,OAAO,CAACC,GAAR,CAAYhB,aAAa,CAACiB,GAAd,CAAkBP,KAAK,IAAIA,KAAK,CAACQ,OAAN,EAA3B,CAAZ,CAAN;AACH;;AACDL,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCP,mBAAlC;AACA,iBAAOP,aAAP;AACH;;AA/CqB,O","sourcesContent":["import { Piece } from \"../Piece/Piece\";\r\nimport { HorizontalMatchStrategy } from \"./MatchStrategies/HorizontalMatchStrategy\";\r\nimport { MatchStrategy } from \"./MatchStrategies/IMatchStrategy\";\r\nimport { VerticalMatchStrategy } from \"./MatchStrategies/VerticalMatchStrategy\";\r\nimport { GridManager } from \"../Grid/GridManager\";\r\n\r\nexport class MatchChecker {\r\n    private matchStrategies: MatchStrategy[] = [];\r\n\r\n    constructor() {\r\n        this.matchStrategies.push(new HorizontalMatchStrategy());\r\n        this.matchStrategies.push(new VerticalMatchStrategy());\r\n    }\r\n    //! IDEA - 3 : stategyler birbirin tekralrayan kodlar içeriyor. düzenlenmeli\r\n\r\n    public async checkForMatches(pieceA: Piece, pieceB: Piece, grid:Piece[][]): Promise<Piece[]> {\r\n        let matchedPieces: Piece[] = [];\r\n        \r\n        for (const strategy of this.matchStrategies) {\r\n            const matches = strategy.checkMatch(pieceA, pieceB , grid);\r\n            if (matches.length >= 3) {\r\n                matchedPieces = matchedPieces.concat(matches);\r\n            }\r\n        }\r\n        return matchedPieces;\r\n    }\r\n\r\n    public async checkForMatchesAfterGravity(grid:Piece[][]): Promise<Piece[]> {\r\n        let matchedPieces: Piece[] = [];\r\n        let matchesAfterGravity: Piece[][] = [];\r\n\r\n        for (let row = 0; row < grid.length; row++) {\r\n            for (let col = 0; col < grid[row].length; col++) {\r\n                const piece = grid[row][col];\r\n                if (!piece.isEmpty && !piece.isMatched) {   \r\n                    console.log(\"allah\");\r\n                    \r\n                    for (const strategy of this.matchStrategies) {\r\n                        const matches = strategy.checkMatch(piece, piece , grid);\r\n                        if (matches.length >= 3) {\r\n                            matchedPieces = matchedPieces.concat(matches);\r\n                            matchesAfterGravity.push(matches);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (matchedPieces.length > 0) {\r\n            await Promise.all(matchedPieces.map(piece => piece.matched()));\r\n        }\r\n        console.log(\"matchesAfterGravity\",matchesAfterGravity);\r\n        return matchedPieces;\r\n    }\r\n\r\n}\r\n"]}