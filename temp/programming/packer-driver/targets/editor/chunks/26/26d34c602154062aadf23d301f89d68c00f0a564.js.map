{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","GridManager","ccclass","property","GravityHandler","applyGravity","matches","columnPieceCount","Map","col","piece","has","set","get","applyGravityToCol","emptySpaces","i","applyGravityForSingleColumn","grid","getInstance","colActivePieces","row","length","node","undefined","push","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AAEZC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;gCAGjBK,c,WADZF,OAAO,CAAC,gBAAD,C,UAGHC,QAAQ;AAAA;AAAA,qC,2BAHb,MACaC,cADb,SACoCJ,SADpC,CAC8C;AAAA;AAAA;;AAAA;AAAA;;AAK1CK,QAAAA,YAAY,CAACC,OAAD,EAAmB;AAC3B,gBAAMC,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB;AACA,cAAIC,GAAJ,CAF2B,CAG3B;;AACA,eAAK,MAAMC,KAAX,IAAoBJ,OAApB,EAA6B;AACzBG,YAAAA,GAAG,GAAGC,KAAK,CAACD,GAAZ;;AACA,gBAAIF,gBAAgB,CAACI,GAAjB,CAAqBF,GAArB,CAAJ,EAA+B;AAC3BF,cAAAA,gBAAgB,CAACK,GAAjB,CAAqBH,GAArB,EAA0BF,gBAAgB,CAACM,GAAjB,CAAqBJ,GAArB,IAA4B,CAAtD;AACH,aAFD,MAEO;AACHF,cAAAA,gBAAgB,CAACK,GAAjB,CAAqBH,GAArB,EAA0B,CAA1B;AACH;AACJ;;AAED,eAAKK,iBAAL,CAAuBL,GAAvB,EAA6BF,gBAA7B;AACH;;AAEDO,QAAAA,iBAAiB,CAACL,GAAD,EAAcF,gBAAd,EAAqD;AAClE,gBAAMQ,WAAW,GAAGR,gBAAgB,CAACM,GAAjB,CAAqBJ,GAArB,CAApB;;AACA,eAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAApB,EAAiCC,CAAC,EAAlC,EAAsC;AAClC,iBAAKC,2BAAL,CAAiCR,GAAjC,EAAsCM,WAAtC;AACH;AACJ;;AAEDE,QAAAA,2BAA2B,CAACR,GAAD,EAAcM,WAAd,EAAmC;AAC1D,gBAAMG,IAAI,GAAG;AAAA;AAAA,0CAAYC,WAAZ,GAA0BD,IAAvC;AACA,cAAIE,eAAe,GAAG,EAAtB;;AAEA,eAAK,IAAIC,GAAG,GAAGH,IAAI,CAACI,MAAL,GAAc,CAA7B,EAAgCD,GAAG,IAAI,CAAvC,EAA0CA,GAAG,EAA7C,EAAiD;AAC7C,kBAAMX,KAAK,GAAGQ,IAAI,CAACG,GAAD,CAAJ,CAAUZ,GAAV,CAAd;;AACA,gBAAIC,KAAK,CAACa,IAAN,KAAe,IAAf,IAAuBb,KAAK,KAAKc,SAArC,EAAgD;AAC5CJ,cAAAA,eAAe,CAACK,IAAhB,CAAqBf,KAArB;AACH;AAEJ;;AAEDgB,UAAAA,OAAO,CAACC,GAAR,CAAYP,eAAZ,EAZ0D,CAe1D;AACA;AACA;AACA;AACA;AACA;AACH;;AAjDyC,O;;;;;iBAGP,I","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nimport { Piece } from '../Piece/Piece';\nimport { GridManager } from '../Grid/GridManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GravityHandler')\nexport class GravityHandler extends Component {\n\n    @property(GridManager)\n    private gridManager: GridManager = null;\n\n    applyGravity(matches: Piece[]) {\n        const columnPieceCount = new Map<number, number>();\n        let col;\n        // Sütunlarda kaç adet boşluk oluştuğunu hesapla\n        for (const piece of matches) {\n            col = piece.col;\n            if (columnPieceCount.has(col)) {\n                columnPieceCount.set(col, columnPieceCount.get(col) + 1);\n            } else {\n                columnPieceCount.set(col, 1);\n            }\n        }\n\n        this.applyGravityToCol(col , columnPieceCount);\n    }\n\n    applyGravityToCol(col:number , columnPieceCount: Map<number, number>) {\n        const emptySpaces = columnPieceCount.get(col)\n        for (let i = 0; i < emptySpaces; i++) {\n            this.applyGravityForSingleColumn(col, emptySpaces);\n        }\n    }\n\n    applyGravityForSingleColumn(col: number, emptySpaces: number) {\n        const grid = GridManager.getInstance().grid;\n        let colActivePieces = [];\n\n        for (let row = grid.length - 1; row >= 0; row--) {\n            const piece = grid[row][col];\n            if (piece.node !== null && piece !== undefined) {\n                colActivePieces.push(piece);\n            }\n            \n        }\n\n        console.log(colActivePieces);\n        \n\n        // Yeni parçalara yer açılması için boş kalan üst alanları doldur\n        // for (let i = 0; i < emptySpaces; i++) {\n        //     const newPiece = this.gridManager.createPiece(0, col);\n        //     grid[i][col] = newPiece;\n        //     console.log(`New piece created at (row: ${i}, col: ${col})`);\n        // }\n    }\n}\n"]}