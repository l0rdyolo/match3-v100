{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","Vec3","ccclass","property","GravityHandler","onLoad","applyGravity","grid","moved","col","length","row","currentPiece","belowPiece","isEmpty","moveToPosition"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;;;;;;;;;OAG1B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;gCAGjBK,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCJ,SADpC,CAC8C;AAC5CK,QAAAA,MAAM,GAAG;AACP,gBAAMA,MAAN;AACD;;AAEiB,cAAZC,YAAY,CAACC,IAAD,EAAO;AACvB,cAAIC,KAAK,GAAG,KAAZ;;AAEA,aAAG;AACDA,YAAAA,KAAK,GAAG,KAAR;;AAEA,iBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQG,MAAhC,EAAwCD,GAAG,EAA3C,EAA+C;AAC7C,mBAAK,IAAIE,GAAG,GAAGJ,IAAI,CAACG,MAAL,GAAc,CAA7B,EAAgCC,GAAG,IAAI,CAAvC,EAA0CA,GAAG,EAA7C,EAAiD;AAAE;AACjD,sBAAMC,YAAY,GAAGL,IAAI,CAACI,GAAD,CAAJ,CAAUF,GAAV,CAArB;AACA,sBAAMI,UAAU,GAAGN,IAAI,CAACI,GAAG,GAAG,CAAP,CAAJ,CAAcF,GAAd,CAAnB;;AAEA,oBAAIG,YAAY,CAACE,OAAb,IAAwB,CAACD,UAAU,CAACC,OAAxC,EAAiD;AAAE;AACjD;AACAP,kBAAAA,IAAI,CAACI,GAAD,CAAJ,CAAUF,GAAV,IAAiBI,UAAjB;AACAN,kBAAAA,IAAI,CAACI,GAAG,GAAG,CAAP,CAAJ,CAAcF,GAAd,IAAqBG,YAArB,CAH+C,CAK/C;;AACAC,kBAAAA,UAAU,CAACJ,GAAX,GAAiBG,YAAY,CAACH,GAA9B;AACAI,kBAAAA,UAAU,CAACF,GAAX,GAAiBC,YAAY,CAACD,GAA9B,CAP+C,CAS/C;;AACA,wBAAME,UAAU,CAACE,cAAX,CAA0B,IAAId,IAAJ,CAASQ,GAAT,EAAcE,GAAd,EAAmB,CAAnB,CAA1B,CAAN;AACAH,kBAAAA,KAAK,GAAG,IAAR;AACD;AACF;AACF;AAEF,WAxBD,QAwBSA,KAxBT,EAHuB,CA2BN;;AAClB;;AAjC2C,O","sourcesContent":["import { _decorator, Component, Vec3 } from \"cc\";\nimport { SingletonComponent } from \"../SingletonComponent\";\nimport { GridManager } from \"./GridManager\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GravityHandler\")\nexport class GravityHandler extends Component {\n  onLoad() {\n    super.onLoad();\n  }\n\n  async applyGravity(grid) {\n    let moved = false;\n\n    do {\n      moved = false;\n\n      for (let col = 0; col < grid[0].length; col++) {\n        for (let row = grid.length - 2; row >= 0; row--) { // grid.length - 1'den başlıyoruz çünkü alttaki elemanı kontrol ediyoruz\n          const currentPiece = grid[row][col];\n          const belowPiece = grid[row + 1][col];\n\n          if (currentPiece.isEmpty && !belowPiece.isEmpty) { // Boş hücre ve dolu hücre kontrolü\n            // Parçaların yerlerini değiştir\n            grid[row][col] = belowPiece;\n            grid[row + 1][col] = currentPiece;\n\n            // Yeni satır ve sütunları güncelle\n            belowPiece.col = currentPiece.col;\n            belowPiece.row = currentPiece.row;\n\n            // Parçayı hareket ettir ve grid güncelle\n            await belowPiece.moveToPosition(new Vec3(col, row, 0));\n            moved = true;\n          }\n        }\n      }\n\n    } while (moved); // Tüm parçalar en alt seviyeye kadar hareket edene kadar devam et\n  }\n}\n"]}