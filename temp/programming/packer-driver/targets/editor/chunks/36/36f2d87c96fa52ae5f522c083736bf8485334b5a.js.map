{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/User/Singleton.ts"],"names":["createSingleton","Class","instance"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;iCACaA,e,GAA0DC,KAAxC,IAA4E;AACvG,YAAIC,QAAJ;AACA,eAAO,MAAuB;AAC1B,cAAI,CAACA,QAAL,EAAe;AACXA,YAAAA,QAAQ,GAAG,IAAID,KAAJ,EAAX;AACH;;AACD,iBAAOC,QAAP;AACH,SALD;AAMH,O","sourcesContent":["/**\n * `createSingleton` is a higher-order function that enforces a singleton pattern on a class.\n * Singleton pattern ensures that a class has only one instance and provides a global point \n * of access to it.\n *\n * @template T - The type variable that extends from a newable (class) type. \n * This means T should be a class (or a type that can be used with the `new` keyword).\n *\n * @param {T} Class - The class that needs to be enforced as a singleton.\n *\n * @returns {() => InstanceType<T>} - A function that when invoked, returns an instance of \n * the class.\n * If an instance of the class already exists, it returns the existing instance, otherwise \n * it creates a new instance.\n *\n * @example\n * class MyClass {}\n * const getMyClassInstance = createSingleton(MyClass);\n * const instance1 = getMyClassInstance();\n * const instance2 = getMyClassInstance();\n * console.log(instance1 === instance2); // true\n */\nexport const createSingleton = <T extends new (...args: any[]) => any>(Class: T): () => InstanceType<T> => {\n    let instance: InstanceType<T>;\n    return (): InstanceType<T> => {\n        if (!instance) {\n            instance = new Class();\n        }\n        return instance;\n    };\n};"]}