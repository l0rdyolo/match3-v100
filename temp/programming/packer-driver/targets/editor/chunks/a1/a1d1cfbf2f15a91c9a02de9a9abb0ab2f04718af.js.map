{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Node","Vec3","CCInteger","PiecesPool","EffectManager","InteractionManager","ccclass","property","GridGenerator","PIECE_CONTENT_SIZE","PIECE_OFFSET","interactionManager","start","node","setPosition","grid","generateGrid","row","GRID_ROW","piecesInRow","col","piece","piecesPool","getPieceFromPool","setParent","createsMatch","pieceLastPosition","getCenteredPosition","pieceFirstPosition","x","on","EventType","TOUCH_START","event","onPieceClicked","pieceProps","targetPosition","push","animateRowFall","name","returnPieceToPool","j","i","_j","_i"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, systemEvent, SystemEventType, EventTouch, Vec2, CCInteger } from 'cc';\nimport { PiecesPool } from '../Poolable/PiecesPool';\nimport { EffectManager } from '../Effects/EffectManager';\nimport { InteractionManager } from '../Interaction/InteractionManager';\nconst { ccclass, property } = _decorator;\n\ntype PieceProps = {\n    piece : Node,\n    targetPosition : Vec3\n}\n\n@ccclass('GridGenerator')\nexport class GridGenerator extends Component {\n    @property(PiecesPool)\n    private piecesPool: PiecesPool = null;\n   \n    private PIECE_CONTENT_SIZE: number = 100; //dinamikleştir\n    private PIECE_OFFSET : number = 10;\n    \n    @property(CCInteger)\n    GRID_ROW: number = 0;\n\n    private interactionManager : InteractionManager = new InteractionManager();\n\n\n    protected start(): void {\n        //!TODO: grid yerleşmesini ve content size'ı responsive yapmalıyız\n        this.node.setPosition(-450,-450);\n        \n        const grid = this.generateGrid();\n    }\n\n    private async generateGrid() {\n        const grid: Node[][] = [];\n        for (let row = 0; row < this.GRID_ROW; row++) {\n            grid[row] = [];\n            const piecesInRow: PieceProps[] = [];\n            for (let col = 0; col < this.GRID_ROW; col++) {\n\n                //başlangıçta match olmama durumlarını kontrol ediyoruz\n                let piece: Node;\n                do {\n                    piece = this.piecesPool.getPieceFromPool();\n                    piece.setParent(this.node);\n                } while (this.createsMatch(piece, row, col, grid));\n\n                //tween animasyonu için başlangıç ve bitiş pozisyonu belirliyoruz\n                const pieceLastPosition = this.getCenteredPosition(col, row)\n                const pieceFirstPosition = new Vec3(pieceLastPosition.x, this.GRID_ROW * this.PIECE_CONTENT_SIZE)\n                piece.setPosition(pieceFirstPosition);\n\n                //piecelere event listener ekliyoruz\n                // piece.on(Node.EventType.TOUCH_START, this.onPieceClicked, this);\n                piece.on(Node.EventType.TOUCH_START, (event: EventTouch) => {\n                    this.interactionManager.onPieceClicked(event, piece);\n                });\n                grid[row][col] = piece;\n\n                \n                const pieceProps : PieceProps = {\n                    piece : piece,\n                    targetPosition : pieceLastPosition\n                }\n                piecesInRow.push(pieceProps);\n\n                //tek tek düşmeleri\n                // await EffectManager.fallPieceToGridPosition(piece , pieceLastPosition , 0.05 ,  10)\n            }\n            await EffectManager.animateRowFall(piecesInRow , 0.1)\n        }\n    }\n\n    private createsMatch(piece: Node, row: number, col: number, grid: Node[][]): boolean {\n        if (row >= 2 &&\n            grid[row - 1][col]?.name === piece.name &&\n            grid[row - 2][col]?.name === piece.name) {\n                this.piecesPool.returnPieceToPool(piece);\n            return true;\n        }\n\n        if (col >= 2 &&\n            grid[row][col - 1]?.name === piece.name &&\n            grid[row][col - 2]?.name === piece.name) {\n                this.piecesPool.returnPieceToPool(piece);\n            return true;\n        }\n\n        return false;\n    }\n\n\n    private getCenteredPosition(j : number, i:number ) : Vec3{\n      //EVERY game board should be square matrix\n      const _j = (j * this.PIECE_CONTENT_SIZE)  //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) )\n      const _i = (i * this.PIECE_CONTENT_SIZE)  //- ((this.PIECE_CONTENT_SIZE * 4.5))//(Math.round(this.GRID_ROW / 2))) ) \n      return new Vec3(_j + this.PIECE_OFFSET,_i + this.PIECE_OFFSET)\n    }\n}\n"]}