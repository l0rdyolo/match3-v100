{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Vec3","SingletonComponent","GridGenerator","ccclass","property","GridManager","grid","gridGenerator","gridWidth","gridOffset","onLoad","start","node","getComponent","Generate","width","PIECE_OFFSET","offsetDiff","piecePositionsDiff","console","log","gridX","setPosition","SwapPieces","pieceA","pieceB","tempPiece","row","col"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAmCC,MAAAA,I,OAAAA,I;;AACnCC,MAAAA,kB,iBAAAA,kB;;AAEAC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;6BAGjBM,W,WADZF,OAAO,CAAC,aAAD,C,gBAAR,MACaE,WADb;AAAA;AAAA,oDACiE;AAAA;AAAA;AAAA,eACxDC,IADwD;AAAA,eAGvDC,aAHuD,GAGxB,IAHwB;AAAA,eAKvDC,SALuD,GAKnC,CALmC;AAAA,eAMvDC,UANuD,GAMlC,CANkC;AAAA;;AAQrDC,QAAAA,MAAM,GAAS;AACvB,gBAAMA,MAAN;AACD;;AAEDC,QAAAA,KAAK,GAAG;AACN,eAAKJ,aAAL,GAAqB,KAAKK,IAAL,CAAUC,YAAV;AAAA;AAAA,6CAArB;AACA,eAAKP,IAAL,GAAY,KAAKC,aAAL,CAAmBO,QAAnB,EAAZ;AACA,eAAKN,SAAL,GAAiB,KAAKD,aAAL,CAAmBQ,KAApC;AACA,eAAKN,UAAL,GAAkB,KAAKF,aAAL,CAAmBS,YAArC,CAJM,CAKN;;AACA,gBAAMC,UAAU,GAAI,KAAKR,UAAL,GAAkB,CAAnB,GAAwB,KAAKD,SAAhD;AACA,gBAAMU,kBAAkB,GAAG,EAAE,KAAKV,SAAL,GAAiB,CAAnB,IAAwB,GAAnD;AACAW,UAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ,EAAwBC,kBAAxB;AAEA,gBAAMG,KAAK,GAAGH,kBAAkB,GAAGD,UAAnC;AACA,eAAKL,IAAL,CAAUU,WAAV,CAAsB,IAAItB,IAAJ,CAASqB,KAAT,EAAgB,CAAC,GAAjB,EAAsB,CAAtB,CAAtB;AACD;;AAEDE,QAAAA,UAAU,CAACC,MAAD,EAAkBC,MAAlB,EAA+B;AACvC,gBAAMC,SAAS,GAAGF,MAAlB;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAYI,MAAM,CAACG,GAAnB,EAAwBH,MAAM,CAACI,GAA/B;AACAT,UAAAA,OAAO,CAACC,GAAR,CAAYK,MAAM,CAACE,GAAnB,EAAwBF,MAAM,CAACG,GAA/B;AAGD;;AAhC8D,O","sourcesContent":["import { _decorator, Component, Node, Vec2, Vec3 } from 'cc';\nimport { SingletonComponent } from '../SingletonComponent';\nimport { Piece } from '../Piece/Piece';\nimport { GridGenerator } from './GridGenerator';\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridManager\")\nexport class GridManager extends SingletonComponent<GridManager> {\n  public grid: Piece[][];\n\n  private gridGenerator: GridGenerator = null;\n\n  private gridWidth: number = 0;\n  private gridOffset: number = 0;\n\n  protected onLoad(): void {\n    super.onLoad();\n  }\n\n  start() {\n    this.gridGenerator = this.node.getComponent(GridGenerator);\n    this.grid = this.gridGenerator.Generate();\n    this.gridWidth = this.gridGenerator.width;\n    this.gridOffset = this.gridGenerator.PIECE_OFFSET;\n    //! dinamik olmalÄ±\n    const offsetDiff = (this.gridOffset / 2) * this.gridWidth;\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\n    console.log(offsetDiff, piecePositionsDiff);\n\n    const gridX = piecePositionsDiff + offsetDiff;\n    this.node.setPosition(new Vec3(gridX, -200, 0));\n  }\n\n  SwapPieces(pieceA : Piece , pieceB:Piece){\n    const tempPiece = pieceA;\n    console.log(pieceA.row ,pieceA.col);\n    console.log(pieceB.row ,pieceB.col);\n\n    \n  }\n}\n\n"]}