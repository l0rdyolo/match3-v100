{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GridManager.ts"],"names":["_decorator","Color","Sprite","Vec3","SingletonComponent","GridGenerator","GameGlobal","SliderManager","MatchChecker","GravityHandler","PiecePool","ccclass","property","GridManager","_grid","gridGenerator","sliderManager","matchChecker","gravityHandler","gridWidth","gridHeight","gridOffset","colors","red","black","blue","yellow","grid","onLoad","init","highlightGridCorners","node","getComponentInChildren","color","start","getComponent","Generate","length","offsetDiff","PIECE_OFFSET","piecePositionsDiff","gridX","setPosition","SwapPieces","pieceA","pieceB","Slide","pa_row","row","pa_col","col","pb_row","pb_col","tempA","tempB","deleteMatches","matches","fillPromises","matchedPiece","delete","push","Promise","resolve","all","handleSelection","checkForMatches","console","log","applyGravity","fillEmptySpaces","piece","isEmpty","newPieceNode","getInstance","getPiece","setParent","addChild","ResetScale","updatePosition","consoleGrid","emptyCounter","i","j","currentPiece","logMatchesByGroups","groupedMatches","visited","Set","has","group","add","otherPiece","arePiecesConnected","forEach","index","map","p","name","piece1","piece2","rowDiff","Math","abs","colDiff"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,I,OAAAA,I;;AAC3BC,MAAAA,kB,iBAAAA,kB;;AAEAC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,c,iBAAAA,c;;AACAC,MAAAA,S,iBAAAA,S;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBZ,U;;6BAGjBa,W,WADZF,OAAO,CAAC,aAAD,C,gBAAR,MACaE,WADb;AAAA;AAAA,oDACiE;AAAA;AAAA;AAAA,eACvDC,KADuD;AAAA,eAGvDC,aAHuD,GAGxB,IAHwB;AAAA,eAIvDC,aAJuD,GAIxB,IAJwB;AAAA,eAKvDC,YALuD,GAK1B,IAL0B;AAAA,eAMvDC,cANuD,GAMtB,IANsB;AAAA,eAQvDC,SARuD,GAQnC,CARmC;AAAA,eASxDC,UATwD,GASnC,CATmC;AAAA,eAUvDC,UAVuD,GAUlC,CAVkC;AAAA,eAYvDC,MAZuD,GAY9C;AACfC,YAAAA,GAAG,EAAE,IAAItB,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkB,CAAlB,CADU;AAEfuB,YAAAA,KAAK,EAAE,IAAIvB,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAFQ;AAGfwB,YAAAA,IAAI,EAAE,IAAIxB,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,GAAhB,CAHS;AAIfyB,YAAAA,MAAM,EAAE,IAAIzB,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,CAApB;AAJO,WAZ8C;AAAA;;AAmBvD,YAAJ0B,IAAI,GAAG;AACT,iBAAO,KAAKb,KAAZ;AACD;;AAESc,QAAAA,MAAM,GAAS;AACvB,gBAAMA,MAAN;AACA,eAAKC,IAAL;AACD;;AAESA,QAAAA,IAAI,GAAS;AACrB,eAAKb,aAAL,GAAqB;AAAA;AAAA,+CAArB;AACA,eAAKC,YAAL,GAAoB;AAAA;AAAA,6CAApB;AACA,eAAKC,cAAL,GAAsB;AAAA;AAAA,iDAAtB;AACD;;AAEDY,QAAAA,oBAAoB,GAAG;AACrB,eAAKhB,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiBiB,IAAjB,CAAsBC,sBAAtB,CAA6C9B,MAA7C,EAAqD+B,KAArD,GACE,KAAKX,MAAL,CAAYE,KADd;AAEA,eAAKV,KAAL,CAAW,KAAKM,UAAL,GAAkB,CAA7B,EAAgC,CAAhC,EAAmCW,IAAnC,CAAwCC,sBAAxC,CACE9B,MADF,EAEE+B,KAFF,GAEU,KAAKX,MAAL,CAAYI,MAFtB;AAGA,eAAKZ,KAAL,CAAW,CAAX,EAAc,KAAKK,SAAL,GAAiB,CAA/B,EAAkCY,IAAlC,CAAuCC,sBAAvC,CACE9B,MADF,EAEE+B,KAFF,GAEU,KAAKX,MAAL,CAAYG,IAFtB;AAGA,eAAKX,KAAL,CAAW,KAAKM,UAAL,GAAkB,CAA7B,EACE,KAAKD,SAAL,GAAiB,CADnB,EAEEY,IAFF,CAEOC,sBAFP,CAE8B9B,MAF9B,EAEsC+B,KAFtC,GAE8C,KAAKX,MAAL,CAAYC,GAF1D;AAGD;;AAEDW,QAAAA,KAAK,GAAG;AACN,eAAKnB,aAAL,GAAqB,KAAKgB,IAAL,CAAUI,YAAV;AAAA;AAAA,6CAArB;AACA,eAAKrB,KAAL,GAAa,KAAKC,aAAL,CAAmBqB,QAAnB,EAAb;AACA,eAAKjB,SAAL,GAAiB,KAAKL,KAAL,CAAW,CAAX,EAAcuB,MAA/B;AACA,eAAKjB,UAAL,GAAkB,KAAKN,KAAL,CAAWuB,MAA7B;AAEA,gBAAMC,UAAU,GAAI;AAAA;AAAA,wCAAWC,YAAX,GAA0B,CAA3B,GAAgC,KAAKpB,SAAxD;AACA,gBAAMqB,kBAAkB,GAAG,EAAE,KAAKrB,SAAL,GAAiB,CAAnB,IAAwB,GAAnD;AAEA,gBAAMsB,KAAK,GAAGD,kBAAkB,GAAGF,UAAnC;AACA,eAAKP,IAAL,CAAUW,WAAV,CAAsB,IAAIvC,IAAJ,CAASsC,KAAT,EAAgB,CAAC,GAAjB,EAAsB,CAAtB,CAAtB,EAVM,CAWN;AACD;;AAEe,cAAVE,UAAU,CAACC,MAAD,EAAgBC,MAAhB,EAA+B;AAC7C,gBAAM,KAAK7B,aAAL,CAAmB8B,KAAnB,CAAyBF,MAAzB,EAAiCC,MAAjC,CAAN;AAEA,gBAAME,MAAM,GAAGH,MAAM,CAACI,GAAtB;AACA,gBAAMC,MAAM,GAAGL,MAAM,CAACM,GAAtB;AAEA,gBAAMC,MAAM,GAAGN,MAAM,CAACG,GAAtB;AACA,gBAAMI,MAAM,GAAGP,MAAM,CAACK,GAAtB;AAEAN,UAAAA,MAAM,CAACI,GAAP,GAAaG,MAAb;AACAP,UAAAA,MAAM,CAACM,GAAP,GAAaE,MAAb;AAEAP,UAAAA,MAAM,CAACG,GAAP,GAAaD,MAAb;AACAF,UAAAA,MAAM,CAACK,GAAP,GAAaD,MAAb;AAEA,gBAAMI,KAAK,GAAG,KAAK1B,IAAL,CAAUoB,MAAV,EAAkBE,MAAlB,CAAd;AACA,gBAAMK,KAAK,GAAG,KAAK3B,IAAL,CAAUwB,MAAV,EAAkBC,MAAlB,CAAd;AAEA,eAAKzB,IAAL,CAAUoB,MAAV,EAAkBE,MAAlB,IAA4BK,KAA5B;AACA,eAAK3B,IAAL,CAAUwB,MAAV,EAAkBC,MAAlB,IAA4BC,KAA5B;AACD;;AAEkB,cAAbE,aAAa,CAACC,OAAD,EAAmB;AACpC,gBAAMC,YAA6B,GAAG,EAAtC;;AAEA,eAAK,MAAMC,YAAX,IAA2BF,OAA3B,EAAoC;AAClCE,YAAAA,YAAY,CAACC,MAAb;AACAF,YAAAA,YAAY,CAACG,IAAb,CACE,IAAIC,OAAJ,CAAmBC,OAAD,IAAa;AAC7BA,cAAAA,OAAO;AACR,aAFD,CADF;AAKD;;AACD,gBAAMD,OAAO,CAACE,GAAR,CAAYN,YAAZ,CAAN;AACD;;AACoB,cAAfO,eAAe,CAACpB,MAAD,EAAgBC,MAAhB,EAA+B;AAClD,gBAAM,KAAKF,UAAL,CAAgBC,MAAhB,EAAwBC,MAAxB,CAAN;AACA,cAAIW,OAAgB,GAAG,MAAM,KAAKvC,YAAL,CAAkBgD,eAAlB,CAC3BrB,MAD2B,EAE3BC,MAF2B,EAG3B,KAAKlB,IAHsB,CAA7B;AAKAuC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AAEA,cAAIX,OAAO,CAACnB,MAAR,GAAiB,CAArB,EAAwB;AACtB,kBAAM,KAAKkB,aAAL,CAAmBC,OAAnB,CAAN;AACA,kBAAM,KAAKtC,cAAL,CAAoBkD,YAApB,CAAiC,KAAKzC,IAAtC,CAAN,CAFsB,CAGtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,WAbD,MAaO;AACL,kBAAM,KAAKgB,UAAL,CAAgBC,MAAhB,EAAwBC,MAAxB,CAAN;AACD;AACF;;AAE4B,cAAfwB,eAAe,GAAG;AAC9B,gBAAM1C,IAAI,GAAG,KAAKA,IAAlB;AACA,gBAAM8B,YAA6B,GAAG,EAAtC;;AAEA,eAAK,IAAIT,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAK5B,UAA7B,EAAyC4B,GAAG,EAA5C,EAAgD;AAC9C,iBAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAK/B,SAA7B,EAAwC+B,GAAG,EAA3C,EAA+C;AAC7C,oBAAMoB,KAAK,GAAG3C,IAAI,CAACqB,GAAD,CAAJ,CAAUE,GAAV,CAAd;;AAEA,kBAAIoB,KAAK,CAACC,OAAV,EAAmB;AACjB,sBAAMC,YAAY,GAAG;AAAA;AAAA,4CAAUC,WAAV,GAAwBC,QAAxB,EAArB;AACAF,gBAAAA,YAAY,CAACG,SAAb,CAAuB,KAAK5C,IAA5B;AACA,qBAAKA,IAAL,CAAU6C,QAAV,CAAmBJ,YAAnB;AACAA,gBAAAA,YAAY,CAACxC,sBAAb,CAAoC9B,MAApC,EAA4C+B,KAA5C,GACE,KAAKX,MAAL,CAAYI,MADd;AAGA4C,gBAAAA,KAAK,CAACvC,IAAN,GAAayC,YAAb;AACAF,gBAAAA,KAAK,CAACO,UAAN;AACAP,gBAAAA,KAAK,CAACQ,cAAN,CAAqB9B,GAArB,EAA0BE,GAA1B;AAEAO,gBAAAA,YAAY,CAACG,IAAb,CACE,IAAIC,OAAJ,CAAmBC,OAAD,IAAa;AAC7BA,kBAAAA,OAAO;AACR,iBAFD,CADF;AAKD;AACF;AACF;;AAED,gBAAMD,OAAO,CAACE,GAAR,CAAYN,YAAZ,CAAN;AACAS,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;;AAEDY,QAAAA,WAAW,GAAG;AACZ,cAAIC,YAAY,GAAG,CAAnB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK9D,SAAzB,EAAoC8D,CAAC,EAArC,EAAyC;AACvC,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK9D,UAAzB,EAAqC8D,CAAC,EAAtC,EAA0C;AACxC,oBAAMC,YAAY,GAAG,KAAKxD,IAAL,CAAUsD,CAAV,EAAaC,CAAb,CAArB;;AACA,kBAAIC,YAAY,CAACZ,OAAjB,EAA0B;AACxBL,gBAAAA,OAAO,CAACC,GAAR,CAAYgB,YAAZ;AACAH,gBAAAA,YAAY;AACb;AACF;AACF;;AAEDA,UAAAA,YAAY,KAAK,CAAjB,GACId,OAAO,CAACC,GAAR,CAAY,eAAZ,CADJ,GAEID,OAAO,CAACC,GAAR,CAAa,sBAAqBa,YAAa,EAA/C,CAFJ;AAGD,SA3K8D,CA6K/D;;;AACQI,QAAAA,kBAAkB,CAAC5B,OAAD,EAAmB;AAC3C;AACA,gBAAM6B,cAAyB,GAAG,EAAlC;AACA,gBAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;;AAEA,eAAK,MAAMjB,KAAX,IAAoBd,OAApB,EAA6B;AAC3B,gBAAI8B,OAAO,CAACE,GAAR,CAAYlB,KAAZ,CAAJ,EAAwB,SADG,CACO;AAElC;;AACA,kBAAMmB,KAAc,GAAG,CAACnB,KAAD,CAAvB;AACAgB,YAAAA,OAAO,CAACI,GAAR,CAAYpB,KAAZ,EAL2B,CAO3B;;AACA,iBAAK,MAAMqB,UAAX,IAAyBnC,OAAzB,EAAkC;AAChC,kBACE,CAAC8B,OAAO,CAACE,GAAR,CAAYG,UAAZ,CAAD,IACA,KAAKC,kBAAL,CAAwBtB,KAAxB,EAA+BqB,UAA/B,CAFF,EAGE;AACAF,gBAAAA,KAAK,CAAC7B,IAAN,CAAW+B,UAAX;AACAL,gBAAAA,OAAO,CAACI,GAAR,CAAYC,UAAZ;AACD;AACF;;AAEDN,YAAAA,cAAc,CAACzB,IAAf,CAAoB6B,KAApB;AACD,WAxB0C,CA0B3C;;;AACAJ,UAAAA,cAAc,CAACQ,OAAf,CAAuB,CAACJ,KAAD,EAAQK,KAAR,KAAkB;AACvC5B,YAAAA,OAAO,CAACC,GAAR,CACG,QAAO2B,KAAK,GAAG,CAAE,GADpB,EAEEL,KAAK,CAACM,GAAN,CAAWC,CAAD,IAAOA,CAAC,CAACjE,IAAF,CAAOkE,IAAxB,CAFF;AAID,WALD;AAMD;;AACOL,QAAAA,kBAAkB,CAACM,MAAD,EAAgBC,MAAhB,EAAwC;AAChE;AACA,gBAAMC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASJ,MAAM,CAAClD,GAAP,GAAamD,MAAM,CAACnD,GAA7B,CAAhB;AACA,gBAAMuD,OAAO,GAAGF,IAAI,CAACC,GAAL,CAASJ,MAAM,CAAChD,GAAP,GAAaiD,MAAM,CAACjD,GAA7B,CAAhB;AACA,iBAAQkD,OAAO,KAAK,CAAZ,IAAiBG,OAAO,KAAK,CAA9B,IAAqCH,OAAO,KAAK,CAAZ,IAAiBG,OAAO,KAAK,CAAzE;AACD;;AArN8D,O","sourcesContent":["import { _decorator, Color, Sprite, Vec3 } from \"cc\";\nimport { SingletonComponent } from \"../SingletonComponent\";\nimport { Piece } from \"../Piece/Piece\";\nimport { GridGenerator } from \"./GridGenerator\";\nimport { GameGlobal } from \"../Game/GameGlobal\";\nimport { SliderManager } from \"../Interaction/SliderManager\";\nimport { MatchChecker } from \"../Match/MatchChecker\";\nimport { GravityHandler } from \"./GravityHandler\";\nimport { PiecePool } from \"../Piece/PiecePool\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridManager\")\nexport class GridManager extends SingletonComponent<GridManager> {\n  private _grid: Piece[][];\n\n  private gridGenerator: GridGenerator = null;\n  private sliderManager: SliderManager = null;\n  private matchChecker: MatchChecker = null;\n  private gravityHandler: GravityHandler = null;\n\n  private gridWidth: number = 0;\n  public gridHeight: number = 0;\n  private gridOffset: number = 0;\n\n  private colors = {\n    red: new Color(255, 0, 0),\n    black: new Color(0, 0, 0),\n    blue: new Color(0, 0, 255),\n    yellow: new Color(255, 255, 0),\n  };\n\n  get grid() {\n    return this._grid;\n  }\n\n  protected onLoad(): void {\n    super.onLoad();\n    this.init();\n  }\n\n  protected init(): void {\n    this.sliderManager = new SliderManager();\n    this.matchChecker = new MatchChecker();\n    this.gravityHandler = new GravityHandler();\n  }\n\n  highlightGridCorners() {\n    this._grid[0][0].node.getComponentInChildren(Sprite).color =\n      this.colors.black;\n    this._grid[this.gridHeight - 1][0].node.getComponentInChildren(\n      Sprite\n    ).color = this.colors.yellow;\n    this._grid[0][this.gridWidth - 1].node.getComponentInChildren(\n      Sprite\n    ).color = this.colors.blue;\n    this._grid[this.gridHeight - 1][\n      this.gridWidth - 1\n    ].node.getComponentInChildren(Sprite).color = this.colors.red;\n  }\n\n  start() {\n    this.gridGenerator = this.node.getComponent(GridGenerator);\n    this._grid = this.gridGenerator.Generate();\n    this.gridWidth = this._grid[0].length;\n    this.gridHeight = this._grid.length;\n\n    const offsetDiff = (GameGlobal.PIECE_OFFSET / 2) * this.gridWidth;\n    const piecePositionsDiff = -(this.gridWidth / 2) * 100;\n\n    const gridX = piecePositionsDiff + offsetDiff;\n    this.node.setPosition(new Vec3(gridX, -200, 0));\n    // this.highlightGridCorners();\n  }\n\n  async SwapPieces(pieceA: Piece, pieceB: Piece) {\n    await this.sliderManager.Slide(pieceA, pieceB);\n    \n    const pa_row = pieceA.row;\n    const pa_col = pieceA.col;\n\n    const pb_row = pieceB.row;\n    const pb_col = pieceB.col;\n\n    pieceA.row = pb_row;\n    pieceA.col = pb_col;\n\n    pieceB.row = pa_row;\n    pieceB.col = pa_col;\n\n    const tempA = this.grid[pa_row][pa_col];\n    const tempB = this.grid[pb_row][pb_col];\n\n    this.grid[pa_row][pa_col] = tempB;\n    this.grid[pb_row][pb_col] = tempA;\n  }\n\n  async deleteMatches(matches: Piece[]) {\n    const fillPromises: Promise<void>[] = [];\n\n    for (const matchedPiece of matches) {\n      matchedPiece.delete();\n      fillPromises.push(\n        new Promise<void>((resolve) => {\n          resolve();\n        })\n      );\n    }\n    await Promise.all(fillPromises);\n  }\n  async handleSelection(pieceA: Piece, pieceB: Piece) {\n    await this.SwapPieces(pieceA, pieceB);\n    let matches: Piece[] = await this.matchChecker.checkForMatches(\n      pieceA,\n      pieceB,\n      this.grid\n    );\n    console.log(\"matchchecker\");\n    \n    if (matches.length > 0) {\n      await this.deleteMatches(matches);\n      await this.gravityHandler.applyGravity(this.grid);\n      // await this.fillEmptySpaces();\n\n      // const newMatches = await this.matchChecker.checkForMatchesAfterGravity(\n      //   this.grid\n      // );\n      // if (newMatches.length > 0) {\n      //   this.logMatchesByGroups(newMatches);\n      // } else {\n      //   console.log(\"Yeni eşleşme yok.\");\n      // }\n    } else {\n      await this.SwapPieces(pieceA, pieceB);\n    }\n  }\n\n  private async fillEmptySpaces() {\n    const grid = this.grid;\n    const fillPromises: Promise<void>[] = [];\n\n    for (let row = 0; row < this.gridHeight; row++) {\n      for (let col = 0; col < this.gridWidth; col++) {\n        const piece = grid[row][col];\n\n        if (piece.isEmpty) {\n          const newPieceNode = PiecePool.getInstance().getPiece();\n          newPieceNode.setParent(this.node);\n          this.node.addChild(newPieceNode);\n          newPieceNode.getComponentInChildren(Sprite).color =\n            this.colors.yellow;\n\n          piece.node = newPieceNode;\n          piece.ResetScale();\n          piece.updatePosition(row, col);\n\n          fillPromises.push(\n            new Promise<void>((resolve) => {\n              resolve();\n            })\n          );\n        }\n      }\n    }\n\n    await Promise.all(fillPromises);\n    console.log(\"empty cells filled\");\n  }\n\n  consoleGrid() {\n    let emptyCounter = 0;\n    for (let i = 0; i < this.gridWidth; i++) {\n      for (let j = 0; j < this.gridHeight; j++) {\n        const currentPiece = this.grid[i][j];\n        if (currentPiece.isEmpty) {\n          console.log(currentPiece);\n          emptyCounter++;\n        }\n      }\n    }\n\n    emptyCounter === 0\n      ? console.log(\"boş piece yok\")\n      : console.log(`boş piece sayısı : ${emptyCounter}`);\n  }\n\n  // Eşleşen parçaları gruplar halinde konsola yazdırmak için bir yardımcı fonksiyon\n  private logMatchesByGroups(matches: Piece[]) {\n    // Eşleşen parçaları gruplayarak bir diziye dönüştür\n    const groupedMatches: Piece[][] = [];\n    const visited = new Set<Piece>();\n\n    for (const piece of matches) {\n      if (visited.has(piece)) continue; // Daha önce ziyaret edilenleri atla\n\n      // Yeni bir grup oluştur\n      const group: Piece[] = [piece];\n      visited.add(piece);\n\n      // Bu parça ile aynı olan diğer parçaları bul\n      for (const otherPiece of matches) {\n        if (\n          !visited.has(otherPiece) &&\n          this.arePiecesConnected(piece, otherPiece)\n        ) {\n          group.push(otherPiece);\n          visited.add(otherPiece);\n        }\n      }\n\n      groupedMatches.push(group);\n    }\n\n    // Grupları konsola yazdır\n    groupedMatches.forEach((group, index) => {\n      console.log(\n        `Grup ${index + 1}:`,\n        group.map((p) => p.node.name)\n      );\n    });\n  }\n  private arePiecesConnected(piece1: Piece, piece2: Piece): boolean {\n    // Örneğin, burada basit bir mesafe kontrolü yapıyoruz\n    const rowDiff = Math.abs(piece1.row - piece2.row);\n    const colDiff = Math.abs(piece1.col - piece2.col);\n    return (rowDiff === 1 && colDiff === 0) || (rowDiff === 0 && colDiff === 1);\n  }\n}\n"]}