{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Match/MatchStrategies/VerticalMatchStrategy.ts"],"names":["VerticalMatchStrategy","GridManager","directions","dx","dy","checkMatch","pieceA","pieceB","console","log","grid","getInstance","firstCheck","checkSinglePieceMatch","secondCheck","piece","matchedPieces","row","col","direction","currentRow","currentCol","length","currentPiece","node","name","push"],"mappings":";;;2CAIaA,qB;;;;;;;;;;;;;;;;;;;;;;AAJJC,MAAAA,W,iBAAAA,W;;;;;;;uCAIID,qB,GAAN,MAAMA,qBAAN,CAAqD;AAAA;AAAA,eACjDE,UADiD,GACpC,CAChB;AAAEC,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,EAAE,EAAE;AAAb,WADgB,EACE;AAClB;AAAED,YAAAA,EAAE,EAAE,CAAC,CAAP;AAAUC,YAAAA,EAAE,EAAE;AAAd,WAFgB,CAEE;AAFF,WADoC;AAAA;;AAMjDC,QAAAA,UAAU,CAACC,MAAD,EAAiBC,MAAjB,EAAoC;AACjDC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAEA,gBAAMC,IAAI,GAAG;AAAA;AAAA,0CAAYC,WAAZ,GAA0BD,IAAvC;AACA,gBAAME,UAAU,GAAG,KAAKC,qBAAL,CAA2BP,MAA3B,EAAoCI,IAApC,CAAnB;AACA,cAAII,WAAW,GAAG,KAAKD,qBAAL,CAA2BN,MAA3B,EAAoCG,IAApC,CAAlB,CALiD,CAMjD;;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ,EAAwBE,WAAxB;AACA,iBAAOA,WAAP;AAAmB;AACtB;;AAEMD,QAAAA,qBAAqB,CAACE,KAAD,EAAeL,IAAf,EAA+B;AACvD,gBAAMM,aAAsB,GAAG,EAA/B;AACA,gBAAM;AAAEC,YAAAA,GAAF;AAAOC,YAAAA;AAAP,cAAeH,KAArB;;AAEA,eAAK,MAAMI,SAAX,IAAwB,KAAKjB,UAA7B,EAAyC;AACrC,gBAAIkB,UAAU,GAAGH,GAAG,GAAGE,SAAS,CAAChB,EAAjC;AACA,gBAAIkB,UAAU,GAAGH,GAAjB;;AAEA,mBAAOE,UAAU,IAAI,CAAd,IAAmBA,UAAU,GAAGV,IAAI,CAACY,MAA5C,EAAoD;AAChD,oBAAMC,YAAY,GAAGb,IAAI,CAACU,UAAD,CAAJ,CAAiBC,UAAjB,CAArB;;AACA,kBAAIE,YAAY,IAAIA,YAAY,CAACC,IAAb,CAAkBC,IAAlB,KAA2BV,KAAK,CAACS,IAAN,CAAWC,IAA1D,EAAgE;AAC5DT,gBAAAA,aAAa,CAACU,IAAd,CAAmBH,YAAnB;AACH,eAFD,MAEO;AACH;AACH;;AACDH,cAAAA,UAAU,IAAID,SAAS,CAAChB,EAAxB;AACH;AACJ;;AAED,cAAIa,aAAa,CAACM,MAAd,IAAwB,CAA5B,EAA+B;AAC3BN,YAAAA,aAAa,CAACU,IAAd,CAAmBX,KAAnB;AACH;;AAED,iBAAOC,aAAP;AACH;;AAzCuD,O","sourcesContent":["import { GridManager } from \"../../Grid/GridManager\";\nimport { Piece } from \"../../Piece/Piece\";\nimport { MatchStrategy } from \"./IMatchStrategy\";\n\nexport class VerticalMatchStrategy implements MatchStrategy {\n    public directions = [\n        { dx: 1, dy: 0 }, // Down\n        { dx: -1, dy: 0 } // Up\n    ];\n\n    public checkMatch(pieceA: Piece , pieceB : Piece  )  {\n        console.log(\"vertical matc\");\n        \n        const grid = GridManager.getInstance().grid;\n        const firstCheck = this.checkSinglePieceMatch(pieceA , grid);\n        let secondCheck = this.checkSinglePieceMatch(pieceB , grid)\n        // secondCheck = secondCheck.concat(firstCheck)\n        console.log(firstCheck, secondCheck);\n        return secondCheck;;\n    }\n\n    public checkSinglePieceMatch(piece: Piece, grid: Piece[][]){\n        const matchedPieces: Piece[] = [];\n        const { row, col } = piece;\n\n        for (const direction of this.directions) {\n            let currentRow = row + direction.dx;\n            let currentCol = col;\n\n            while (currentRow >= 0 && currentRow < grid.length) {\n                const currentPiece = grid[currentRow][currentCol];\n                if (currentPiece && currentPiece.node.name === piece.node.name) {\n                    matchedPieces.push(currentPiece);\n                } else {\n                    break;\n                }\n                currentRow += direction.dx;\n            }\n        }\n\n        if (matchedPieces.length >= 2) {\n            matchedPieces.push(piece);\n        }\n\n        return matchedPieces;\n    }\n}"]}