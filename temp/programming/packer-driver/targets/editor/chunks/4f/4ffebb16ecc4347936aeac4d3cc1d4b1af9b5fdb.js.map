{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Util/Comparer.ts"],"names":["FpCompare","NumberComparer","StringComparer","CustomComparer","DateComparer","ObjectPropertyComparer","ComparerFactory","EquatableBase","areEqual","a","b","equals","areArraysEqual","length","i","deepEqual","keysA","Object","keys","keysB","key","hasOwnProperty","hashCode","obj","str","JSON","stringify","hash","char","charCodeAt","constructor","epsilon","Number","EPSILON","absThreshold","Math","min","abs","MIN_VALUE","RangeError","nearlyEqual","absDiff","norm","MAX_VALUE","max","absolutelyEqual","compare","getEpsilon","getAbsThreshold","ascending","caseSensitive","localeCompare","toLowerCase","compareFunction","getTime","property","createComparer","type","customComparer","comparerConstructor","comparerMap","get","Error","registerComparer","set","Map","fromJSON","json","ctor","assign","parse"],"mappings":"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","sourcesContent":["export class FpCompare {\n    private readonly epsilon: number;\n    private readonly absThreshold: number;\n\n    /**\n     * Creates a new FpCompare instance with the specified epsilon and absolute\n     * threshold.\n     *\n     * @param epsilon The maximum allowed relative difference for considering\n     * numbers equal.\n     * @param absThreshold The minimum absolute difference for considering very\n     * small numbers equal.\n     */\n    constructor(epsilon: number = Number.EPSILON,\n        absThreshold: number = Math.min(Math.abs(Number.MIN_VALUE), epsilon)\n    ) {\n        if (epsilon <= 0 || epsilon >= 1) {\n            throw new RangeError(\"Epsilon must be between 0 and 1 (exclusive)\");\n        }\n        if (absThreshold <= 0) {\n            throw new RangeError(\"absThreshold must be positive\");\n        }\n        this.epsilon = epsilon;\n        this.absThreshold = absThreshold;\n    }\n\n    /**\n     * Compares two floating-point numbers for near equality using relative\n     * comparison.\n     *\n     * @param a The first number.\n     * @param b The second number.\n     * @returns True if the absolute difference between a and b is less than\n     * epsilon times their combined magnitude, false otherwise.\n     */\n    public nearlyEqual(a: number, b: number): boolean {\n        const absDiff = Math.abs(a - b);\n        const norm = Math.min(Math.abs(a) + Math.abs(b), Number.MAX_VALUE);\n        return absDiff < Math.max(this.absThreshold, this.epsilon * norm);\n    }\n\n    /**\n     * Compares two floating-point numbers for near equality using absolute\n     * comparison. This is useful for very small numbers where relative comparison\n     * might be unreliable.\n     *\n     * @param a The first number.\n     * @param b The second number.\n     * @returns True if the absolute difference between a and b is less than the\n     * absThreshold, false otherwise.\n     */\n    public absolutelyEqual(a: number, b: number): boolean {\n        return Math.abs(a - b) <= this.absThreshold;\n    }\n\n    /**\n     * Compares two floating-point numbers for order with epsilon tolerance.\n     * \n     * @param a The first number.\n     * @param b The second number.\n     * @returns \n     *  - 0 if a is equal to b within epsilon.\n     *  - -1 if a is less than b within epsilon.\n     *  - 1 if a is greater than b within epsilon.\n     */\n    public compare(a: number, b: number): number {\n        const absDiff = Math.abs(a - b);\n        if (absDiff < this.epsilon * Math.min(Math.abs(a) + Math.abs(b), Number.MAX_VALUE)) {\n            return 0;\n        } else if (a < b) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    /**\n     * Returns the epsilon value used for comparisons.\n     * \n     * @returns The epsilon value.\n     */\n    public getEpsilon(): number {\n        return this.epsilon;\n    }\n\n    /**\n     * Returns the absolute threshold value used for comparisons.\n     * \n     * @returns The absolute threshold value.\n     */\n    public getAbsThreshold(): number {\n        return this.absThreshold;\n    }\n}\n\n/**\n * Defines a generic comparer interface for comparing two values.\n * @template T - The type of the values to be compared.\n */\nexport interface Comparer<T> {\n    /**\n     * Compares two values.\n     * @param a - The first value.\n     * @param b - The second value.\n     * @returns A negative number if a < b, zero if a = b, a positive number if a > b.\n     */\n    compare(a: T, b: T): number;\n}\n\n/**\n * Compares two numbers in either ascending or descending order.\n */\nexport class NumberComparer implements Comparer<number> {\n    /**\n     * @param ascending - Determines the sort order. True for ascending, false for descending.\n     */\n    constructor(private ascending: boolean = true) { }\n\n    /**\n     * Compares two numbers.\n     * @param a - The first number.\n     * @param b - The second number.\n     * @returns The difference between the two numbers based on the sort order.\n     */\n    compare(a: number, b: number): number {\n        return this.ascending ? a - b : b - a;\n    }\n}\n\n/**\n * Compares two strings with optional case sensitivity.\n */\nexport class StringComparer implements Comparer<string> {\n    /**\n     * @param caseSensitive - Determines if the comparison is case-sensitive.\n     */\n    constructor(private caseSensitive: boolean = true) { }\n\n    /**\n     * Compares two strings.\n     * @param a - The first string.\n     * @param b - The second string.\n     * @returns A negative number if a < b, zero if a = b, a positive number if a > b.\n     */\n    compare(a: string, b: string): number {\n        if (this.caseSensitive) {\n            return a.localeCompare(b);\n        } else {\n            return a.toLowerCase().localeCompare(b.toLowerCase());\n        }\n    }\n}\n\n/**\n * Compares two values using a custom comparison function.\n * @template T - The type of the values to be compared.\n */\nexport class CustomComparer<T> implements Comparer<T> {\n    /**\n     * @param compareFunction - The custom comparison function.\n     */\n    constructor(private compareFunction: (a: T, b: T) => number) { }\n\n    /**\n     * Compares two values using the custom comparison function.\n     * @param a - The first value.\n     * @param b - The second value.\n     * @returns The result of the custom comparison function.\n     */\n    compare(a: T, b: T): number {\n        return this.compareFunction(a, b);\n    }\n}\n\n/**\n * Compares two Date objects.\n */\nexport class DateComparer implements Comparer<Date> {\n    /**\n     * Compares two dates.\n     * @param a - The first date.\n     * @param b - The second date.\n     * @returns The difference in time between the two dates.\n     */\n    compare(a: Date, b: Date): number {\n        return a.getTime() - b.getTime();\n    }\n}\n\n/**\n * Compares two objects based on a specified property.\n * @template T - The type of the objects to be compared.\n */\nexport class ObjectPropertyComparer<T> implements Comparer<T> {\n    /**\n     * @param property - The property of the objects to compare.\n     */\n    constructor(private property: keyof T) { }\n\n    /**\n     * Compares two objects based on the specified property.\n     * @param a - The first object.\n     * @param b - The second object.\n     * @returns A negative number if a[property] < b[property], zero if a[property] = b[property], \n     * a positive number if a[property] > b[property].\n     */\n    compare(a: T, b: T): number {\n        if (a[this.property] < b[this.property]) {\n            return -1;\n        } else if (a[this.property] > b[this.property]) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n\n/**\n * Type definition for a constructor of a Comparer.\n * @template T - The type of the values to be compared.\n */\ntype ComparerConstructor<T> = new () => Comparer<T>;\n\n\n/**\n * Factory class to create comparer instances based on type.\n */\nexport class ComparerFactory {\n    private static comparerMap = new Map<string, ComparerConstructor<any>>([\n        ['number', NumberComparer],\n        ['string', StringComparer],\n        ['date', DateComparer]\n    ]);\n\n    /**\n     * Creates a comparer instance for the specified type or a custom comparer.\n     * @template T - The type of the values to be compared.\n     * @param type - The type of comparer to create.\n     * @param customComparer - Optional custom comparison function.\n     * @returns The comparer instance.\n     * @throws If no comparer is found for the specified type.\n     */\n    static createComparer<T>(type: string, customComparer?: (a: T, b: T) => number): Comparer<T> {\n        if (customComparer) {\n            return new CustomComparer<T>(customComparer);\n        }\n\n        const comparerConstructor = this.comparerMap.get(type);\n        if (!comparerConstructor) {\n            throw new Error(`No comparer found for type: ${type}`);\n        }\n\n        return new comparerConstructor();\n    }\n\n    /**\n     * Registers a new comparer type with its constructor.\n     * @template T - The type of the values to be compared.\n     * @param type - The type key for the comparer.\n     * @param comparerConstructor - The constructor of the comparer.\n     */\n    static registerComparer<T>(type: string, comparerConstructor: ComparerConstructor<T>): void {\n        this.comparerMap.set(type, comparerConstructor);\n    }\n}\n\n/**\n * Interface for objects that can be compared for equality.\n * @template T - The type of the object to be compared.\n */\nexport interface IEquatable<T> {\n    /**\n     * Checks if the current object is equal to another object.\n     * @param other - The object to compare with.\n     * @returns True if the objects are equal, otherwise false.\n     */\n    equals(other: T): boolean;\n}\n\n/**\n * Base class for equatable objects, providing utility methods for comparison.\n * @template T - The type of the object to be compared.\n */\nexport abstract class EquatableBase<T> implements IEquatable<T> {\n    abstract equals(other: T): boolean;\n\n    /**\n     * Compares two equatable objects for equality.\n     * @template T - The type of the objects to be compared.\n     * @param a - The first object.\n     * @param b - The second object.\n     * @returns True if the objects are equal, otherwise false.\n     */\n    static areEqual<T extends IEquatable<T>>(a: T, b: T): boolean {\n        if (a === b) return true;\n        if (a === null || b === null) return false;\n        return a.equals(b);\n    }\n\n    /**\n     * Compares two arrays of equatable objects for equality.\n     * @template T - The type of the objects to be compared.\n     * @param a - The first array.\n     * @param b - The second array.\n     * @returns True if the arrays are equal, otherwise false.\n     */\n    static areArraysEqual<T extends IEquatable<T>>(a: T[], b: T[]): boolean {\n        if (a.length !== b.length) return false;\n        for (let i = 0; i < a.length; i++) {\n            if (!a[i].equals(b[i])) return false;\n        }\n        return true;\n    }\n\n    /**\n     * Performs a deep equality check on two objects.\n     * @template T - The type of the objects to be compared.\n     * @param a - The first object.\n     * @param b - The second object.\n     * @returns True if the objects are deeply equal, otherwise false.\n     */\n    static deepEqual<T>(a: T, b: T): boolean {\n        if (a === b) return true;\n        if (typeof a !== 'object' || typeof b !== 'object') return false;\n        if (a === null || b === null) return false;\n\n        const keysA = Object.keys(a);\n        const keysB = Object.keys(b);\n        if (keysA.length !== keysB.length) return false;\n\n        for (const key of keysA) {\n            if (!b.hasOwnProperty(key)) return false;\n            if (!EquatableBase.deepEqual(a[key], b[key])) return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Creates an instance of an equatable object from a JSON string.\n     * @template T - The type of the object to be created.\n     * @param json - The JSON string.\n     * @param ctor - The constructor of the object.\n     * @returns The created object.\n     */\n    static fromJSON<T extends EquatableBase<T>>(json: string, ctor: new () => T): T {\n        const obj = new ctor();\n        Object.assign(obj, JSON.parse(json));\n        return obj;\n    }\n\n    /**\n     * Generates a hash code for an object.\n     * @template T - The type of the object.\n     * @param obj - The object.\n     * @returns The hash code.\n     */\n    static hashCode<T>(obj: T): number {\n        const str = JSON.stringify(obj);\n        let hash = 0;\n        if (str.length === 0) return hash;\n        for (let i = 0; i < str.length; i++) {\n            const char = str.charCodeAt(i);\n            hash = (hash << 5) - hash + char;\n            hash |= 0;\n        }\n        return hash;\n    }\n}\n\n/**\n * Utility function to compare two equatable objects.\n * @template T - The type of the objects to be compared.\n * @param a - The first object.\n * @param b - The second object.\n * @returns True if the objects are equal, otherwise false.\n */\nexport function areEqual<T extends IEquatable<T>>(a: T, b: T): boolean {\n    if (a === b) return true;\n    if (a === null || b === null) return false;\n    return a.equals(b);\n}\n\n/**\n * Utility function to compare two arrays of equatable objects.\n * @template T - The type of the objects to be compared.\n * @param a - The first array.\n * @param b - The second array.\n * @returns True if the arrays are equal, otherwise false.\n */\nexport function areArraysEqual<T extends IEquatable<T>>(a: T[], b: T[]): boolean {\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; i++) {\n        if (!a[i].equals(b[i])) return false;\n    }\n    return true;\n}\n\n/**\n * Utility function to perform a deep equality check on two objects.\n * @template T - The type of the objects to be compared.\n * @param a - The first object.\n * @param b - The second object.\n * @returns True if the objects are deeply equal, otherwise false.\n */\nexport function deepEqual<T>(a: T, b: T): boolean {\n    if (a === b) return true;\n    if (typeof a !== 'object' || typeof b !== 'object') return false;\n    if (a === null || b === null) return false;\n\n    const keysA = Object.keys(a);\n    const keysB = Object.keys(b);\n    if (keysA.length !== keysB.length) return false;\n\n    for (const key of keysA) {\n        if (!b.hasOwnProperty(key)) return false;\n        if (!deepEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n}\n\n/**\n * Generates a hash code for an object.\n * @template T - The type of the object.\n * @param obj - The object.\n * @returns The hash code.\n */\nexport function hashCode<T>(obj: T): number {\n    const str = JSON.stringify(obj);\n    let hash = 0;\n    if (str.length === 0) return hash;\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash |= 0;\n    }\n    return hash;\n}\n"]}