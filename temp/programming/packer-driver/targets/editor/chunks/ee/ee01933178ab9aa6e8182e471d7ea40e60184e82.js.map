{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","EffectManager","ccclass","Direction","MatchChecker","dx","dy","CheckSwapedPieces","pieceA","samePieceCount","checkSurroundings","grid","row","col","isWithinBounds","length","SwapPiecePositions","pieceB","posA","posB","movePiece"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;AACAC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA;AAAF,O,GAAcF,U;;iBAEfG,S;AAAAA,QAAAA,S,CAAAA,S;AAAAA,QAAAA,S,CAAAA,S;SAAAA,S,KAAAA,S;;8BAMQC,Y,WADZF,OAAO,CAAC,cAAD,C,gBAAR,MACaE,YADb,CAC0B;AAAA;AAAA,eAGhBC,EAHgB,GAGD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,CAAX,CAHC;AAAA,eAIhBC,EAJgB,GAID,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,EAAW,CAAX,CAJC;AAAA;;AAMO,eAAjBC,iBAAiB,CAACC,MAAD,EAAe;AAC5C;AACA;AACA,cAAIC,cAAc,GAAG,CAArB;AACD;;AAE8B,eAAjBC,iBAAiB,CAC7BC,IAD6B,EAE7BC,GAF6B,EAG7BC,GAH6B,EAIvB,CACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAE4B,eAAdC,cAAc,CAC3BH,IAD2B,EAE3BC,GAF2B,EAG3BC,GAH2B,EAIlB;AACT,iBAAOD,GAAG,IAAI,CAAP,IAAYA,GAAG,GAAGD,IAAI,CAACI,MAAvB,IAAiCF,GAAG,IAAI,CAAxC,IAA6CA,GAAG,GAAGF,IAAI,CAACC,GAAD,CAAJ,CAAUG,MAApE;AACD;;AAEqC,qBAAlBC,kBAAkB,CACpCR,MADoC,EAEpCS,MAFoC,EAGpCC,IAHoC,EAIpCC,IAJoC,EAKpC;AACA;AAAA;AAAA,8CAAcC,SAAd,CAAwBZ,MAAxB,EAAgCW,IAAhC,EAAsC,GAAtC;AACA;AAAA;AAAA,8CAAcC,SAAd,CAAwBH,MAAxB,EAAgCC,IAAhC,EAAsC,GAAtC;AAEA,eAAKX,iBAAL,CAAuBC,MAAvB;AACA,eAAKD,iBAAL,CAAuBU,MAAvB;AACD;;AA9CuB,O","sourcesContent":["import { _decorator, buildShadowPass, Node, Vec2, Vec3 } from \"cc\";\nimport { EffectManager } from \"../Effects/EffectManager\";\nconst { ccclass } = _decorator;\n\nenum Direction {\n  Horizontal,\n  Vertical,\n}\n\n@ccclass(\"MatchChecker\")\nexport class MatchChecker {\n\n\n  private dx: number[] = [0, 0, 1, -1];\n  private dy: number[] = [1, -1, 0, 0];\n\n  public static CheckSwapedPieces(pieceA: Node) {\n    // this.checkSurroundings(pieceA)\n    // this.checkSurroundings(pieceB)\n    let samePieceCount = 1;\n  }\n\n  public static checkSurroundings(\n    grid: Node[][],\n    row: number,\n    col: number\n  ): void {\n    // for (const direction of this.directions) {\n    //   const newRow = row + direction.dx;\n    //   const newCol = col + direction.dy;\n    //   if (this.isWithinBounds(grid, newRow, newCol)) {\n    //     const neighbor = grid[newRow][newCol];\n    //     console.log(`Checking piece at [${newRow}, ${newCol}]`);\n    //   }\n    // }\n  }\n\n  private static isWithinBounds(\n    grid: Node[][],\n    row: number,\n    col: number\n  ): boolean {\n    return row >= 0 && row < grid.length && col >= 0 && col < grid[row].length;\n  }\n\n  public static async SwapPiecePositions(\n    pieceA: Node,\n    pieceB: Node,\n    posA: Vec3,\n    posB: Vec3\n  ) {\n    EffectManager.movePiece(pieceA, posB, 0.1);\n    EffectManager.movePiece(pieceB, posA, 0.1);\n\n    this.CheckSwapedPieces(pieceA);\n    this.CheckSwapedPieces(pieceB);\n  }\n}\n"]}