{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/DetectorAPI/DeviceDetector.ts"],"names":["DeviceDetector","BrowserDetector","DeviceUtils","OSDetector","PlatformDetector","VersionDetector","constructor","userAgent","detect","gatherDeviceInfo","navigator","vendor","window","opera","detectors","key","detector","staticInfoKeys","method","detectedInfo","reduce","info","staticInfo"],"mappings":";;;2GAUaA,c;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAVJC,MAAAA,e,iBAAAA,e;;AAEAC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,gB,iBAAAA,gB;;AACAC,MAAAA,e,iBAAAA,e;;;;;;;AAET;AACA;AACA;gCACaL,c,GAAN,MAAMA,cAAN,CAAqB;AACxB;AACJ;AACA;;AAGI;AACJ;AACA;AACIM,QAAAA,WAAW,GAAG;AAAA,eALNC,SAKM;;AAAA,eA8CPC,MA9CO,GA8C6B,YAAY,MAAM,KAAKC,gBAAL,EA9C/C;;AACV,eAAKF,SAAL,GAAiBG,SAAS,CAACH,SAAV,IAAuBG,SAAS,CAACC,MAAjC,IAA4CC,MAAD,CAAgBC,KAA5E;AACH;AAED;AACJ;AACA;AACA;;;AACkC,cAAhBJ,gBAAgB,GAAiC;AAC3D,gBAAMK,SAAS,GAAG,CACd;AAAEC,YAAAA,GAAG,EAAE,IAAP;AAAaC,YAAAA,QAAQ,EAAE;AAAA;AAAA,0CAAe,KAAKT,SAApB;AAAvB,WADc,EAEd;AAAEQ,YAAAA,GAAG,EAAE,SAAP;AAAkBC,YAAAA,QAAQ,EAAE;AAAA;AAAA,oDAAoB,KAAKT,SAAzB;AAA5B,WAFc,EAGd;AAAEQ,YAAAA,GAAG,EAAE,SAAP;AAAkBC,YAAAA,QAAQ,EAAE;AAAA;AAAA,oDAAoB,KAAKT,SAAzB;AAA5B,WAHc,EAId;AAAEQ,YAAAA,GAAG,EAAE,UAAP;AAAmBC,YAAAA,QAAQ,EAAE;AAAA;AAAA,sDAAqB,KAAKT,SAA1B;AAA7B,WAJc,CAAlB;AAOA,gBAAMU,cAAc,GAAG,CACnB;AAAEF,YAAAA,GAAG,EAAE,QAAP;AAAiBG,YAAAA,MAAM,EAAE;AAAzB,WADmB,EAEnB;AAAEH,YAAAA,GAAG,EAAE,YAAP;AAAqBG,YAAAA,MAAM,EAAE;AAA7B,WAFmB,EAGnB;AAAEH,YAAAA,GAAG,EAAE,aAAP;AAAsBG,YAAAA,MAAM,EAAE;AAA9B,WAHmB,EAInB;AAAEH,YAAAA,GAAG,EAAE,gBAAP;AAAyBG,YAAAA,MAAM,EAAE;AAAjC,WAJmB,EAKnB;AAAEH,YAAAA,GAAG,EAAE,UAAP;AAAmBG,YAAAA,MAAM,EAAE;AAA3B,WALmB,EAMnB;AAAEH,YAAAA,GAAG,EAAE,cAAP;AAAuBG,YAAAA,MAAM,EAAE;AAA/B,WANmB,CAAvB;AASA,gBAAMC,YAAY,GAAGL,SAAS,CAACM,MAAV,CAAiB,CAACC,IAAD,EAAO;AAAEN,YAAAA,GAAF;AAAOC,YAAAA;AAAP,WAAP,KAA6B;AAC/DK,YAAAA,IAAI,CAACN,GAAD,CAAJ,GAAYC,QAAQ,CAACR,MAAT,EAAZ;AACA,mBAAOa,IAAP;AACH,WAHoB,EAGlB,EAHkB,CAArB;AAKA,gBAAMC,UAAU,GAAGL,cAAc,CAACG,MAAf,CAAsB,CAACC,IAAD,EAAO;AAAEN,YAAAA,GAAF;AAAOG,YAAAA;AAAP,WAAP,KAA2B;AAChE,gBAAIH,GAAG,KAAK,QAAZ,EAAsB;AAClBM,cAAAA,IAAI,CAACN,GAAD,CAAJ,GAAY;AAAA;AAAA,8CAAYG,MAAZ,EAAoB,KAAKX,SAAzB,CAAZ;AACH,aAFD,MAEO;AACHc,cAAAA,IAAI,CAACN,GAAD,CAAJ,GAAY;AAAA;AAAA,8CAAYG,MAAZ,GAAZ;AACH;;AACD,mBAAOG,IAAP;AACH,WAPkB,EAOhB,EAPgB,CAAnB;AASA,iBAAO,EAAE,GAAGF,YAAL;AAAmB,eAAGG;AAAtB,WAAP;AACH;AAED;AACJ;AACA;AACA;;;AAtD4B,O","sourcesContent":["import { BrowserDetector } from \"./BrowserDetector\";\nimport { DeviceInfo } from \"./DeviceInfo\";\nimport { DeviceUtils } from \"./Deviceutils\";\nimport { OSDetector } from \"./OSDetector\";\nimport { PlatformDetector } from \"./PlatformDetector\";\nimport { VersionDetector } from \"./VersionDetector\";\n\n/**\n * `DeviceDetector` class provides device information based on the user agent.\n */\nexport class DeviceDetector {\n    /**\n     * User agent string.\n     */\n    private userAgent: string;\n\n    /**\n     * Constructs a `DeviceDetector` instance.\n     */\n    constructor() {\n        this.userAgent = navigator.userAgent || navigator.vendor || (window as any).opera;\n    }\n\n    /**\n     * Gathers device information.\n     * @returns A promise that resolves to a `DeviceInfo` object.\n     */\n    private async gatherDeviceInfo(): Promise<Partial<DeviceInfo>> {\n        const detectors = [\n            { key: 'os', detector: new OSDetector(this.userAgent) },\n            { key: 'browser', detector: new BrowserDetector(this.userAgent) },\n            { key: 'version', detector: new VersionDetector(this.userAgent) },\n            { key: 'platform', detector: new PlatformDetector(this.userAgent) },\n        ];\n\n        const staticInfoKeys = [\n            { key: 'mobile', method: 'isMobile' },\n            { key: 'screenSize', method: 'getScreenSize' },\n            { key: 'orientation', method: 'getOrientation' },\n            { key: 'touchSupported', method: 'isTouchSupported' },\n            { key: 'language', method: 'getLanguage' },\n            { key: 'onlineStatus', method: 'getOnlineStatus' }\n        ];\n\n        const detectedInfo = detectors.reduce((info, { key, detector }) => {\n            info[key] = detector.detect();\n            return info;\n        }, {});\n\n        const staticInfo = staticInfoKeys.reduce((info, { key, method }) => {\n            if (key === 'mobile') {\n                info[key] = DeviceUtils[method](this.userAgent);\n            } else {\n                info[key] = DeviceUtils[method]();\n            }\n            return info;\n        }, {});\n\n        return { ...detectedInfo, ...staticInfo };\n    }\n\n    /**\n     * Detects device information.\n     * @returns A promise that resolves to a `DeviceInfo` object.\n     */\n    public detect: () => Promise<DeviceInfo> = async () => await this.gatherDeviceInfo() as DeviceInfo;\n}\n"]}