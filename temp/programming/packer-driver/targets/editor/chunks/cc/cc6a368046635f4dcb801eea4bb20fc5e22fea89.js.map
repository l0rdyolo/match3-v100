{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Piece/Piece.ts"],"names":["Piece","Node","ParticleSystem2D","tween","Vec3","SelectionManager","GameGlobal","constructor","row","col","node","type","m_isEmpty","particle","spriteNode","on","EventType","TOUCH_START","onTouch","getComponentInChildren","getChildByName","init","setPosition","console","log","isEmpty","getInstance","eventTarget","emit","_row","_col","PIECE_CONTENT_SIZE","PIECE_OFFSET","piecePostion","updatePosition","newX","newY","matched","resetSystem","playOnLoad","Promise","resolve","to","scale","call","start","Shake","shakeAmount","duration","originalPosition","getPosition","by","position","delete","setSelection","Highlight","cancelSelection","ResetScale","easing","moveToPosition","newPos","startPos","clone","targetPos","x","y","z","onUpdate","target","ratio","currentPos","lerp","assingPiece"],"mappings":"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","sourcesContent":["import { easing, Node, ParticleSystem2D, removeProperty, SpriteRenderer, tween, Vec3 } from \"cc\";\nimport { IPiece } from \"./IPiece\";\nimport { PieceTypes } from \"./PieceTypes\";\nimport { SelectionManager } from \"../Interaction/SelectionManager\";\nimport { GameGlobal } from \"../Game/GameGlobal\";\n\nexport class Piece implements IPiece {\n  public row: number = -1!;\n  public col: number = -1!;\n  public node: Node;\n  public type: PieceTypes = null;\n\n  private m_isEmpty = false;\n  private particle: ParticleSystem2D = null;\n  private spriteNode: Node = null;\n  public constructor(row: number, col: number, node: Node, type: PieceTypes) {\n    this.row = row;\n    this.col = col;\n    this.node = node;\n    this.type = type;\n    this.node.on(Node.EventType.TOUCH_START, this.onTouch, this);\n    this.m_isEmpty = false;\n    this.particle = this.node.getComponentInChildren(ParticleSystem2D);\n    this.spriteNode = this.node.getChildByName(\"Sprite\");\n  }\n\n  init(){\n    this.setPosition(this.row,this.col);\n  }\n\n\n  onTouch() {\n    console.log(this.isEmpty);\n    \n    if(this.isEmpty) return; \n    SelectionManager.getInstance().eventTarget.emit(\"piece-selected\", this);\n  }\n\n  public get isEmpty() : boolean{\n    const m_isEmpty = this.node ? true : false;\n    return m_isEmpty \n  }\n\n  setPosition(_row: number, _col: number) {\n    const row =\n      _row * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET);\n    const col =\n      _col * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET);\n    const piecePostion = new Vec3(col, row);\n    this.node.setPosition(piecePostion);\n  }\n\n  updatePosition(row = this.row , col = this.col) {\n    const newX = row //* GameGlobal.PIECE_CONTENT_SIZE;\n    const newY = col //* GameGlobal.PIECE_CONTENT_SIZE;\n    this.setPosition(newX,newY);\n  }\n\n  async matched(): Promise<void> {\n    if (this.particle) {\n      this.particle.resetSystem();\n      this.particle.playOnLoad = true;\n    }\n\n    if (this.spriteNode) {\n      await new Promise<void>((resolve) => {\n        tween(this.spriteNode)\n          .to(0.2, { scale: new Vec3(0, 0, 0) })\n          .call(resolve) \n          .start();\n      });\n    }\n  }\n\n  public async Shake(shakeAmount: number = 10, duration: number = 0.3) {\n    if (this.isEmpty) return;\n    const originalPosition = this.node?.getPosition();\n\n    return new Promise<void>((resolve) => {\n      if (this.node) {\n        tween(this.node)\n          .by(duration / 4, { position: new Vec3(shakeAmount, 0, 0) })\n          .by(duration / 4, { position: new Vec3(-shakeAmount * 2, 0, 0) })\n          .by(duration / 4, { position: new Vec3(shakeAmount * 2, 0, 0) })\n          .by(duration / 4, { position: new Vec3(-shakeAmount, 0, 0) })\n          .call(() => {\n            this.node?.setPosition(originalPosition);\n            resolve();\n          })\n          .start();\n      }\n    });\n  }\n\n  public delete(){\n    //! burada pool'a döndürülmeli şimdilik poolda 500 üretiliyor ama buna gerek olmayabilir.\n    this.node = null;\n  }\n\n  public setSelection(): Piece {\n    this.Highlight();\n    return this;\n  }\n\n  public cancelSelection() {\n    this.ResetScale();\n    return null;\n  }\n\n  public Highlight(duration : number = 0.1 , scale : Vec3 = new Vec3(1.1, 1.1, 1.1)) {\n    tween(this.node)\n      .to(duration, { scale: scale } , { easing: 'expoOut' } )\n      .start();\n  }\n\n  public ResetScale(duration: number = 0.1) {\n    tween(this.node)\n      .to(duration, { scale: new Vec3(1, 1, 1) })\n      .start();\n  }\n\n  public moveToPosition(newPos: Vec3, duration: number = 0.2): Promise<void> {\n    return new Promise<void>((resolve) => {\n        const startPos = this.node.position.clone();\n        const targetPos = new Vec3(\n            newPos.x * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET),\n            newPos.y * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET),\n            newPos.z\n        );\n        tween(this.node)\n            .to(duration, { position: targetPos }, {\n                easing: 'quartOut',\n                onUpdate: (target: Node, ratio: number) => {\n                    const currentPos = new Vec3();\n                    Vec3.lerp(currentPos, startPos, targetPos, ratio);\n                    target.setPosition(currentPos);\n                }\n            })\n            .call(() => {\n                this.row = newPos.y;\n                this.col = newPos.x;\n                resolve();\n            })\n            .start();\n    });\n  }\n\n  public assingPiece(node : Node , row : number , col : number){\n    console.log(node,row, col);\n  }\n\n}\n"]}