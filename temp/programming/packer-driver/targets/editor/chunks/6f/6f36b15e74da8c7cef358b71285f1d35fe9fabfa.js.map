{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","Color","Sprite","EffectManager","ccclass","property","Direction","MatchChecker","SwapPiecePositions","pieceA","pieceB","posA","posB","gridMap","movePiece","highlightNeighbors","posAData","get","posBData","set","currentPiece","visited","Set","depth","maxDepth","add","dx","dy","directions","currentPiecePosition","neighborPiecePosition","row","col","neighbor","getPieceAtPosition","has","name","sprite","getChildByName","getComponent","color","position","Array","from","entries","find","_","pos"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Color,\n  director,\n  Node,\n  Sprite,\n  SpriteRenderer,\n  Vec3,\n} from \"cc\";\nimport { EffectManager } from \"../Effects/EffectManager\";\nconst { ccclass, property } = _decorator;\n\nenum Direction {\n  Horizontal,\n  Vertical,\n}\n\n@ccclass(\"MatchChecker\")\nexport class MatchChecker {\n  private static directions = [\n    { dx: 0, dy: 1 }, // Right\n    { dx: 0, dy: -1 }, // Left\n    { dx: 1, dy: 0 }, // Down\n    { dx: -1, dy: 0 }, // Up\n  ];\n\n  public static async SwapPiecePositions(\n    pieceA: Node,\n    pieceB: Node,\n    posA: Vec3,\n    posB: Vec3,\n    gridMap: Map<Node, { row: number; col: number }>\n  ) {\n    EffectManager.movePiece(pieceA, posB, 0.1);\n    await EffectManager.movePiece(pieceB, posA, 0.1);\n    // Update the gridMap\n    this.highlightNeighbors(pieceB, gridMap);\n    const posAData = gridMap.get(pieceA);\n    const posBData = gridMap.get(pieceB);\n    gridMap.set(pieceA, posBData);\n    gridMap.set(pieceB, posAData);\n  }\n\n  private static highlightNeighbors(\n    currentPiece: Node,\n    gridMap: Map<Node, { row: number; col: number }>,\n    visited: Set<Node> = new Set<Node>,\n    depth: number = 0,\n    maxDepth: number = 5 // Set an appropriate max depth to prevent stack overflow\n  ): void {\n    if (depth > maxDepth) return;\n    visited.add(currentPiece);\n  \n    for (const { dx, dy } of this.directions) {\n      const currentPiecePosition = gridMap.get(currentPiece);\n      const neighborPiecePosition = {\n        row: currentPiecePosition.row + dx,\n        col: currentPiecePosition.col + dy,\n      };\n  \n      const neighbor = this.getPieceAtPosition(neighborPiecePosition, gridMap);\n      if (neighbor && !visited.has(neighbor)) {\n        if (neighbor.name === currentPiece.name) {\n          const sprite = neighbor.getChildByName(\"Sprite\").getComponent(Sprite);\n          if (sprite) {\n            sprite.color = new Color(150, 150, 255); // Change color\n          }\n          this.highlightNeighbors(neighbor, gridMap, visited, depth + 1, maxDepth);\n        }\n      }\n    }\n  }\n  \n  private static getPieceAtPosition(\n    position: { row: number; col: number },\n    gridMap: Map<Node, { row: number; col: number }>\n  ): Node | undefined {\n    return Array.from(gridMap.entries()).find(\n      ([_, pos]) => pos.row === position.row && pos.col === position.col\n    )?.[0];\n  }\n}\n"]}