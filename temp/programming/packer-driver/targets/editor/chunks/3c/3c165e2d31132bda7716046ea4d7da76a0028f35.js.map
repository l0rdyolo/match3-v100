{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","Color","Sprite","EffectManager","ccclass","property","Direction","MatchChecker","SwapPiecePositions","pieceA","pieceB","posA","posB","gridMap","movePiece","posAData","get","posBData","set","highlightNeighbors","getPieceAtPosition","position","Array","from","entries","find","_","pos","row","col","visitNeighborWithDirection","currentPiece","direction","visited","depth","maxDepth","currentPiecePosition","neighborPiecePosition","dx","dy","neighbor","has","name","sprite","getChildByName","getComponent","color","add","Set","horizontalDirections","console","log","verticalDirections"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Color,\n  director,\n  Node,\n  Sprite,\n  SpriteRenderer,\n  Vec3,\n} from \"cc\";\nimport { EffectManager } from \"../Effects/EffectManager\";\nconst { ccclass, property } = _decorator;\n\nenum Direction {\n  Horizontal,\n  Vertical,\n}\n\n@ccclass(\"MatchChecker\")\nexport class MatchChecker {\n  private static horizontalDirections = [\n    { dx: 0, dy: 1 }, // Right\n    { dx: 0, dy: -1 }, // Left\n\n  ];\n  private static verticalDirections = [\n    { dx: 1, dy: 0 }, // Down\n    { dx: -1, dy: 0 }, // Up\n  ];\n\n\n  public static async SwapPiecePositions(\n    pieceA: Node,\n    pieceB: Node,\n    posA: Vec3,\n    posB: Vec3,\n    gridMap: Map<Node, { row: number; col: number }>\n  ) {\n    EffectManager.movePiece(pieceA, posB, 0.1);\n    await EffectManager.movePiece(pieceB, posA, 0.1);\n    // Update the gridMap\n    const posAData = gridMap.get(pieceA);\n    const posBData = gridMap.get(pieceB);\n    gridMap.set(pieceA, posBData);\n    gridMap.set(pieceB, posAData);\n    this.highlightNeighbors(pieceB, gridMap);\n  }\n\n  \n  private static getPieceAtPosition(\n    position: { row: number; col: number },\n    gridMap: Map<Node, { row: number; col: number }>\n  ): Node | undefined {\n    return Array.from(gridMap.entries()).find(\n      ([_, pos]) => pos.row === position.row && pos.col === position.col\n    )?.[0];\n  }\n\n\n\n  private static visitNeighborWithDirection(\n    currentPiece: Node,\n    gridMap: Map<Node, { row: number; col: number }>,\n    direction: { dx: number; dy: number },\n    visited: Set<Node>,\n    depth: number,\n    maxDepth: number\n  ): void {\n    if (depth > maxDepth) return;\n  \n    const currentPiecePosition = gridMap.get(currentPiece);\n    const neighborPiecePosition = {\n      row: currentPiecePosition.row + direction.dx,\n      col: currentPiecePosition.col + direction.dy,\n    };\n  \n    const neighbor = this.getPieceAtPosition(neighborPiecePosition, gridMap);\n    if (neighbor && !visited.has(neighbor) && neighbor.name === currentPiece.name) {\n      const sprite = neighbor.getChildByName(\"Sprite\").getComponent(Sprite);\n      if (sprite) {\n        sprite.color = new Color(150, 150, 255); // Change color\n      }      \n      visited.add(neighbor);\n      this.visitNeighborWithDirection(neighbor, gridMap, direction, visited, depth + 1, maxDepth);\n    }\n  }\n  \n  private static highlightNeighbors(\n    currentPiece: Node,\n    gridMap: Map<Node, { row: number; col: number }>,\n    visited: Set<Node> = new Set<Node>(),\n    depth: number = 0,\n    maxDepth: number = 5\n  ): void {\n    visited.add(currentPiece);\n  \n    for (const direction of this.horizontalDirections) {\n      this.visitNeighborWithDirection(currentPiece, gridMap, direction, visited, depth, maxDepth);\n    }\n    console.log(visited);\n    \n  }\n  \n}\n"]}