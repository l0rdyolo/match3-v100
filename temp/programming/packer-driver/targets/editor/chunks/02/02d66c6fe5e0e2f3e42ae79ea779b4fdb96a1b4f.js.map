{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Match/MatchChecker.ts"],"names":["MatchChecker","HorizontalMatchStrategy","VerticalMatchStrategy","GridManager","constructor","matchStrategies","push","checkForMatches","pieceA","pieceB","grid","matchedPieces","strategy","matches","checkMatch","length","concat","Promise","all","map","piece","matched","checkForMatchesAfterGravity","getInstance","row","col"],"mappings":";;;2FAMaA,Y;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALJC,MAAAA,uB,iBAAAA,uB;;AAEAC,MAAAA,qB,iBAAAA,qB;;AACAC,MAAAA,W,iBAAAA,W;;;;;;;8BAEIH,Y,GAAN,MAAMA,YAAN,CAAmB;AAGtBI,QAAAA,WAAW,GAAG;AAAA,eAFNC,eAEM,GAF6B,EAE7B;AACV,eAAKA,eAAL,CAAqBC,IAArB,CAA0B;AAAA;AAAA,mEAA1B;AACA,eAAKD,eAAL,CAAqBC,IAArB,CAA0B;AAAA;AAAA,+DAA1B;AACH,SANqB,CAOtB;;;AAE4B,cAAfC,eAAe,CAACC,MAAD,EAAgBC,MAAhB,EAA+BC,IAA/B,EAAiE;AACzF,cAAIC,aAAsB,GAAG,EAA7B;;AACA,eAAK,MAAMC,QAAX,IAAuB,KAAKP,eAA5B,EAA6C;AACzC,kBAAMQ,OAAO,GAAGD,QAAQ,CAACE,UAAT,CAAoBN,MAApB,EAA4BC,MAA5B,EAAqCC,IAArC,CAAhB;;AACA,gBAAIG,OAAO,CAACE,MAAR,IAAkB,CAAtB,EAAyB;AACrBJ,cAAAA,aAAa,GAAGA,aAAa,CAACK,MAAd,CAAqBH,OAArB,CAAhB;AACH;AACJ;;AACD,cAAIF,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,kBAAME,OAAO,CAACC,GAAR,CAAYP,aAAa,CAACQ,GAAd,CAAkBC,KAAK,IAAIA,KAAK,CAACC,OAAN,EAA3B,CAAZ,CAAN;AACH;;AACD,iBAAOV,aAAP;AACH;;AAEuC,cAA3BW,2BAA2B,GAAqB;AACzD,gBAAMZ,IAAI,GAAG;AAAA;AAAA,0CAAYa,WAAZ,GAA0Bb,IAAvC;AACA,cAAIC,aAAsB,GAAG,EAA7B;;AAEA,eAAK,IAAIa,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGd,IAAI,CAACK,MAA7B,EAAqCS,GAAG,EAAxC,EAA4C;AACxC,iBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGf,IAAI,CAACc,GAAD,CAAJ,CAAUT,MAAlC,EAA0CU,GAAG,EAA7C,EAAiD;AAC7C,oBAAML,KAAK,GAAGV,IAAI,CAACc,GAAD,CAAJ,CAAUC,GAAV,CAAd;;AACA,kBAAIL,KAAJ,EAAW;AACP,qBAAK,MAAMR,QAAX,IAAuB,KAAKP,eAA5B,EAA6C;AACzC,wBAAMQ,OAAO,GAAGD,QAAQ,CAACE,UAAT,CAAoBM,KAApB,EAA2BA,KAA3B,EAAmCV,IAAnC,CAAhB;;AACA,sBAAIG,OAAO,CAACE,MAAR,IAAkB,CAAtB,EAAyB;AACrBJ,oBAAAA,aAAa,GAAGA,aAAa,CAACK,MAAd,CAAqBH,OAArB,CAAhB;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,cAAIF,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,kBAAME,OAAO,CAACC,GAAR,CAAYP,aAAa,CAACQ,GAAd,CAAkBC,KAAK,IAAIA,KAAK,CAACC,OAAN,EAA3B,CAAZ,CAAN;AACH;;AAED,iBAAOV,aAAP;AACH;;AA9CqB,O","sourcesContent":["import { Piece } from \"../Piece/Piece\";\nimport { HorizontalMatchStrategy } from \"./MatchStrategies/HorizontalMatchStrategy\";\nimport { MatchStrategy } from \"./MatchStrategies/IMatchStrategy\";\nimport { VerticalMatchStrategy } from \"./MatchStrategies/VerticalMatchStrategy\";\nimport { GridManager } from \"../Grid/GridManager\";\n\nexport class MatchChecker {\n    private matchStrategies: MatchStrategy[] = [];\n\n    constructor() {\n        this.matchStrategies.push(new HorizontalMatchStrategy());\n        this.matchStrategies.push(new VerticalMatchStrategy());\n    }\n    //! IDEA - 3 : stategyler birbirin tekralrayan kodlar içeriyor. düzenlenmeli\n\n    public async checkForMatches(pieceA: Piece, pieceB: Piece, grid:Piece[][]): Promise<Piece[]> {\n        let matchedPieces: Piece[] = [];\n        for (const strategy of this.matchStrategies) {\n            const matches = strategy.checkMatch(pieceA, pieceB , grid);\n            if (matches.length >= 3) {\n                matchedPieces = matchedPieces.concat(matches);\n            }\n        }\n        if (matchedPieces.length > 0) {\n            await Promise.all(matchedPieces.map(piece => piece.matched()));\n        }\n        return matchedPieces;\n    }\n\n    public async checkForMatchesAfterGravity(): Promise<Piece[]> {\n        const grid = GridManager.getInstance().grid;\n        let matchedPieces: Piece[] = [];\n\n        for (let row = 0; row < grid.length; row++) {\n            for (let col = 0; col < grid[row].length; col++) {\n                const piece = grid[row][col];\n                if (piece) {\n                    for (const strategy of this.matchStrategies) {\n                        const matches = strategy.checkMatch(piece, piece , grid);\n                        if (matches.length >= 3) {\n                            matchedPieces = matchedPieces.concat(matches);\n                        }\n                    }\n                }\n            }\n        }\n\n        if (matchedPieces.length > 0) {\n            await Promise.all(matchedPieces.map(piece => piece.matched()));\n        }\n\n        return matchedPieces;\n    }\n\n}\n"]}