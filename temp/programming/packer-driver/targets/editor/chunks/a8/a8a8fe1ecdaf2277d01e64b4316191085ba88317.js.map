{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Runtime/SoundManager.ts"],"names":["_decorator","AudioSource","SingletonComponent","ccclass","property","SoundManager","type","soundsMap","Map","onLoad","soundList","forEach","sound","set","node","name","playSound","key","loop","audioSource","get","play","stopSound","playing","stop","setVolume","volume","setGlobalVolume","stopAllSounds"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,W,OAAAA,W;;AACZC,MAAAA,kB,iBAAAA,kB;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;8BAGjBK,Y,WADZF,OAAO,CAAC,cAAD,C,UAUHC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEL;AAAR,OAAD,C,2BAVb,MACaI,YADb;AAAA;AAAA,oDACmE;AAAA;AAAA;;AAAA;;AAAA,eAYvDE,SAZuD,GAYjB,IAAIC,GAAJ,EAZiB;AAAA;;AAErDC,QAAAA,MAAM,GAAG;AACf,gBAAMA,MAAN;AACA,eAAKC,SAAL,CAAeC,OAAf,CAAuBC,KAAK,IAAI;AAC5B,iBAAKL,SAAL,CAAeM,GAAf,CAAmBD,KAAK,CAACE,IAAN,CAAWC,IAA9B,EAAoCH,KAApC;AACH,WAFD;AAGH;;AAODI,QAAAA,SAAS,CAACC,GAAD,EAAcC,IAAa,GAAG,KAA9B,EAA2C;AAChD,gBAAMC,WAAW,GAAG,KAAKZ,SAAL,CAAea,GAAf,CAAmBH,GAAnB,CAApB;;AAEA,cAAIE,WAAJ,EAAiB;AACbA,YAAAA,WAAW,CAACD,IAAZ,GAAmBA,IAAnB;AACAC,YAAAA,WAAW,CAACE,IAAZ;AACH;AACJ;;AAEDC,QAAAA,SAAS,CAACL,GAAD,EAAoB;AACzB,gBAAME,WAAW,GAAG,KAAKZ,SAAL,CAAea,GAAf,CAAmBH,GAAnB,CAApB;;AACA,cAAIE,WAAW,IAAIA,WAAW,CAACI,OAA/B,EAAwC;AACpCJ,YAAAA,WAAW,CAACK,IAAZ;AACH;AACJ;;AAEDC,QAAAA,SAAS,CAACR,GAAD,EAAcS,MAAd,EAAoC;AACzC,gBAAMP,WAAW,GAAG,KAAKZ,SAAL,CAAea,GAAf,CAAmBH,GAAnB,CAApB;;AACA,cAAIE,WAAJ,EAAiB;AACbA,YAAAA,WAAW,CAACO,MAAZ,GAAqBA,MAArB;AACH;AACJ;;AAEDC,QAAAA,eAAe,CAACD,MAAD,EAAuB;AAClC,eAAKnB,SAAL,CAAeI,OAAf,CAAwBQ,WAAD,IAAiB;AACpCA,YAAAA,WAAW,CAACO,MAAZ,GAAqBA,MAArB;AACH,WAFD;AAGH;;AAEDE,QAAAA,aAAa,GAAS;AAClB,eAAKrB,SAAL,CAAeI,OAAf,CAAwBQ,WAAD,IAAiB;AACpC,gBAAIA,WAAW,CAACI,OAAhB,EAAyB;AACrBJ,cAAAA,WAAW,CAACK,IAAZ;AACH;AACJ,WAJD;AAKH;;AAjD8D,O;;;;;iBAUpC,E","sourcesContent":["import { _decorator, AudioSource } from 'cc';\nimport { SingletonComponent } from '../Legacy/Singleton';\nconst { ccclass, property } = _decorator;\n\n@ccclass('SoundManager')\nexport class SoundManager extends SingletonComponent<SoundManager> {\n\n    protected onLoad() {\n        super.onLoad();\n        this.soundList.forEach(sound => {\n            this.soundsMap.set(sound.node.name, sound);\n        });\n    }\n\n    @property({ type: AudioSource })\n    soundList: AudioSource[] = [];\n\n    private soundsMap: Map<string, AudioSource> = new Map();\n\n    playSound(key: string, loop: boolean = false): void {\n        const audioSource = this.soundsMap.get(key);\n\n        if (audioSource) {\n            audioSource.loop = loop;\n            audioSource.play();\n        }\n    }\n\n    stopSound(key: string): void {\n        const audioSource = this.soundsMap.get(key);\n        if (audioSource && audioSource.playing) {\n            audioSource.stop();\n        }\n    }\n\n    setVolume(key: string, volume: number): void {\n        const audioSource = this.soundsMap.get(key);\n        if (audioSource) {\n            audioSource.volume = volume;\n        }\n    }\n\n    setGlobalVolume(volume: number): void {\n        this.soundsMap.forEach((audioSource) => {\n            audioSource.volume = volume;\n        });\n    }\n\n    stopAllSounds(): void {\n        this.soundsMap.forEach((audioSource) => {\n            if (audioSource.playing) {\n                audioSource.stop();\n            }\n        });\n    }\n}\n"]}