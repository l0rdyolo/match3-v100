{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/DetectorAPI/PlatformDetector.ts"],"names":["PlatformDetector","Detector","detect","navigator","platform"],"mappings":";;;wCAmBaA,gB;;;;;;;;;;;;;;AAnBJC,MAAAA,Q,iBAAAA,Q;;;;;;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;kCACaD,gB,GAAN,MAAMA,gBAAN;AAAA;AAAA,gCAAgD;AACnD;AACJ;AACA;AACA;AACA;AACIE,QAAAA,MAAM,GAAW;AACb,iBAAOC,SAAS,CAACC,QAAjB;AACH;;AARkD,O","sourcesContent":["import { Detector } from \"./Detector\";\n\n/**\n * `PlatformDetector` extends the generic `Detector` class to specifically\n * detect the platform on which the current web application is running. It\n * leverages the `navigator.platform` property of the Web API to determine the\n * platform information.\n *\n * @extends {Detector<string>} - Denotes that `PlatformDetector` is a\n * specialized form of `Detector` with a string type parameter, indicating the\n * type of detection it performs.\n *\n * @example\n * ```typescript\n * const platformDetector = new PlatformDetector();\n * console.log(platformDetector.detect()); // Outputs the platform, e.g.,\n * \"Win32\", \"Linux\", etc.\n * ```\n */\nexport class PlatformDetector extends Detector<string> {\n    /**\n     * Detects and returns the platform of the user's device.\n     *\n     * @returns {string} - The platform identifier (e.g., \"Win32\", \"Linux\").\n     */\n    detect(): string {\n        return navigator.platform;\n    }\n}\n"]}