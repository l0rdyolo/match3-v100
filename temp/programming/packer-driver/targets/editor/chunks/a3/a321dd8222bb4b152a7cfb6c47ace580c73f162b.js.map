{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","tween","Vec3","GridManager","GameGlobal","ccclass","property","GravityHandler","applyGravity","grid","getInstance","rows","length","cols","col","row","piece","node","console","log","name","newRow","movePiece","newY","PIECE_CONTENT_SIZE","PIECE_OFFSET","Promise","resolve","to","position","x","call","start"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,I,OAAAA,I;;AAEpCC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,U,iBAAAA,U;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;gCAGjBQ,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCP,SADpC,CAC8C;AAExB,cAAZQ,YAAY,GAAG;AACjB,gBAAMC,IAAI,GAAG;AAAA;AAAA,0CAAYC,WAAZ,GAA0BD,IAAvC;AACA,gBAAME,IAAI,GAAGF,IAAI,CAACG,MAAlB;AACA,gBAAMC,IAAI,GAAGJ,IAAI,CAAC,CAAD,CAAJ,CAAQG,MAArB,CAHiB,CAKjB;;AACA,eAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGD,IAAxB,EAA8BC,GAAG,EAAjC,EAAqC;AACjC,iBAAK,IAAIC,GAAG,GAAGJ,IAAI,GAAG,CAAtB,EAAyBI,GAAG,IAAI,CAAhC,EAAmCA,GAAG,EAAtC,EAA0C;AAAG;AACzC,kBAAIC,KAAK,GAAGP,IAAI,CAACM,GAAD,CAAJ,CAAUD,GAAV,CAAZ,CADsC,CAGtC;;AACA,kBAAI,CAACE,KAAD,IAAUA,KAAK,CAACC,IAAN,KAAe,IAA7B,EAAmC;AACnCC,cAAAA,OAAO,CAACC,GAAR,CAAa,IAAGJ,GAAI,MAAKD,GAAI,OAAME,KAAK,CAACC,IAAN,CAAWG,IAAK,EAAnD;AAEA,kBAAIC,MAAM,GAAGN,GAAb,CAPsC,CAStC;;AACA,qBAAOM,MAAM,GAAG,CAAT,GAAaV,IAAb,IAAqB,CAACF,IAAI,CAACY,MAAM,GAAG,CAAV,CAAJ,CAAiBP,GAAjB,EAAsBG,IAAnD,EAAyD;AACrDI,gBAAAA,MAAM;AACT,eAZqC,CActC;;;AACA,kBAAIA,MAAM,KAAKN,GAAf,EAAoB;AAChBN,gBAAAA,IAAI,CAACY,MAAD,CAAJ,CAAaP,GAAb,IAAoBE,KAApB,CADgB,CACY;;AAC5BP,gBAAAA,IAAI,CAACM,GAAD,CAAJ,CAAUD,GAAV,IAAiB,IAAjB,CAFgB,CAEQ;;AAExBE,gBAAAA,KAAK,CAACD,GAAN,GAAYM,MAAZ,CAJgB,CAIK;;AACrB,sBAAM,KAAKC,SAAL,CAAeN,KAAf,EAAsBK,MAAtB,EAA8BP,GAA9B,CAAN,CALgB,CAK2B;AAC9C;AACJ;AACJ;AACJ;;AAEDQ,QAAAA,SAAS,CAACN,KAAD,EAAeK,MAAf,EAA+BP,GAA/B,EAA2D;AAChE,gBAAMS,IAAI,GAAGF,MAAM,IAAI;AAAA;AAAA,wCAAWG,kBAAX,GAAgC;AAAA;AAAA,wCAAWC,YAA/C,CAAnB;AAEA,iBAAO,IAAIC,OAAJ,CAAmBC,OAAD,IAAa;AAClC1B,YAAAA,KAAK,CAACe,KAAK,CAACC,IAAP,CAAL,CACKW,EADL,CACQ,GADR,EACa;AAAEC,cAAAA,QAAQ,EAAE,IAAI3B,IAAJ,CAASc,KAAK,CAACC,IAAN,CAAWY,QAAX,CAAoBC,CAA7B,EAAgCP,IAAhC,EAAsC,CAAtC;AAAZ,aADb,EAEKQ,IAFL,CAEU,MAAMJ,OAAO,EAFvB,EAGKK,KAHL;AAIH,WALM,CAAP;AAMH;;AA5CyC,O","sourcesContent":["import { _decorator, Component, Node, tween, Vec3 } from 'cc';\nimport { Piece } from '../Piece/Piece';\nimport { GridManager } from '../Grid/GridManager';\nimport { GameGlobal } from '../Game/GameGlobal';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GravityHandler')\nexport class GravityHandler extends Component {\n\n    async applyGravity() {\n        const grid = GridManager.getInstance().grid;\n        const rows = grid.length;\n        const cols = grid[0].length;\n\n        // Grid'i dolaş\n        for (let col = 0; col < cols; col++) {\n            for (let row = rows - 2; row >= 0; row--) {  // En alt satırdan bir üstünden başlayarak yukarı doğru git\n                let piece = grid[row][col];\n\n                // Eğer hücre boşsa devam et\n                if (!piece || piece.node === null) continue;\n                console.log(`[${row} , ${col}] , ${piece.node.name}`);\n                \n                let newRow = row;\n\n                // Altındaki hücre boş olduğu sürece bu işlemi yap\n                while (newRow + 1 < rows && !grid[newRow + 1][col].node) {\n                    newRow++;\n                }\n\n                // Eğer yeni bir pozisyon bulduysak, taşı\n                if (newRow !== row) {\n                    grid[newRow][col] = piece;  // Yeni pozisyona taşı\n                    grid[row][col] = null;  // Eski pozisyonu boşalt\n\n                    piece.row = newRow;  // Yeni satırı güncelle\n                    await this.movePiece(piece, newRow, col);  // Parçayı hareket ettir\n                }\n            }\n        }\n    }\n\n    movePiece(piece: Piece, newRow: number, col: number): Promise<void> {\n        const newY = newRow * (GameGlobal.PIECE_CONTENT_SIZE + GameGlobal.PIECE_OFFSET);\n\n        return new Promise<void>((resolve) => {\n            tween(piece.node)\n                .to(0.3, { position: new Vec3(piece.node.position.x, newY, 0) })\n                .call(() => resolve())\n                .start();\n        });\n    }\n}\n"]}