{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Node","Vec3","CCInteger","PiecesPool","EffectManager","InteractionManager","ccclass","property","GridGenerator","PIECE_CONTENT_SIZE","interactionManager","start","grid","generateGrid","row","GRID_ROW","piecesInRow","col","piece","piecesPool","getPieceFromPool","createsMatch","pieceLastPosition","getCenteredPosition","pieceFirstPosition","x","setPosition","on","EventType","TOUCH_START","event","onPieceClicked","pieceProps","targetPosition","push","animateRowFall","delay","promises","map","fallPieceToGridPosition","Promise","all","clickedPiece","currentTarget","console","log","getPosition","name","returnPieceToPool","j","i","_j","Math","floor","_i"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, systemEvent, SystemEventType, EventTouch, Vec2, CCInteger } from 'cc';\nimport { PiecesPool } from '../Poolable/PiecesPool';\nimport { EffectManager } from '../Effects/EffectManager';\nimport { InteractionManager } from '../Interaction/InteractionManager';\nconst { ccclass, property } = _decorator;\n\ntype PieceProps = {\n    piece : Node,\n    targetPosition : Vec3\n}\n\n@ccclass('GridGenerator')\nexport class GridGenerator extends Component {\n    @property(PiecesPool)\n    private piecesPool: PiecesPool = null;\n   \n    private PIECE_CONTENT_SIZE: number = 100; //dinamikle≈ütir\n    \n    @property(CCInteger)\n    GRID_ROW: number = 0;\n\n    private interactionManager : InteractionManager = new InteractionManager();\n\n\n    protected start(): void {\n        const grid = this.generateGrid();\n    }\n\n    private async generateGrid() {\n        const grid: Node[][] = [];\n        for (let row = 0; row < this.GRID_ROW; row++) {\n            grid[row] = [];\n            const piecesInRow: PieceProps[] = [];\n            for (let col = 0; col < this.GRID_ROW; col++) {\n                let piece: Node;\n                do {\n                    piece = this.piecesPool.getPieceFromPool();\n                } while (this.createsMatch(piece, row, col, grid));\n                const pieceLastPosition = this.getCenteredPosition(col, row)\n                const pieceFirstPosition = new Vec3(pieceLastPosition.x, this.GRID_ROW * this.PIECE_CONTENT_SIZE)\n                piece.setPosition(pieceFirstPosition);\n                // piece.on(Node.EventType.TOUCH_START, this.onPieceClicked, this);\n                piece.on(Node.EventType.TOUCH_START, (event: EventTouch) => {\n                    this.interactionManager.onPieceClicked(event, piece);\n                });\n                grid[row][col] = piece;\n                const pieceProps : PieceProps = {\n                    piece : piece,\n                    targetPosition : pieceLastPosition\n                }\n                piecesInRow.push(pieceProps);\n\n                // await EffectManager.fallPieceToGridPosition(piece , pieceLastPosition , 0.05 ,  10)\n            }\n            await this.animateRowFall(piecesInRow , 0.1)\n        }\n    }\n\n    private async animateRowFall(pieceProps: PieceProps[] , delay: number) {\n        const promises = pieceProps.map(pieceProps => {\n            return EffectManager.fallPieceToGridPosition(pieceProps.piece, pieceProps.targetPosition, delay, 10);\n        });\n        await Promise.all(promises);\n    }\n\n    private onPieceClicked(event: EventTouch) {\n        const clickedPiece = event.currentTarget as Node;\n        console.log(`Piece clicked at position: ${clickedPiece.getPosition()}`);\n        // Implement what happens when a piece is clicked.\n    }\n\n    private createsMatch(piece: Node, row: number, col: number, grid: Node[][]): boolean {\n        if (row >= 2 &&\n            grid[row - 1][col]?.name === piece.name &&\n            grid[row - 2][col]?.name === piece.name) {\n                this.piecesPool.returnPieceToPool(piece);\n            return true;\n        }\n\n        if (col >= 2 &&\n            grid[row][col - 1]?.name === piece.name &&\n            grid[row][col - 2]?.name === piece.name) {\n                this.piecesPool.returnPieceToPool(piece);\n            return true;\n        }\n\n        return false;\n    }\n\n\n    private getCenteredPosition(j : number, i:number ) : Vec3{\n      //EVERY game board should be square matrix\n      const _j = (j * this.PIECE_CONTENT_SIZE)  - ((this.PIECE_CONTENT_SIZE * (Math.floor(this.GRID_ROW / 2))) )\n      const _i = (i * this.PIECE_CONTENT_SIZE)  - ((this.PIECE_CONTENT_SIZE * (Math.floor(this.GRID_ROW / 2))) ) \n      return new Vec3(_j,_i)\n    }\n}\n"]}