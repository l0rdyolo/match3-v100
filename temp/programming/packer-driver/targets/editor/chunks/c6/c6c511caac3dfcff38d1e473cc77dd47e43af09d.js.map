{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Masa%C3%BCst%C3%BC/match3-2d/assets/Scripts/Grid/MatchChecker.ts"],"names":["_decorator","Color","Sprite","EffectManager","ccclass","Direction","MatchChecker","SwapPiecePositions","pieceA","pieceB","posA","posB","gridMap","movePiece","posAData","get","posBData","set","horizontalVisited","Set","verticalVisited","checkMatches","getPieceAtPosition","position","Array","from","entries","find","_","pos","row","col","visitNeighborWithDirection","currentPiece","direction","visited","depth","maxDepth","currentPiecePosition","neighborPiecePosition","dx","dy","neighbor","has","name","sprite","getChildByName","getComponent","color","add","horizontalDirections","verticalDirections","size","console","log","handleMatch","matchedPieces","piece","decreaseScale","delete"],"mappings":"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","sourcesContent":["import { _decorator, Color, Node, Sprite, Vec3 } from \"cc\";\nimport { EffectManager } from \"../Effects/EffectManager\";\nconst { ccclass } = _decorator;\n\nenum Direction {\n  Horizontal,\n  Vertical,\n}\n\n@ccclass(\"MatchChecker\")\nexport class MatchChecker {\n  private static horizontalDirections = [\n    { dx: 0, dy: 1 }, // Right\n    { dx: 0, dy: -1 }, // Left\n  ];\n\n  private static verticalDirections = [\n    { dx: 1, dy: 0 }, // Down\n    { dx: -1, dy: 0 }, // Up\n  ];\n\n  public static async SwapPiecePositions(\n    pieceA: Node,\n    pieceB: Node,\n    posA: Vec3,\n    posB: Vec3,\n    gridMap: Map<Node, { row: number; col: number }>\n  ) {\n    EffectManager.movePiece(pieceA, posB, 0.1);\n    await EffectManager.movePiece(pieceB, posA, 0.1);\n\n    // Update the gridMap\n    const posAData = gridMap.get(pieceA);\n    const posBData = gridMap.get(pieceB);\n    gridMap.set(pieceA, posBData);\n    gridMap.set(pieceB, posAData);\n\n    const horizontalVisited = new Set<Node>();\n    const verticalVisited = new Set<Node>();\n\n    this.checkMatches(pieceB, gridMap, horizontalVisited, verticalVisited);\n  }\n\n  private static getPieceAtPosition(\n    position: { row: number; col: number },\n    gridMap: Map<Node, { row: number; col: number }>\n  ): Node | undefined {\n    return Array.from(gridMap.entries()).find(\n      ([_, pos]) => pos.row === position.row && pos.col === position.col\n    )?.[0];\n  }\n\n  private static visitNeighborWithDirection(\n    currentPiece: Node,\n    gridMap: Map<Node, { row: number; col: number }>,\n    direction: { dx: number; dy: number },\n    visited: Set<Node>,\n    depth: number,\n    maxDepth: number\n  ): void {\n    if (depth > maxDepth) return;\n\n    const currentPiecePosition = gridMap.get(currentPiece);\n    const neighborPiecePosition = {\n      row: currentPiecePosition.row + direction.dx,\n      col: currentPiecePosition.col + direction.dy,\n    };\n\n    const neighbor = this.getPieceAtPosition(neighborPiecePosition, gridMap);\n    if (\n      neighbor &&\n      !visited.has(neighbor) &&\n      neighbor.name === currentPiece.name\n    ) {\n      const sprite = neighbor.getChildByName(\"Sprite\").getComponent(Sprite);\n      if (sprite) {\n        sprite.color = new Color(150, 150, 255); // Change color\n      }\n      visited.add(neighbor);\n      this.visitNeighborWithDirection(\n        neighbor,\n        gridMap,\n        direction,\n        visited,\n        depth + 1,\n        maxDepth\n      );\n    }\n  }\n\n  private static async checkMatches(\n    currentPiece: Node,\n    gridMap: Map<Node, { row: number; col: number }>,\n    horizontalVisited: Set<Node>,\n    verticalVisited: Set<Node>,\n    depth: number = 0,\n    maxDepth: number = 3\n  ): void {\n    horizontalVisited.add(currentPiece);\n    verticalVisited.add(currentPiece);\n\n    for (const direction of this.horizontalDirections) {\n      this.visitNeighborWithDirection(\n        currentPiece,\n        gridMap,\n        direction,\n        horizontalVisited,\n        depth,\n        maxDepth\n      );\n    }\n    for (const direction of this.verticalDirections) {\n      this.visitNeighborWithDirection(\n        currentPiece,\n        gridMap,\n        direction,\n        verticalVisited,\n        depth,\n        maxDepth\n      );\n    }\n\n    if (verticalVisited.size >= 3) {\n      console.log(\"Vertical Match Detected\");\n      await this.handleMatch(Array.from(verticalVisited), gridMap);\n    } else if (horizontalVisited.size >= 3) {\n      console.log(\"Horizontal Match Detected\");\n      await this.handleMatch(Array.from(horizontalVisited), gridMap);\n    }\n  }\n\n  private static async handleMatch(matchedPieces: Node[], gridMap: Map<Node, { row: number; col: number }>): Promise<void> {\n    for (const piece of matchedPieces) {\n      await EffectManager.decreaseScale(piece , 0.1 , false);\n      gridMap.delete(piece);\n      // Assuming you have a method to return the piece to the pool\n    //   this.returnPieceToPool(piece);\n    }\n  }\n\n}\n"]}