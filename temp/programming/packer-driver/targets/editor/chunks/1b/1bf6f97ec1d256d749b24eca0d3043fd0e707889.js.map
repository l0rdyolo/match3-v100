{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Grid/GravityHandler.ts"],"names":["_decorator","Component","Vec3","ccclass","property","GravityHandler","onLoad","applyGravity","grid","moved","promises","emptyPieces","col","length","row","currentPiece","isEmpty","targetRow","belowPiece","push","moveToPosition","Promise","all"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;;;;;;;;;OAI1B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;gCAGjBK,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCJ,SADpC,CAC8C;AAC5CK,QAAAA,MAAM,GAAG;AACP,gBAAMA,MAAN;AACD,SAH2C,CAK5C;;;AACkB,cAAZC,YAAY,CAACC,IAAD,EAAO;AACvB,cAAIC,KAAK,GAAG,KAAZ;AACA,cAAIC,QAAyB,GAAG,EAAhC;AACA,cAAIC,WAAoB,GAAG,EAA3B;;AAEA,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,MAAhC,EAAwCD,GAAG,EAA3C,EAA+C;AAC7C,iBAAK,IAAIE,GAAG,GAAGN,IAAI,CAACK,MAAL,GAAc,CAA7B,EAAgCC,GAAG,IAAI,CAAvC,EAA0CA,GAAG,EAA7C,EAAiD;AAAE;AACjD,oBAAMC,YAAY,GAAGP,IAAI,CAACM,GAAD,CAAJ,CAAUF,GAAV,CAArB;;AACA,kBAAI,CAACG,YAAY,CAACC,OAAlB,EAA2B;AACzB,oBAAIC,SAAS,GAAGH,GAAhB,CADyB,CAGzB;;AACA,uBAAOG,SAAS,GAAG,CAAZ,GAAgBT,IAAI,CAACK,MAArB,IAA+BL,IAAI,CAACS,SAAS,GAAG,CAAb,CAAJ,CAAoBL,GAApB,EAAyBI,OAA/D,EAAwE;AACtEC,kBAAAA,SAAS;AACV,iBANwB,CAQzB;;;AACA,oBAAIA,SAAS,KAAKH,GAAlB,EAAuB;AACrB,wBAAMI,UAAU,GAAGV,IAAI,CAACS,SAAD,CAAJ,CAAgBL,GAAhB,CAAnB,CADqB,CAGrB;;AACAJ,kBAAAA,IAAI,CAACS,SAAD,CAAJ,CAAgBL,GAAhB,IAAuBG,YAAvB;AACAP,kBAAAA,IAAI,CAACM,GAAD,CAAJ,CAAUF,GAAV,IAAiBM,UAAjB,CALqB,CAOrB;;AACAH,kBAAAA,YAAY,CAACH,GAAb,GAAmBA,GAAnB;AACAG,kBAAAA,YAAY,CAACD,GAAb,GAAmBG,SAAnB;AAEAN,kBAAAA,WAAW,CAACQ,IAAZ,CAAiBD,UAAjB,EAXqB,CAWS;;AAC9BR,kBAAAA,QAAQ,CAACS,IAAT,CAAcJ,YAAY,CAACK,cAAb,CAA4B,IAAIlB,IAAJ,CAASU,GAAT,EAAcK,SAAd,EAAyB,CAAzB,CAA5B,CAAd;AACAR,kBAAAA,KAAK,GAAG,IAAR;AACD;AACF;AACF;AACF;;AAED,gBAAMY,OAAO,CAACC,GAAR,CAAYZ,QAAZ,CAAN,CApCuB,CAoCM;;AAE7B,iBAAOC,WAAP,CAtCuB,CAsCH;AACrB;;AA7C2C,O","sourcesContent":["import { _decorator, Component, Vec3 } from \"cc\";\nimport { SingletonComponent } from \"../SingletonComponent\";\nimport { GridManager } from \"./GridManager\";\nimport { Piece } from \"../Piece/Piece\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GravityHandler\")\nexport class GravityHandler extends Component {\n  onLoad() {\n    super.onLoad();\n  }\n\n  //! IDEA - burada patlıyoruz\n  async applyGravity(grid) {\n    let moved = false;\n    let promises: Promise<void>[] = [];\n    let emptyPieces: Piece[] = [];\n\n    for (let col = 0; col < grid[0].length; col++) {\n      for (let row = grid.length - 2; row >= 0; row--) { // Alttan başlayarak kontrol ediyoruz\n        const currentPiece = grid[row][col];\n        if (!currentPiece.isEmpty) {\n          let targetRow = row;\n\n          // Aşağıdaki boş hücreyi bul\n          while (targetRow + 1 < grid.length && grid[targetRow + 1][col].isEmpty) {\n            targetRow++;\n          }\n\n          // Eğer targetRow değiştiyse, bu demektir ki bir boş hücreye doğru hareket ediyoruz\n          if (targetRow !== row) {\n            const belowPiece = grid[targetRow][col];\n            \n            // Parçaların yerlerini değiştir\n            grid[targetRow][col] = currentPiece;\n            grid[row][col] = belowPiece;\n\n            // Yeni satır ve sütunları güncelle\n            currentPiece.col = col;\n            currentPiece.row = targetRow;\n\n            emptyPieces.push(belowPiece); // Aşağıdaki boş parçayı listeye ekle\n            promises.push(currentPiece.moveToPosition(new Vec3(col, targetRow, 0)));\n            moved = true;\n          }\n        }\n      }\n    }\n\n    await Promise.all(promises); // Tüm parçalar hareketini tamamlayana kadar bekle\n\n    return emptyPieces; // Boş hücreleri döndür\n  }\n}\n"]}