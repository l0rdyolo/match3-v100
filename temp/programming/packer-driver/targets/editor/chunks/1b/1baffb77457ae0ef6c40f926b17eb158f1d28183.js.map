{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/SooLib/Util/Array.ts"],"names":["flatten","arr","depth","flat","input","lvl","reduce","acc","item","value","Array","isArray","concat","shuffle","i","length","j","Math","floor","random","deepClone","JSON","parse","stringify","unique","from","Set","removeNullandUndefined","filter","undefined"],"mappings":";;;;;AAAO,WAASA,OAAT,CAAoBC,GAApB,EAA8BC,KAAa,GAAG,CAA9C,EAAwD;AAC3D,UAAMC,IAAI,GAAG,CAACC,KAAD,EAAeC,GAAf,KACTD,KAAK,CAACE,MAAN,CAAa,CAACC,GAAD,EAAaC,IAAb,KAA2B;AACpC,YAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,IAAd,KAAuBH,GAAG,GAAG,CAA7B,GACRF,IAAI,CAACK,IAAD,EAAOH,GAAG,GAAG,CAAb,CADI,GACcG,IAD5B;AAEA,aAAOD,GAAG,CAACK,MAAJ,CAAWH,KAAX,CAAP;AACH,KAJD,EAIG,EAJH,CADJ;;AAOA,WAAON,IAAI,CAACF,GAAD,EAAMC,KAAN,CAAX;AACH;;AAMM,WAASW,OAAT,CAAoBZ,GAApB,EAAmC;AACtC,SAAK,IAAIa,CAAC,GAAGb,GAAG,CAACc,MAAJ,GAAa,CAA1B,EAA6BD,CAAC,GAAG,CAAjC,EAAoCA,CAAC,EAArC,EAAyC;AACrC,YAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,OAACb,GAAG,CAACa,CAAD,CAAJ,EAASb,GAAG,CAACe,CAAD,CAAZ,IAAmB,CAACf,GAAG,CAACe,CAAD,CAAJ,EAASf,GAAG,CAACa,CAAD,CAAZ,CAAnB;AACH;;AACD,WAAOb,GAAP;AACH;;AAEM,WAASmB,SAAT,CAAsBnB,GAAtB,EAAqC;AACxC,WAAOoB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAetB,GAAf,CAAX,CAAP;AACH;;AAEM,WAASuB,MAAT,CAAmBvB,GAAnB,EAAkC;AACrC,WAAOS,KAAK,CAACe,IAAN,CAAW,IAAIC,GAAJ,CAAQzB,GAAR,CAAX,CAAP;AACH;;;aA7BeD,O;aAeAa,O;eAQAO,S;YAIAI;;;;;;;;;;;;wCAhBHG,sB,GAA6B1B,GAAJ,IAA2C;AAC7E,eAAOA,GAAG,CAAC2B,MAAJ,CAAYpB,IAAD,IAAqBA,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKqB,SAA1D,CAAP;AACH,O","sourcesContent":["export function flatten<T>(arr: T[], depth: number = 1): any[] {\n    const flat = (input: any[], lvl: number): any[] =>\n        input.reduce((acc: any[], item: any) => {\n            const value = Array.isArray(item) && lvl > 0\n                ? flat(item, lvl - 1) : item;\n            return acc.concat(value);\n        }, []);\n\n    return flat(arr, depth);\n}\n\nexport const removeNullandUndefined = <T>(arr: (T | null | undefined)[]): T[] => {\n    return arr.filter((item): item is T => item !== null && item !== undefined);\n};\n\nexport function shuffle<T>(arr: T[]): T[] {\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n}\n\nexport function deepClone<T>(arr: T[]): T[] {\n    return JSON.parse(JSON.stringify(arr));\n}\n\nexport function unique<T>(arr: T[]): T[] {\n    return Array.from(new Set(arr));\n}\n"]}