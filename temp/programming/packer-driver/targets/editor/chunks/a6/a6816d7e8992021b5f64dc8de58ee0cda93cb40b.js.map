{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-2d/assets/Scripts/Grid/GridGenerator.ts"],"names":["_decorator","Component","Node","instantiate","Vec3","EasyLevels","InGameAssets","ccclass","property","GridGenerator","start","setNodeActive","dummyCandy","testEffects","update","deltaTime","settingNode","isActive","active","levelData","levels","row","rows","col","cols","assetType","grid","asset","NodeMap","get","newNode","position","getTilePosition","setPosition","node","addChild","tileSize","x","y"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;;AAC1CC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,Y,iBAAAA,Y;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;+BAGjBS,a,WADZF,OAAO,CAAC,eAAD,C,UAELC,QAAQ,CAACN,IAAD,C,2BAFX,MACaO,aADb,SACmCR,SADnC,CAC6C;AAAA;AAAA;;AAAA;AAAA;;AAG3CS,QAAAA,KAAK,GAAG;AACN,eAAKC,aAAL,CAAmB,KAAKC,UAAxB,EAAoC,IAApC;AACA,eAAKC,WAAL;AACD;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAAE;;AAEpBJ,QAAAA,aAAa,CAACK,WAAD,EAAoBC,QAApB,EAAuC;AAC1DD,UAAAA,WAAW,CAACE,MAAZ,GAAqBD,QAArB;AACD;;AAEwB,cAAXJ,WAAW,GAAG;AAC1B;AACA,gBAAMM,SAAoB,GAAG;AAAA;AAAA,wCAAWC,MAAX,CAAkB,CAAlB,CAA7B;;AAEA,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,SAAS,CAACG,IAAlC,EAAwCD,GAAG,EAA3C,EAA+C;AAC7C,iBAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,SAAS,CAACK,IAAlC,EAAwCD,GAAG,EAA3C,EAA+C;AAC7C,oBAAME,SAAS,GAAGN,SAAS,CAACO,IAAV,CAAeL,GAAf,EAAoBE,GAApB,CAAlB;AACA,oBAAMI,KAAK,GAAG;AAAA;AAAA,gDAAaC,OAAb,CAAqBC,GAArB,CAAyBJ,SAAzB,CAAd;;AAEA,kBAAIE,KAAJ,EAAW;AACT;AACA,sBAAMG,OAAO,GAAG3B,WAAW,CAACwB,KAAD,CAA3B,CAFS,CAIT;;AACA,sBAAMI,QAAQ,GAAG,KAAKC,eAAL,CAAqBX,GAArB,EAA0BE,GAA1B,EAA+B,EAA/B,CAAjB,CALS,CAK4C;;AACrDO,gBAAAA,OAAO,CAACG,WAAR,CAAoBF,QAApB,EANS,CAQT;;AACA,qBAAKG,IAAL,CAAUC,QAAV,CAAmBL,OAAnB;AACAA,gBAAAA,OAAO,CAACZ,MAAR,GAAiB,IAAjB;AACD;AACF;AACF;AACF,SArC0C,CAuC3C;;;AACQc,QAAAA,eAAe,CAACX,GAAD,EAAcE,GAAd,EAA2Ba,QAA3B,EAAmD;AACxE,gBAAMC,CAAC,GAAGd,GAAG,GAAGa,QAAN,GAAiBA,QAAQ,GAAG,CAAtC;AACA,gBAAME,CAAC,GAAGjB,GAAG,GAAGe,QAAN,GAAiBA,QAAQ,GAAG,CAAtC;AACA,iBAAO,IAAIhC,IAAJ,CAASiC,CAAT,EAAYC,CAAZ,EAAe,CAAf,CAAP;AACD;;AA5C0C,O;;;;;iBACR,I","sourcesContent":["import { _decorator, Component, Node, instantiate, Vec3 } from \"cc\";\nimport { EasyLevels } from \"../Levels/EasyLevels\";\nimport { InGameAssets } from \"../InGameAssets\";\nimport { LevelData } from \"../Levels/LevelData\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"GridGenerator\")\nexport class GridGenerator extends Component {\n  @property(Node) dummyCandy: Node = null!;\n\n  start() {\n    this.setNodeActive(this.dummyCandy, true);\n    this.testEffects();\n  }\n\n  update(deltaTime: number) {}\n\n  private setNodeActive(settingNode: Node, isActive: boolean) {\n    settingNode.active = isActive;\n  }\n\n  private async testEffects() {\n    // Seviye verilerini al\n    const levelData: LevelData = EasyLevels.levels[1];\n\n    for (let row = 0; row < levelData.rows; row++) {\n      for (let col = 0; col < levelData.cols; col++) {\n        const assetType = levelData.grid[row][col];\n        const asset = InGameAssets.NodeMap.get(assetType);\n\n        if (asset) {\n          // Yeni node'u instantiate et\n          const newNode = instantiate(asset);\n          \n          // Pozisyonunu ayarla\n          const position = this.getTilePosition(row, col, 64); // 64 örnek tile boyutu\n          newNode.setPosition(position);\n          \n          // Node'u sahneye ekle\n          this.node.addChild(newNode);\n          newNode.active = true;\n        }\n      }\n    }\n  }\n\n  // Griddeki her bir tile'ın pozisyonunu hesaplar\n  private getTilePosition(row: number, col: number, tileSize: number): Vec3 {\n    const x = col * tileSize + tileSize / 2;\n    const y = row * tileSize + tileSize / 2;\n    return new Vec3(x, y, 0);\n  }\n}\n"]}