{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/match3-v100/assets/Scripts/Match/MatchStrategies/HorizontalMatchStrategy.ts"],"names":["HorizontalMatchStrategy","directions","dx","dy","checkMatch","pieceA","pieceB","grid","firstCheck","checkSinglePieceMatch","secondCheck","concat","piece","matches","row","col","i","currentPiece","isEmpty","node","name","push","length"],"mappings":";;;8BAKaA,uB;;;;;;;;;;;;;;;;;;;;;;;yCAAAA,uB,GAAN,MAAMA,uBAAN,CAAuD;AAAA;AAAA,eACnDC,UADmD,GACtC,CAChB;AAAEC,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,EAAE,EAAE;AAAb,WADgB,EACE;AAClB;AAAED,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,EAAE,EAAE,CAAC;AAAd,WAFgB,CAEE;AAFF,WADsC;AAAA;;AAMnDC,QAAAA,UAAU,CAACC,MAAD,EAAiBC,MAAjB,EAAiCC,IAAjC,EAAqD;AAClE,gBAAMC,UAAU,GAAG,KAAKC,qBAAL,CAA2BJ,MAA3B,EAAoCE,IAApC,CAAnB;AACA,cAAIG,WAAW,GAAG,KAAKD,qBAAL,CAA2BH,MAA3B,EAAoCC,IAApC,CAAlB;AACAG,UAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBH,UAAnB,CAAd;AACA,iBAAOE,WAAP;AAAmB;AACtB;;AAGMD,QAAAA,qBAAqB,CAACG,KAAD,EAAeL,IAAf,EAA+B;AACvD,gBAAMM,OAAgB,GAAG,CAACD,KAAD,CAAzB;AACA,gBAAME,GAAG,GAAGF,KAAK,CAACE,GAAlB;AACA,gBAAMC,GAAG,GAAGH,KAAK,CAACG,GAAlB,CAHuD,CAKvD;;AACA,eAAK,IAAIC,CAAC,GAAGD,GAAG,GAAG,CAAnB,EAAsBC,CAAC,IAAI,CAA3B,EAA8BA,CAAC,EAA/B,EAAmC;AAC/B,kBAAMC,YAAY,GAAGV,IAAI,CAACO,GAAD,CAAJ,CAAUE,CAAV,CAArB;AACA,gBAAGC,YAAY,CAACC,OAAb,IAAwBN,KAAK,CAACM,OAAjC,EAA0C;;AAE1C,gBAAID,YAAY,CAACE,IAAb,CAAkBC,IAAlB,KAA2BR,KAAK,CAACO,IAAN,CAAWC,IAA1C,EAAgD;AAC5CP,cAAAA,OAAO,CAACQ,IAAR,CAAaJ,YAAb;AACH,aAFD,MAEO;AACH,oBADG,CACI;AACV;AACJ,WAfsD,CAiBvD;;;AACA,eAAK,IAAID,CAAC,GAAGD,GAAG,GAAG,CAAnB,EAAsBC,CAAC,GAAGT,IAAI,CAACO,GAAD,CAAJ,CAAUQ,MAApC,EAA4CN,CAAC,EAA7C,EAAiD;AAC7C,kBAAMC,YAAY,GAAGV,IAAI,CAACO,GAAD,CAAJ,CAAUE,CAAV,CAArB;AACA,gBAAGC,YAAY,CAACC,OAAb,IAAwBN,KAAK,CAACM,OAAjC,EAA0C;;AAC1C,gBAAID,YAAY,CAACE,IAAb,CAAkBC,IAAlB,KAA2BR,KAAK,CAACO,IAAN,CAAWC,IAA1C,EAAgD;AAC5CP,cAAAA,OAAO,CAACQ,IAAR,CAAaJ,YAAb;AACH,aAFD,MAEO;AACH,oBADG,CACI;AACV;AACJ;;AAED,iBAAOJ,OAAO,CAACS,MAAR,IAAkB,CAAlB,GAAsBT,OAAtB,GAAgC,EAAvC;AACH;;AA3CyD,O","sourcesContent":["import { GridManager } from \"../../Grid/GridManager\";\nimport { Piece } from \"../../Piece/Piece\";\nimport { MatchChecker } from \"../MatchChecker\";\nimport { MatchStrategy } from \"./IMatchStrategy\";\n\nexport class HorizontalMatchStrategy implements MatchStrategy {\n    public directions = [\n        { dx: 0, dy: 1 }, // Right\n        { dx: 0, dy: -1 } // Left\n    ];\n\n    public checkMatch(pieceA: Piece , pieceB : Piece ,grid : Piece[][] )  {\n        const firstCheck = this.checkSinglePieceMatch(pieceA , grid);\n        let secondCheck = this.checkSinglePieceMatch(pieceB , grid);\n        secondCheck = secondCheck.concat(firstCheck)\n        return secondCheck;;\n    }\n\n\n    public checkSinglePieceMatch(piece: Piece, grid: Piece[][]){\n        const matches: Piece[] = [piece];\n        const row = piece.row;\n        const col = piece.col;\n\n        // Soldaki elemanları kontrol et\n        for (let i = col - 1; i >= 0; i--) {\n            const currentPiece = grid[row][i];\n            if(currentPiece.isEmpty || piece.isEmpty) break;\n\n            if (currentPiece.node.name === piece.node.name) {\n                matches.push(currentPiece);\n            } else {\n                break; // Eşleşme kesilirse dur\n            }\n        }\n\n        // Sağdaki elemanları kontrol et\n        for (let i = col + 1; i < grid[row].length; i++) {\n            const currentPiece = grid[row][i];\n            if(currentPiece.isEmpty || piece.isEmpty) break;\n            if (currentPiece.node.name === piece.node.name) {\n                matches.push(currentPiece);\n            } else {\n                break; // Eşleşme kesilirse dur\n            }\n        }\n\n        return matches.length >= 3 ? matches : [];\n    }\n}"]}